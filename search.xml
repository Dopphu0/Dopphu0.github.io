<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/04/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="highlight"><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="highlight"><span class="line">$ hexo server</span><br></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="highlight"><span class="line">$ hexo generate</span><br></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="highlight"><span class="line">$ hexo deploy</span><br></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>01 Error和Exception</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%83%E7%AB%A0/01%20Error%E5%92%8CException/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Error:</span></span><br><span class="line"><span class="comment"> * Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverFlowError栈溢出</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 一般不编写针对性的代码进行处理</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Exception：可以使用针对性的代码进行处理。如：空指针访问、网络连接中断、数组角标越界、试图读取不存在的文件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 对于这些错误一般有两种解决方案：一是一遇到错误就终止程序；另一种方法是在编写程序时就考虑到错误的检测、错误消息的提示，</span></span><br><span class="line"><span class="comment"> * 以及错误的处理</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 捕获错误最理想的是在编译期间，但有的错误只有在运行时才会发生、比如：除数为0、数组下标越界等。</span></span><br><span class="line"><span class="comment"> * 		&gt; 分类：编译时异常和运行时异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter07;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//		main(args);//栈溢出：java.lang.StackOverflowError</span></span><br><span class="line">		</span><br><span class="line">		Integer[] arr = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">1027</span>*<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">//堆溢出： java.lang.OutOfMemoryError</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第七章 异常处理</category>
      </categories>
  </entry>
  <entry>
    <title>02 异常的体系结构</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%83%E7%AB%A0/02%20%E5%BC%82%E5%B8%B8%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、异常的体系结构</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * java.lang.Throwable</span></span><br><span class="line"><span class="comment"> * 			|------java.lang.Error：一般不编写针对性的代码进行处理。</span></span><br><span class="line"><span class="comment"> * 			|------java.lang.Exception：可以进行异常处理</span></span><br><span class="line"><span class="comment"> * 					&gt; 编译时异常（checked）</span></span><br><span class="line"><span class="comment"> * 						- IOException</span></span><br><span class="line"><span class="comment"> * 					&gt; 运行时异常（unchecked）</span></span><br><span class="line"><span class="comment"> * 						- NullPointerException</span></span><br><span class="line"><span class="comment"> * 						- ArrayIndexOutOfBoundException</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 面试题：常见的异常有哪些？举例说明</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">	<span class="comment">//NullPointerException</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//		int[] arr = null;</span></span><br><span class="line"><span class="comment">//		System.out.println(arr[1]);</span></span><br><span class="line">		</span><br><span class="line"><span class="comment">//		String str = null;</span></span><br><span class="line"><span class="comment">//		System.out.println(str.charAt(0));</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//IndexOutOfBoundException</span></span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line"><span class="comment">//	public void test2() &#123;</span></span><br><span class="line"><span class="comment">//		int arr2[] = new int[]&#123;1,2,3&#125;;</span></span><br><span class="line"><span class="comment">//		System.out.println(arr2[9]);</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//java.lang.ClassCastException</span></span><br><span class="line"><span class="comment">//	public void test3() &#123;</span></span><br><span class="line"><span class="comment">//		Object obj = new Date();</span></span><br><span class="line"><span class="comment">//		String str = (String)obj;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//NumberFormatException</span></span><br><span class="line"><span class="comment">//	public void test4() &#123;</span></span><br><span class="line"><span class="comment">//		String s1 = &quot;abc&quot;;</span></span><br><span class="line"><span class="comment">//		int num = Integer.parseInt(s1);</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//InputMismatchException</span></span><br><span class="line"><span class="comment">//	public void test5() &#123;</span></span><br><span class="line"><span class="comment">//		Scanner scan = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//		int score = scan.nextInt();</span></span><br><span class="line"><span class="comment">//		System.out.println(score);</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//ArithmeticException</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">		System.out.println(a/<span class="number">0</span>);<span class="comment">//除数为0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//以上为运行时异常</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第七章 异常处理</category>
      </categories>
  </entry>
  <entry>
    <title>03 抓抛模型和try-catch-finally的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%83%E7%AB%A0/03%20%E6%8A%93%E6%8A%9B%E6%A8%A1%E5%9E%8B%E5%92%8Ctry-catch-finally%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、异常的处理：抓抛模型</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 过程一：“抛”，程序在正常执行过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。</span></span><br><span class="line"><span class="comment"> * 		并将此对象抛出。</span></span><br><span class="line"><span class="comment"> * 		一旦抛出对象以后，其后的代码就不再执行</span></span><br><span class="line"><span class="comment"> * 过程二：“抓”，可以理解为异常处理方式</span></span><br><span class="line"><span class="comment"> * 			1）try-catch-finally</span></span><br><span class="line"><span class="comment"> * 			2）throws</span></span><br><span class="line"><span class="comment"> * 		关于异常对象的产生：	① 系统自动生成的异常对象</span></span><br><span class="line"><span class="comment"> * 						② 手动的生成一个异常对象，并抛出（throw）</span></span><br><span class="line"><span class="comment"> * 二、try-catch-finally的使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * try&#123;</span></span><br><span class="line"><span class="comment"> * 		//可能会出现异常的代码</span></span><br><span class="line"><span class="comment"> * &#125;catch(异常类型1 变量名1)&#123;</span></span><br><span class="line"><span class="comment"> * 		//处理异常的方式1</span></span><br><span class="line"><span class="comment"> * &#125;catch(异常类型2 变量名2)&#123;</span></span><br><span class="line"><span class="comment"> * 		//处理异常的方式2</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * finally&#123;</span></span><br><span class="line"><span class="comment"> * 		//一定会执行的代码</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 说明:</span></span><br><span class="line"><span class="comment"> * 1.finally 是可选的</span></span><br><span class="line"><span class="comment"> * 2.使用try将可能出现异常的代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，</span></span><br><span class="line"><span class="comment"> * 根据此对象的类型，去catch中进行匹配</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出try-catch结构（没有finally时）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。</span></span><br><span class="line"><span class="comment"> * 	catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5.常用的异常对象处理的方式：1）String getMessage()	2）printStackTrace()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 6.在try结构中声明的变量，在出了try结构以后，就不能再被调用（非要用那就声明在外边）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 7.try-catch-finally结构是可以嵌套的</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 体会：使用try-catch-finally处理编译异常，使得程序在编译时就不再报错，但是运行时仍可能报错。</span></span><br><span class="line"><span class="comment"> * 		相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 实际开发中，主要用来处理编译时异常（否则都运行不了），就不针对运行时异常编写try-catch-finally了。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="comment">//		int i = 10/0;</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(s1);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(NumberFormatException n) &#123;</span><br><span class="line">			n.printStackTrace();</span><br><span class="line">			System.out.println(<span class="string">&quot;出现了NumberFormatException异常。&quot;</span>+n.getMessage());<span class="comment">//getMessage()方法，返回字符串</span></span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Exception：出现异常了&quot;</span>);</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;总是要执行的代码&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第七章 异常处理</category>
      </categories>
  </entry>
  <entry>
    <title>04 try-catch-finally中finally的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%83%E7%AB%A0/04%20try-catch-finally%E4%B8%ADfinally%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * try-catch-finally中finally的使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.finally是可选的</span></span><br><span class="line"><span class="comment"> * 2.finally中声明的是一定会被执行的代码，即使catch中又出现异常了，try中有return语句，</span></span><br><span class="line"><span class="comment"> * catch中有return语句等情况</span></span><br><span class="line"><span class="comment"> * 3.像数据库连接，输入输出流、网络编程Socket等资源，JVM是不能自动回收的，我们需要自己手动地进行资源的释放。</span></span><br><span class="line"><span class="comment"> * 因此，此时资源的释放，就需要声明在finally中。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">			<span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">			System.out.println(a/b);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			System.out.println(<span class="string">&quot;ArithmeticException&quot;</span>);</span><br><span class="line">			<span class="type">int</span> add[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">			System.out.println(add[<span class="number">9</span>]);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;我帅啊&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		System.out.println(&quot;我帅啊&quot;);//这个和finally的区别在于catch中也可能出现异常或return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//由于不知道蹦到哪个catch，所以每个catch都要return </span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">			<span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">			System.out.println(a/b);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			System.out.println(<span class="string">&quot;ArithmeticException&quot;</span>);</span><br><span class="line">			<span class="type">int</span> add[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">			System.out.println(add[<span class="number">9</span>]);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">			</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;我帅啊&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第七章 异常处理</category>
      </categories>
  </entry>
  <entry>
    <title>05 throws + 异常类型</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%83%E7%AB%A0/05%20throws%20+%20%E5%BC%82%E5%B8%B8%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理方式二：throws + 异常类型</span></span><br><span class="line"><span class="comment"> * 往上抛，让上一级处理</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1. &quot;throws + 异常类型&quot;写在方法的声明处。指明此方法执行时，可能会抛出异常类型。</span></span><br><span class="line"><span class="comment"> * 一旦方法体执行时，仍会在异常的代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会抛出。</span></span><br><span class="line"><span class="comment"> * 异常代码后续的代码就不会再执行了</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.体会：try-catch-finally真正将异常处理掉了</span></span><br><span class="line"><span class="comment"> * 		throws的方式只是将异常抛给了方法的调用者，并没有真正将异常处理掉</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.开发中如何选择try-catch-finally 还是使用throws</span></span><br><span class="line"><span class="comment"> * 		1）如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws。意味着，</span></span><br><span class="line"><span class="comment"> * 	如果子类重写的方法中有异常，必须使用try-catch-finally方式处理</span></span><br><span class="line"><span class="comment"> * 		2）执行的方法中，先后有调用了另外几个方法，这几个方法是递进关系执行的，我们建议这几个方法用throws的方式</span></span><br><span class="line"><span class="comment"> * 	进行处理，而最外层的方法可以考虑使用try-catch-finally的方式进行处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter07;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ArithmeticException&#123;</span><br><span class="line">		System.out.println(<span class="number">10</span>/<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			method1();</span><br><span class="line">		&#125;<span class="keyword">catch</span>(ArithmeticException e) &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第七章 异常处理</category>
      </categories>
  </entry>
  <entry>
    <title>06 抛异常方法重写的规则之一</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%83%E7%AB%A0/06%20%E6%8A%9B%E5%BC%82%E5%B8%B8%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E7%9A%84%E8%A7%84%E5%88%99%E4%B9%8B%E4%B8%80/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法重写的规则之一：</span></span><br><span class="line"><span class="comment"> * 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Test06</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test06</span>();</span><br><span class="line">		t.display(<span class="keyword">new</span> <span class="title class_">SubClass</span>());<span class="comment">//结合多态理解一下</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(SuperClass s)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			s.method();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperClass</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第七章 异常处理</category>
      </categories>
  </entry>
  <entry>
    <title>07 throw和throws</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%83%E7%AB%A0/07%20throw%E5%92%8Cthrows/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动的生成一个异常对象，并抛出（throw）—— throw 和 throws不一样，一定要注意区分！！！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter07;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			s.register(-<span class="number">100</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(s);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(<span class="type">int</span> id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="keyword">if</span>(id &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">this</span>.id = id;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//输出的id非法</span></span><br><span class="line">			<span class="comment">//手动抛出异常</span></span><br><span class="line"><span class="comment">//			throw new RuntimeException(&quot;您输入的数据非法&quot;);</span></span><br><span class="line"><span class="comment">//			throw new Exception(&quot;你看出现异常了&quot;);</span></span><br><span class="line">			<span class="comment">//试一下自己定义的异常</span></span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;不能输入负数&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Student [id=&quot;</span> + id + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第七章 异常处理</category>
      </categories>
  </entry>
  <entry>
    <title>08 如何自定义异常类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%83%E7%AB%A0/08%20%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如何自定义异常类？</span></span><br><span class="line"><span class="comment"> * 1. 继承现有的异常结构：Exception、RuntimeException</span></span><br><span class="line"><span class="comment"> * 2. 提供全局常量：serialVersionUID （唯一标识一个类）</span></span><br><span class="line"><span class="comment"> * 3. 提供重载的构造器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter07;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test08</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">	 <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">7034897190745766939L</span>;</span><br><span class="line">	 <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">()</span> &#123;</span><br><span class="line">		 </span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String msg)</span> &#123; </span><br><span class="line">		 <span class="built_in">super</span>(msg);</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第七章 异常处理</category>
      </categories>
  </entry>
  <entry>
    <title>一维数组的声明和初始化</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%89%E7%AB%A0/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%A3%B0%E6%98%8E%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//1.一维数组的声明和初始化</span></span><br><span class="line">		<span class="type">int</span> num;</span><br><span class="line">		num = <span class="number">10</span>;</span><br><span class="line">		<span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1001</span>;</span><br><span class="line">		<span class="type">int</span>[] ids;<span class="comment">//声明</span></span><br><span class="line">		<span class="comment">//1.1静态初始化：数组的初始化和数组元素的赋值操作同时进行</span></span><br><span class="line">		ids = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>&#125;;</span><br><span class="line">		<span class="comment">//1.2动态初始化：数组的初始化和数组元素的赋值操作分开进行</span></span><br><span class="line">		String[] name = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">		<span class="comment">//数组的角标从0开始，到数组长度-1</span></span><br><span class="line">		name[<span class="number">1</span>] = <span class="string">&quot;Dopphu&quot;</span>;</span><br><span class="line">		name[<span class="number">2</span>] = <span class="string">&quot;户&quot;</span>;</span><br><span class="line"><span class="comment">//		name[0] = &quot;符&quot;;</span></span><br><span class="line">		<span class="comment">//数组元素的默认初始值</span></span><br><span class="line"><span class="comment">/**	 元素类型		默认值</span></span><br><span class="line"><span class="comment"> * &gt; 整型			0</span></span><br><span class="line"><span class="comment"> * &gt; 浮点型		0.0</span></span><br><span class="line"><span class="comment"> * &gt; char		ASCII为0的字符</span></span><br><span class="line"><span class="comment"> * &gt; boolean	false</span></span><br><span class="line"><span class="comment"> * 引用数据类型</span></span><br><span class="line"><span class="comment"> * &gt; String		null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(name[<span class="number">0</span>]);</span><br><span class="line">		<span class="type">char</span>[] testc = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">4</span>];</span><br><span class="line">		System.out.println(<span class="string">&quot;---&quot;</span>+testc[<span class="number">0</span>]+<span class="string">&quot;***&quot;</span>);</span><br><span class="line">		<span class="comment">//获取长度</span></span><br><span class="line">		System.out.println(name.length);	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第三章 数组</category>
      </categories>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%89%E7%AB%A0/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找</span></span><br><span class="line"><span class="comment"> * 前提：数组是有序的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// int a[] = new int[]&#123;1,2,3,5,44,66&#125;;</span></span><br><span class="line">		<span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line">		<span class="type">int</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">		<span class="type">int</span> start=<span class="number">0</span>,end=a.length-<span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> mid;</span><br><span class="line">		<span class="type">boolean</span> <span class="variable">isfind</span> <span class="operator">=</span> <span class="literal">false</span>; </span><br><span class="line">		<span class="keyword">while</span>(start&lt;=end) &#123;</span><br><span class="line">			mid=(start+end)/<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span>(dest == a[mid]) &#123;</span><br><span class="line">				isfind = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dest&lt;a[mid]) &#123;</span><br><span class="line">				end = mid-<span class="number">1</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				start = mid+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(isfind) &#123;</span><br><span class="line">			System.out.print(<span class="string">&quot;找到了&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第三章 数组</category>
      </categories>
  </entry>
  <entry>
    <title>二维数组</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%89%E7%AB%A0/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest02</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//初始化01</span></span><br><span class="line">		<span class="type">int</span>[][] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">		System.out.println(arr1[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">		<span class="comment">//初始化02</span></span><br><span class="line">		<span class="type">int</span>[][] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>][];</span><br><span class="line">		arr2[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">		<span class="comment">//初始化03</span></span><br><span class="line">		<span class="type">int</span>[] arr3[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">		<span class="comment">//初始化04 </span></span><br><span class="line">		<span class="type">int</span> arr4[][] = <span class="keyword">new</span> <span class="title class_">int</span>[][] &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//		System.out.println(arr3[5][0]);//报错内容如下</span></span><br><span class="line">		<span class="comment">/* 空指针异常</span></span><br><span class="line"><span class="comment">		 * Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5</span></span><br><span class="line"><span class="comment">	at chapter03.ArrayTest02.main(ArrayTest02.java:17)</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="comment">//没有赋值的元素用null填充</span></span><br><span class="line"><span class="comment">//		System.out.println(arr4[1][2]);//??为什么不成功,看来子数组的长度是可以不相同的</span></span><br><span class="line">		System.out.println(arr2[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取二维数组的长度</span></span><br><span class="line">		System.out.println(arr4.length);<span class="comment">//其实二维数组是一维数组，只是它的元素是一个数组而已</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//所以这样遍历二维数组</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;arr4.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;arr4[i].length; j++) &#123;</span><br><span class="line">				System.out.print(arr4[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(arr3[<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">//0</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第三章 数组</category>
      </categories>
  </entry>
  <entry>
    <title>初见Arrays的方法</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%89%E7%AB%A0/%E5%88%9D%E8%A7%81Arrays%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Arrays方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter03;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraysTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">		<span class="type">int</span>[] b = &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125;;</span><br><span class="line">		<span class="type">boolean</span> <span class="variable">isEquals</span> <span class="operator">=</span> Arrays.equals(a, a);<span class="comment">//比较两个数组是否相等</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//toString输出数组信息</span></span><br><span class="line">		System.out.println(Arrays.toString(a));</span><br><span class="line">		<span class="comment">//fill 将指定值填充到数组当中</span></span><br><span class="line">		Arrays.fill(a, <span class="number">10</span>);</span><br><span class="line">		System.out.println(Arrays.toString(a));</span><br><span class="line">		<span class="comment">//排序 sort</span></span><br><span class="line">		Arrays.sort(b);</span><br><span class="line">		System.out.println(Arrays.toString(b));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//查找索引 binarySearch</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> Arrays.binarySearch(b, <span class="number">1</span>);</span><br><span class="line">		<span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> Arrays.binarySearch(a, <span class="number">10</span>);</span><br><span class="line">		System.out.println(index1);<span class="comment">//为什么是1：二分查找的缘故，解决</span></span><br><span class="line">		System.out.println(index2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第三章 数组</category>
      </categories>
  </entry>
  <entry>
    <title>二维数组的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%89%E7%AB%A0/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二维数组的使用：</span></span><br><span class="line"><span class="comment"> * 规定：二维数组分为外层数组的元素，内层数组的元素</span></span><br><span class="line"><span class="comment"> * int[][] arr = new int[4][3];</span></span><br><span class="line"><span class="comment"> * 外层元素 arr[0]，arr[1]等</span></span><br><span class="line"><span class="comment"> * 内层元素 arr[0][0]等</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 数组初始化值的默认情况看</span></span><br><span class="line"><span class="comment"> * 针对初始化方式一：比如 int[][] arr = new int[4][3];</span></span><br><span class="line"><span class="comment"> * 		外层初始化值为地址值</span></span><br><span class="line"><span class="comment"> * 		内层初始化值为：与一维数组初始化情况相同</span></span><br><span class="line"><span class="comment"> * 针对初始化方式二：比如 int[][] arr = new int[3][];</span></span><br><span class="line"><span class="comment"> * 		外层元素初始化值为null</span></span><br><span class="line"><span class="comment"> * 		内层元素初始化值为：不能调用，否则报错</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 基于内存结构进行理解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest03</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">int</span>[][] arr0 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">		System.out.println(arr0[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">4</span>][];</span><br><span class="line">		System.out.println(arr[<span class="number">3</span>]);<span class="comment">//null</span></span><br><span class="line">		<span class="comment">//↓报错：空指针异常</span></span><br><span class="line"><span class="comment">//		System.out.println(arr[3][0]);</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第三章 数组</category>
      </categories>
  </entry>
  <entry>
    <title>数组中的常见异常</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%89%E7%AB%A0/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组中的常见异常</span></span><br><span class="line"><span class="comment"> * 1.角标越界 java.lang.ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="comment"> * 2.空指针异常 java.lang.NullPointerException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExceptionTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//1.负数角标、越界角标</span></span><br><span class="line"><span class="comment">//		int arr[] = new int[] &#123;1,2,3&#125;;</span></span><br><span class="line"><span class="comment">//		System.out.println(arr[9]);</span></span><br><span class="line"><span class="comment">//		System.out.println(arr[-1]);</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line">		<span class="comment">//2.空指针异常</span></span><br><span class="line">		<span class="type">int</span>[][] arr0 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>][];</span><br><span class="line"><span class="comment">//		System.out.println(arr0[0][0]);</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.另一种情况</span></span><br><span class="line">		String[] arr1 = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>&#125;;</span><br><span class="line">		arr1[<span class="number">0</span>]=<span class="literal">null</span>;</span><br><span class="line">		System.out.println(arr1[<span class="number">0</span>].toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第三章 数组</category>
      </categories>
  </entry>
  <entry>
    <title>数组复制的测试</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B8%89%E7%AB%A0/%E6%95%B0%E7%BB%84%E5%A4%8D%E5%88%B6%E7%9A%84%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组复制的测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayCopyTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span>[] arr1,arr2;</span><br><span class="line">		<span class="type">int</span>[][] demo = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">		arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="comment">//		arr2 = new int[5];</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr1.length; i++) &#123;</span><br><span class="line">			System.out.print(arr1[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];</span><br><span class="line">		System.out.print(<span class="string">&quot;\n&quot;</span>+arr2.length);</span><br><span class="line"></span><br><span class="line">		System.out.println();</span><br><span class="line">		<span class="comment">//不能称作数组的复制,只能说是赋值</span></span><br><span class="line">		arr2 = arr1;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;arr2.length; i=i+<span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//			System.out.print(arr2[i]+&quot;\t&quot;);</span></span><br><span class="line">			arr2[i]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr1.length; i++) &#123;</span><br><span class="line">			System.out.print(arr1[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.print(<span class="string">&quot;\n&quot;</span>+arr2.length);</span><br><span class="line">		<span class="comment">//解释了为什么二维数组的地址不能赋给一维数组的地址，因为存的不只是地址</span></span><br><span class="line">		System.out.println(arr1);</span><br><span class="line">		System.out.println(demo);</span><br><span class="line">		System.out.println(<span class="string">&quot;-------------这样复制-------------&quot;</span>);</span><br><span class="line">		<span class="type">int</span> arr3[];</span><br><span class="line">		arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr3.length; i++) &#123;</span><br><span class="line">			arr3[i] = arr1[i];</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//数组的反转</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr3.length; i++) &#123;</span><br><span class="line">			System.out.print(arr3[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;\n-------------反转-------------&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;=arr3.length/<span class="number">2</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr3[i];</span><br><span class="line">			arr3[i] = arr3[arr3.length-i-<span class="number">1</span>];</span><br><span class="line">			arr3[arr3.length-i-<span class="number">1</span>] = temp; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr3.length; i++) &#123;</span><br><span class="line">			System.out.print(arr3[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">&quot;asd&quot;</span>.equals(<span class="string">&quot;asd&quot;</span>))System.out.println(<span class="string">&quot;\n他们是相同的&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第三章 数组</category>
      </categories>
  </entry>
  <entry>
    <title>String类型变量的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/String%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String类型变量的使用</span></span><br><span class="line"><span class="comment"> * 1.String属于引用数据类型，翻译为：字符串</span></span><br><span class="line"><span class="comment"> * 2.声明String类型变量时，使用一对 &quot;&quot;</span></span><br><span class="line"><span class="comment"> * 3.可以为空字符串</span></span><br><span class="line"><span class="comment"> * 4.String可以和8种基本数据类型做运算，且只能是连接运算 + //运算似乎先算左边的（没有括号的情况下）</span></span><br><span class="line"><span class="comment"> *      运算结果仍为String类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello ！&quot;</span>;</span><br><span class="line">        <span class="comment">// String ss = &quot;a&quot;;</span></span><br><span class="line">        System.out.println(s1+(<span class="string">&#x27;A&#x27;</span>+<span class="number">1</span>));<span class="comment">//+ ：连接运算</span></span><br><span class="line">        System.out.println(<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>+s1);</span><br><span class="line">        System.out.println(Integer.parseInt(<span class="string">&quot;123512123&quot;</span>));</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>三元运算符</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 三元运算符（三目运算符）：</span></span><br><span class="line"><span class="comment"> *      (条件表达式)?表达式1:表达式2</span></span><br><span class="line"><span class="comment"> * 表达式1和表达式2 得能用一个类型接收</span></span><br><span class="line"><span class="comment"> * 比如：()?字符串:数字——这到底用字符串接收还是用数值类型接收呢，所以错误</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 凡是可以用三元运算符，都可以改写为if...else；反之不成立</span></span><br><span class="line"><span class="comment"> * 当两者都可时，优先使用三元运算符，原因：简洁、执行效率高</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestS</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//三元运算符可以嵌套使用</span></span><br><span class="line">        <span class="type">int</span> m=<span class="number">12</span>,n=<span class="number">44</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">maxStr</span> <span class="operator">=</span> (m&gt;n) ? <span class="string">&quot;m打&quot;</span> : ((m&lt;n) ? <span class="string">&quot;n大&quot;</span> : <span class="string">&quot;m和n相等&quot;</span>);</span><br><span class="line">        System.out.println(maxStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>if_else</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/if_else/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">// 只有一行的话 if...else后的大括号是可以省略的。但是不建议省略（方便后续添加语句）,没有大括号时if和else就近配对</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">if_else</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(score&lt;<span class="number">60</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(score&lt;<span class="number">80</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>switch使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/switch%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">switchTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//语法和执行逻辑和C语言一致</span></span><br><span class="line">        <span class="comment">//switch 中的表达式，只能是一下数据类型byte、short、char、int，枚举（JDK5.0新增）、String（JDK7.0新增）</span></span><br><span class="line">        <span class="comment">//case后只能跟变量，不能跟条件表达式（可以这么理解，返回布尔，布尔不行，故不行）</span></span><br><span class="line">        <span class="comment">//if..else和switch都可时，优先使用switch效率较高</span></span><br><span class="line">        <span class="comment">// switch (key) &#123;</span></span><br><span class="line">        <span class="comment">//     case value:</span></span><br><span class="line">                </span><br><span class="line">        <span class="comment">//         break;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//     default:</span></span><br><span class="line">        <span class="comment">//         break;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个比较有意思的情况。default放在最前面</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> (<span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;默认情况！&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="comment">//先对case 进行匹配，发现没有，就执行default的内容，因为default后没有break，所以就继续执行case 1的语句，然后从case 1执行break出去</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">58</span>;</span><br><span class="line">        <span class="keyword">switch</span> (score/<span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进一步改进</span></span><br><span class="line">        <span class="keyword">switch</span> (score/<span class="number">60</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------分割线----------------------&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;2019年，请输入月份：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入&quot;</span>+month+<span class="string">&quot;月的第几日：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> day=scan.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (month-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                res+=<span class="number">30</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                res+=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                res+=<span class="number">30</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                res+=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                res+=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                res+=<span class="number">30</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                res+=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                res+=<span class="number">30</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                res+=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                res+=<span class="number">28</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                res+=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                res+=day;</span><br><span class="line">                System.out.println(month+<span class="string">&quot;月&quot;</span>+day+<span class="string">&quot;日&quot;</span>+<span class="string">&quot;是2019年的第&quot;</span>+res+<span class="string">&quot;天.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;月份输入有误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>位运算符</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二进制上位移运算</span></span><br><span class="line"><span class="comment"> * 1.位运算符操作的都是整型的数据</span></span><br><span class="line"><span class="comment"> * 2.在一定范围内相当于*2或/2的操作</span></span><br><span class="line"><span class="comment"> * &gt;&gt;：符号位不变,其它补0</span></span><br><span class="line"><span class="comment"> * 面试题：最高效的方式计算2*8</span></span><br><span class="line"><span class="comment"> * 2&lt;&lt;3     8&lt;&lt;1 这两个的时间复杂度都是O(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestW</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> i=-<span class="number">21</span>;</span><br><span class="line">        System.out.println(i&lt;&lt;<span class="number">27</span>);</span><br><span class="line">        System.out.println(i&gt;&gt;<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习：交换两个变量的值</span></span><br><span class="line">        <span class="type">int</span> num1=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> num2=<span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式1：临时变量</span></span><br><span class="line">        <span class="comment">//方式2：如下(仅限数值型交换，并且有溢出风险)</span></span><br><span class="line">        num1 = num1+num2;</span><br><span class="line">        num2 = num1-num2;</span><br><span class="line">        num1 = num1-num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;num1 = &quot;</span>+num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;num2 = &quot;</span>+num2);</span><br><span class="line">        <span class="comment">//方式三：位运算</span></span><br><span class="line">        num1 = num1^num2;</span><br><span class="line">        num2 = num1^num2;</span><br><span class="line">        num1 = num1^num2;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>关于进制</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%85%B3%E4%BA%8E%E8%BF%9B%E5%88%B6/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">class</span> <span class="title class_">test_base_system</span>&#123;<span class="comment">//关于进制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> num1=<span class="number">0b110</span>;</span><br><span class="line">        <span class="type">int</span> num2=<span class="number">110</span>;</span><br><span class="line">        <span class="type">int</span> num3=<span class="number">0127</span>;</span><br><span class="line">        <span class="type">int</span> num4=<span class="number">0x110A</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;num = &quot;</span>+num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;num = &quot;</span>+num2);</span><br><span class="line">        System.out.println(<span class="string">&quot;num = &quot;</span>+num3);</span><br><span class="line">        System.out.println(<span class="string">&quot;num = &quot;</span>+num4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">class</span> <span class="title class_">SortTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] sums=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        System.out.print(<span class="string">&quot;Before    &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;sums.length; i++)&#123;</span><br><span class="line">            System.out.print(sums[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;sums.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;sums.length-i-<span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sums[j]&gt;sums[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> sums[j];</span><br><span class="line">                    sums[j] = sums[j+<span class="number">1</span>];</span><br><span class="line">                    sums[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;After sorting    &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;sums.length; i++)&#123;</span><br><span class="line">            System.out.print(sums[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>初见Scanner类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%88%9D%E8%A7%81Scanner%E7%B1%BB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如何从键盘获取不同类型的变量：需要使用Scanner类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 具体实现步骤:</span></span><br><span class="line"><span class="comment"> * 1.导包：import java.util.Scanner;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScannerTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/*    Scanner scan = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">        // int num=scan.nextInt();</span></span><br><span class="line"><span class="comment">        String s=scan.nextLine();</span></span><br><span class="line"><span class="comment">        // System.out.println(num);</span></span><br><span class="line"><span class="comment">        System.out.println(s);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //对于字符（char）的获取</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;请输入你的性别：（男/女）&quot;);</span></span><br><span class="line"><span class="comment">        // char c = (scan.next()).charAt(0);</span></span><br><span class="line"><span class="comment">        String gender = scan.next();</span></span><br><span class="line"><span class="comment">        char c = gender.charAt(0);</span></span><br><span class="line"><span class="comment">        System.out.println(gender);//输入中文有问题</span></span><br><span class="line"><span class="comment">        // scan.close();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//练习</span></span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入小鹏的成绩：（0--100）&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">    <span class="keyword">if</span>(score==<span class="number">100</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奖励一辆BMW&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;<span class="number">80</span>&amp;&amp;score&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奖励一个iPad&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;<span class="number">60</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奖励一次游乐园&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    scan.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>初见random</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%88%9D%E8%A7%81random/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">randomtest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>)(Math.random()*<span class="number">10</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>循环练习</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%BE%AA%E7%8E%AF%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">// import java.util.Scanner;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// System.out.println(&quot;请输入数字，输入0结束输入&quot;);</span></span><br><span class="line">        <span class="comment">// int count = 0;</span></span><br><span class="line">        <span class="comment">// Scanner scan= new Scanner(System.in);</span></span><br><span class="line">        <span class="comment">// int sum=-1;</span></span><br><span class="line">        <span class="comment">// while(sum!=0)&#123;</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment">//     if(sum%2==0)&#123;</span></span><br><span class="line">        <span class="comment">//         count++;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     sum=scan.nextInt();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// System.out.println(&quot;偶数的个数为：&quot;+count);</span></span><br><span class="line">        <span class="comment">// scan.close();</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">           &#125; </span><br><span class="line">           System.out.println();</span><br><span class="line">        &#125;<span class="comment">//进阶：菱形星打印</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//九九乘法表</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;*&quot;</span>+j+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;    &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取当前时间</span></span><br><span class="line">        <span class="comment">// long start = System.currentTimeMillis();</span></span><br><span class="line">        <span class="comment">//一百以内质数的输出</span></span><br><span class="line">        <span class="comment">// int flag=1;</span></span><br><span class="line">        <span class="comment">// for(int i = 2;i&lt;=1000;i++)&#123;</span></span><br><span class="line">        <span class="comment">//     flag=1;</span></span><br><span class="line">        <span class="comment">//     for(int j = 2; j &lt; Math.sqrt(i); j++)&#123;</span></span><br><span class="line">        <span class="comment">//         if(i%j==0)&#123;</span></span><br><span class="line">        <span class="comment">//             flag=0;</span></span><br><span class="line">        <span class="comment">//             break;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     if(flag==1)&#123;</span></span><br><span class="line">        <span class="comment">//         System.out.println(i);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// long end = System.currentTimeMillis();</span></span><br><span class="line">        <span class="comment">// System.out.println(end-start);</span></span><br><span class="line">        <span class="comment">// 另一个方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        demo:<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= Math.sqrt(i); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i%j==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span> demo;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           count++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        System.out.println(Math.sqrt(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>比较运算符</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较运算符</span></span><br><span class="line"><span class="comment"> *  ==  !=  &gt;   &lt;   &gt;=  &lt;=  instanceof</span></span><br><span class="line"><span class="comment"> * 比较运算符的结果是boolean类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestB</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>算数运算符</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    运算符之一：算数运算符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">operatortest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//除号</span></span><br><span class="line">        <span class="type">int</span> num1=<span class="number">12</span>;</span><br><span class="line">        <span class="type">int</span> num2=<span class="number">5</span>;</span><br><span class="line">        System.out.println(num1/num2);</span><br><span class="line">        System.out.println(num1/(num2+<span class="number">0.0</span>));</span><br><span class="line">        System.out.println(<span class="number">2</span>%<span class="number">1.13</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        <span class="comment">//测试取模运算符</span></span><br><span class="line">        <span class="type">int</span> m1=<span class="number">12</span>;</span><br><span class="line">        <span class="type">int</span> n1=<span class="number">5</span>;</span><br><span class="line">        System.out.println(m1%n1);<span class="comment">//2</span></span><br><span class="line">        <span class="type">int</span> m2=-<span class="number">12</span>;</span><br><span class="line">        <span class="type">int</span> n2=<span class="number">5</span>;</span><br><span class="line">        System.out.println(m2%n2);<span class="comment">//-2</span></span><br><span class="line">        <span class="type">int</span> m3=<span class="number">12</span>;</span><br><span class="line">        <span class="type">int</span> n3=-<span class="number">5</span>;</span><br><span class="line">        System.out.println(m3%n3);<span class="comment">//2</span></span><br><span class="line">        <span class="type">int</span> m4=-<span class="number">12</span>;</span><br><span class="line">        <span class="type">int</span> n4=-<span class="number">5</span>;</span><br><span class="line">        System.out.println(m4%n4);<span class="comment">//-2</span></span><br><span class="line">        <span class="comment">//自增自减</span></span><br><span class="line">        <span class="type">int</span> a=<span class="number">9</span>;</span><br><span class="line">        System.out.println(a++);</span><br><span class="line">        a=<span class="number">9</span>;</span><br><span class="line">        System.out.println(++a);</span><br><span class="line">        a=<span class="number">9</span>;</span><br><span class="line">        System.out.println(a--);</span><br><span class="line">        System.out.println(<span class="string">&quot;***************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//三位数输出其个位十位百位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b1</span> <span class="operator">=</span> b%<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b2</span> <span class="operator">=</span> (b%<span class="number">100</span>-b1)/<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b3</span> <span class="operator">=</span> (b-b2*<span class="number">10</span>-b1)/<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;个位:&quot;</span>+b1);</span><br><span class="line">        System.out.println(<span class="string">&quot;十位:&quot;</span>+b2);</span><br><span class="line">        System.out.println(<span class="string">&quot;百位:&quot;</span>+b3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>基本数据类型之间的运算规则</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BF%90%E7%AE%97%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    基本数据类型之间的运算规则</span></span><br><span class="line"><span class="comment">    前提：这里只讨论7种基本数据类型变量间的运算。不包含boolean类型</span></span><br><span class="line"><span class="comment">    1.自动类型提升</span></span><br><span class="line"><span class="comment">        当容量小的变量和容量大的变量进行运算时，结果自动提升为容量大的数据类型。</span></span><br><span class="line"><span class="comment">        byte--&gt;short--&gt;int--&gt;long--&gt;float--&gt;double</span></span><br><span class="line"><span class="comment">        字符char、short、byte三种类型的变量做运算时，结果为int型（me：令我没想到的是同类型运算结果也是int型，不过char和char运算倒是可以理解结果为int）</span></span><br><span class="line"><span class="comment">        弹幕：书上说java在做运算的时候，如果操作数均在int范围内，那么一律在int的空间内进行运算</span></span><br><span class="line"><span class="comment">        说明：此时的容量大小指的是，表示数的范围大小。比如float和int（都是4字节），float的容量大些</span></span><br><span class="line"><span class="comment">    2.强制类型转化</span></span><br><span class="line"><span class="comment">        1）需要使用强转符：()</span></span><br><span class="line"><span class="comment">        2）注意点：强制类型转换可能会导致精度损失（比如浮点数转整型数）</span></span><br><span class="line"><span class="comment">    补充：两个小问题（见下）</span></span><br><span class="line"><span class="comment">    1.</span></span><br><span class="line"><span class="comment">    2.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        <span class="comment">// byte a = 2;</span></span><br><span class="line">        <span class="comment">// int b = 129;</span></span><br><span class="line">        <span class="comment">// byte d=12;</span></span><br><span class="line">        <span class="comment">// char demo = &#x27;a&#x27;;</span></span><br><span class="line">        <span class="comment">// // byte c = a+b;//编译不通过</span></span><br><span class="line">        <span class="comment">// // float c = a+b;</span></span><br><span class="line">        <span class="comment">// byte c = a+d;</span></span><br><span class="line">        <span class="comment">// System.out.println(c);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">23.5</span>;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">128</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">res</span> <span class="operator">=</span> (<span class="type">byte</span>)a;</span><br><span class="line">        System.out.println(res);<span class="comment">//-128，和二进制有关</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//补充</span></span><br><span class="line">            <span class="comment">//1.</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="number">121212</span>;<span class="comment">//末尾忘记加上l/L，没报错</span></span><br><span class="line">            <span class="comment">// long l2 = 78364872364872364;//报错超过了int类型的范围（The literal 78364872364872364 of type int is out of range ），末尾加上l/L就好了</span></span><br><span class="line">            <span class="comment">//float e2 = 123.2;//不加f就会报错，flaot必须加f/F</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.</span></span><br><span class="line">            <span class="comment">//float f1 = b+12.3;//编译失败，右边会被认为是double类型</span></span><br><span class="line">            <span class="type">float</span> <span class="variable">f2</span> <span class="operator">=</span> a+<span class="number">0.2f</span>;<span class="comment">//不报错</span></span><br><span class="line">            System.out.println(f2);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">while</span>(<span class="literal">false</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>循环求最大公倍数</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E5%BE%AA%E7%8E%AF%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E5%80%8D%E6%95%B0/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">class</span> <span class="title class_">LowestCommonMultipleTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> num1=<span class="number">12</span>,num2=<span class="number">15</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=num2; i&lt;num1*num2;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((i%num2==<span class="number">0</span>) &amp;&amp; (i%num1==<span class="number">0</span>))&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>赋值运算符</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">class</span> <span class="title class_">testF</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//连续赋值</span></span><br><span class="line">        <span class="type">int</span> j1=<span class="number">1</span>,j2=<span class="number">3</span>;</span><br><span class="line">        j1=j2=<span class="number">100</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;j1=&quot;</span>+j1+<span class="string">&quot;\nj2=&quot;</span>+j2);</span><br><span class="line">        <span class="type">short</span> s1=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// s1=s1+1;//编译失败</span></span><br><span class="line">        s1+=<span class="number">1</span>;<span class="comment">//这样的写法不会改变数据类型</span></span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.print(j1=<span class="number">9</span>);<span class="comment">//赋值运算返回左值：9</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>逻辑运算符</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短路或——||</span></span><br><span class="line"><span class="comment"> * 短路与——&amp;&amp;</span></span><br><span class="line"><span class="comment"> * 开发中短路求值用的多一些</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestL</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>|(i++&gt;<span class="number">0</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;<span class="number">0</span>||(k++)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;k=&quot;</span>+k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>键盘输入三个整数,进行排序并输出</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E4%B8%89%E4%B8%AA%E6%95%B4%E6%95%B0,%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F%E5%B9%B6%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 键盘输入三个整数，进行排序并输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">testOrder</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个整数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> num1=scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个整数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> num2=scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第三个整数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> num3=scan.nextInt();</span><br><span class="line">        <span class="comment">//if...else可以嵌套使用，但开发当中不建议过多嵌套</span></span><br><span class="line">        <span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num1&lt;num3)&#123;</span><br><span class="line">                System.out.println(num3);</span><br><span class="line">                System.out.println(num1);</span><br><span class="line">                System.out.println(num2);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num2&gt;num3)&#123;</span><br><span class="line">                System.out.println(num1);</span><br><span class="line">                System.out.println(num2);</span><br><span class="line">                System.out.println(num3);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(num1);</span><br><span class="line">                System.out.println(num3);</span><br><span class="line">                System.out.println(num2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(num2&lt;num3)&#123;</span><br><span class="line">                System.out.println(num3);</span><br><span class="line">                System.out.println(num2);</span><br><span class="line">                System.out.println(num1);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num3&lt;num1)&#123;</span><br><span class="line">                System.out.println(num2);</span><br><span class="line">                System.out.println(num1);</span><br><span class="line">                System.out.println(num3);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(num2);</span><br><span class="line">                System.out.println(num3);</span><br><span class="line">                System.out.println(num1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第二章 基本语法</category>
      </categories>
  </entry>
  <entry>
    <title>0901 String的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0901%20String%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> chapter09Test.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * String的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-10 13:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 结论：</span></span><br><span class="line"><span class="comment">    * 1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量</span></span><br><span class="line"><span class="comment">    * 2.只要其中一个是变量，结果就在堆中。（就new一个在堆里）</span></span><br><span class="line"><span class="comment">    * 3.如果拼接的结果调用intern()方法，返回值就在常量池中</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span> + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s1 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span>+s2;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> s1+s2;</span><br><span class="line"></span><br><span class="line">        System.out.println(s3==s4);<span class="comment">//true</span></span><br><span class="line">        System.out.println(s3==s5);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s3==s6);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s5==s6);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s4==s6);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s7==s6);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s8</span> <span class="operator">=</span> s5.intern();<span class="comment">//返回值得到得到s8使用的常量池中已经存在得到“javaEEhadoop”</span></span><br><span class="line">        System.out.println(s8==s3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * String的实例化的方式：</span></span><br><span class="line"><span class="comment">    * 方式一：通过字面量的方式</span></span><br><span class="line"><span class="comment">    * 方式二：通过 new + 构造器 的方式</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 面试题：String s = new String(&quot;abc&quot;);方式创建对象，在内存中创建了几个对象？</span></span><br><span class="line"><span class="comment">    *       两个：一个是堆空间中的new出来的结构，另一个是char[]对应的常量池中的数据：&quot;abc&quot;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过new + 构造器的方式：此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s1==s2);<span class="comment">//true</span></span><br><span class="line">        System.out.println(s1==s3);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s1==s4);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s3==s4);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">10</span>,<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">101</span>,<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(p1.name.equals(p2.name));<span class="comment">//true</span></span><br><span class="line">        System.out.println(p1.name==p2.name);<span class="comment">//true</span></span><br><span class="line">        System.out.println(p1.name==s1);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * String：字符串，使用一对&quot;&quot;引起来表示</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 1.String声明为final的，不可被继承</span></span><br><span class="line"><span class="comment">    * 2.String实现了Serializable接口，表明字符串是支持序列化的。</span></span><br><span class="line"><span class="comment">    *           实现了Comparable接口，表明String可以比较大小</span></span><br><span class="line"><span class="comment">    * 3.String内部定义了final char[] value用于存储字符串数据</span></span><br><span class="line"><span class="comment">    * 4.String：代表不可变的字符序列。简称：不可变性。</span></span><br><span class="line"><span class="comment">    *       体现： 1.当对字符串重新赋值时，需要重新指定内存区域赋值，不能使用原有的value进行赋值。</span></span><br><span class="line"><span class="comment">    *             2.当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有value进行赋值</span></span><br><span class="line"><span class="comment">    *             3.当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存内存区域</span></span><br><span class="line"><span class="comment">    * 5.通过字面量的方式（区别于new）给一个字符串赋值，此时字符串值声明在字符串常量池中。</span></span><br><span class="line"><span class="comment">    * 6.字符串常量池中是不会存储相同内容的字符串的。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//常量池中没有就新建一个</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//字面量的定义方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(s1==s2);</span><br><span class="line">        s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        s3+=<span class="string">&quot;def&quot;</span>;</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s4.replace(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">        System.out.println(s4);</span><br><span class="line">        System.out.println(s5);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个小问题</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s2 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">        System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;javaEE&quot;</span>;<span class="comment">//s4 常量</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s4 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">        System.out.println(s1 == s5);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0904%20String%E6%96%B9%E6%B3%952/</url>
    <content><![CDATA[<pre class="highlight"><span class="line">空白</span><br></pre>


]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0902 一道面试题</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0902%20%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 一道面试题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 结合下面的博客理解吧(或者就是当成按值传递吧呜呜呜理解不了好难受)</span></span><br><span class="line"><span class="comment"> *https://blog.csdn.net/qq_41630866/article/details/87915501?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7Edefault-1.control&amp;dist_request_id=1330144.8379.16180432417820869&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7Edefault-1.control</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-10 16:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">    <span class="type">char</span>[] ch = &#123;<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String str,<span class="type">char</span> ch[])</span>&#123;</span><br><span class="line">        str = <span class="string">&quot;test ok&quot;</span>;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        ch[<span class="number">0</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test02</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test02</span>();</span><br><span class="line">        ex.change(ex.str,ex.ch);</span><br><span class="line"></span><br><span class="line">        System.out.println(ex.str);</span><br><span class="line">        System.out.println(ex.ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0903 String方法1</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0903%20String%E6%96%B9%E6%B3%951/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * String方法1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * int Length()：返回字符串的长度：return value.length</span></span><br><span class="line"><span class="comment"> * char charAt()：返回某索引处的字符return value[index]</span></span><br><span class="line"><span class="comment"> * boolean isEmpty()：判断是否是空字符串：return value.length == 0</span></span><br><span class="line"><span class="comment"> * String toLowerCase()：使用默认语言环境，将String中的所有字符转换为小写</span></span><br><span class="line"><span class="comment"> * String toUpperCase()：使用默认语言环境，将String中的所有字符转换为大写</span></span><br><span class="line"><span class="comment"> * String trim()：返回字符串的副本，忽略前导空白和尾部空白</span></span><br><span class="line"><span class="comment"> * boolean equals()：比较字符串的内容是否相等</span></span><br><span class="line"><span class="comment"> * boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</span></span><br><span class="line"><span class="comment"> * String concat(String str)：将指定字符串连接到此字符串的结尾。等价于用“+”</span></span><br><span class="line"><span class="comment"> * int compareTo(String anotherString)：比较两个字符串的大小</span></span><br><span class="line"><span class="comment"> * String substring(int beginIndex)：返回一个新的字符串，它是此字符串从beginIndex开始截取到最后的一个子字符串</span></span><br><span class="line"><span class="comment"> * String substring(int beginIndex, int endIndex)：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex（不包含）的一个子字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-10 18:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;  asd  asd  &quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;***&quot;</span>+s1.trim()+<span class="string">&quot;***&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;fun&quot;</span>;</span><br><span class="line">        System.out.println(s2.concat(<span class="string">&quot;ction&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(s2.compareTo(<span class="string">&quot;f1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;0123456&quot;</span>;</span><br><span class="line">        System.out.println(s3.substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0905 String方法3</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0905%20String%E6%96%B9%E6%B3%953/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * String方法3</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用newChar替换此字符串</span></span><br><span class="line"><span class="comment"> * 中出现的所有oldChar得到</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列</span></span><br><span class="line"><span class="comment"> * 替换此字符串所有匹配字面值目标序列的子字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * String replaceAll(String regex, String replacement)：使用给定的replacement替换</span></span><br><span class="line"><span class="comment"> * 此字符串所有匹配给定的正则表达式的子字符串</span></span><br><span class="line"><span class="comment"> * String replaceFirst(String regex, String replacement)：使用给定的replacement替换</span></span><br><span class="line"><span class="comment"> * 此字符串匹配给定的正则表达式的第一个子字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * String[] split(String regex)：根据给定的正则表达式的匹配拆分此字符串</span></span><br><span class="line"><span class="comment"> * String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果</span></span><br><span class="line"><span class="comment"> * 超过了，剩下的全部都放到最后一个元素中。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-10 18:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;12asd12asd12&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(<span class="string">&quot;\\d+&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">tel</span> <span class="operator">=</span> <span class="string">&quot;0571-4534289&quot;</span>;</span><br><span class="line">        <span class="comment">//判断这是否是一个杭州的固定电话</span></span><br><span class="line">        System.out.println(tel.matches(<span class="string">&quot;0571-\\d&#123;7,8&#125;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0906 涉及到String类中与其它结构之间的转换</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0906%20%E6%B6%89%E5%8F%8A%E5%88%B0String%E7%B1%BB%E4%B8%AD%E4%B8%8E%E5%85%B6%E5%AE%83%E7%BB%93%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 涉及到String类中与其它结构之间的转换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-10 19:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 只有字符类关系的才可以进行强转</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 复习：</span></span><br><span class="line"><span class="comment">        * String 与基本数据类型、包装类之间的转换</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * String ——&gt; 基本数据类型、包装类：调用包装类的静态方法——parseXxx(str)</span></span><br><span class="line"><span class="comment">        * 基本数据类型、包装类 ——&gt; String：调用String重载的valueOf(xxx)</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;121233asd&quot;</span>;</span><br><span class="line"><span class="comment">//        int num = (int)str1;//错误 的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(str1);</span><br><span class="line"><span class="comment">//        int num2 = Integer.parseInt(str2);//java.lang.NumberFormatException 包含字母会报错</span></span><br><span class="line">        System.out.println(num1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        System.out.println(String.valueOf(num3));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        System.out.println(String.valueOf(num3)==str3);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * String 与 char[] 之间的转换</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * String ——&gt; char[]：调用String的toCharArray()</span></span><br><span class="line"><span class="comment">        * char[] ——&gt; String：调用String的构造器</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line">        <span class="type">char</span>[] charArr1 = s1.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; charArr1.length; i++)&#123;</span><br><span class="line">            System.out.println(charArr1[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] charArr2 = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArr2);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * String 与 byte[] 之间的转换</span></span><br><span class="line"><span class="comment">        * String ——&gt; byte[]：调用String的getBytes()</span></span><br><span class="line"><span class="comment">        *说明：</span></span><br><span class="line"><span class="comment">        * 解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc123中国&quot;</span>;<span class="comment">//涉及编码集，当前使用utf-8，一个汉字三个字节</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = str1.getBytes();<span class="comment">//使用默认的字符集</span></span><br><span class="line">        System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Arrays.toString(str1.getBytes(<span class="string">&quot;gbk&quot;</span>)));</span><br><span class="line">            <span class="comment">/*gbk中一个汉字两个字节*/</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Arrays.toString(bytes));<span class="comment">///使用默认字符集进行解码</span></span><br><span class="line">        System.out.println(str2);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(str1.getBytes(<span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">        System.out.println(str3);<span class="comment">//出现乱码。原因：编码集和解码集不一致。</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(str1.getBytes(<span class="string">&quot;gbk&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">        System.out.println(str4);<span class="comment">//没有出现乱码，解码与编码使用的字符集一致</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0907 关于StringBuffer和StringBuilder的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0907%20%E5%85%B3%E4%BA%8EStringBuffer%E5%92%8CStringBuilder%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 关于StringBuffer和StringBuilder的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * StringBuffer是线程安全的，方法都加了synchronized 关键字</span></span><br><span class="line"><span class="comment"> *  String 效率最低</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-10 20:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * String、StringBuffer、StringBuilder三者的异同？</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * String：不可变的字符序列：底层使用char[] 进行存储</span></span><br><span class="line"><span class="comment">    * StringBuffer：可变的字符序列，线程安全的，效率低：底层使用char[] 进行存储</span></span><br><span class="line"><span class="comment">    * StringBuilder：可变的字符序列，jdk5.0新增，线程不安全，效率高：底层使用char[] 进行存储</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 源码分析</span></span><br><span class="line"><span class="comment">    * String str = new String();//char[] value = new char[0];</span></span><br><span class="line"><span class="comment">    * String str1 = new String(&quot;a,b,c&quot;);//char[] value = new char[]&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * StringBuffer sb1 = new StringBuffer();//char[] value = new char[16];底层创建了一个长度是16的数组。</span></span><br><span class="line"><span class="comment">    * sb1.append(&#x27;a&#x27;);//value[0] = &#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">    * sb1.append(&#x27;b&#x27;);//value[1] = &#x27;b&#x27;;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * StringBuffer sb2 = new StringBuffer(&quot;abc&quot;);//char[] value = new char[&quot;abc&quot;.length()+16];</span></span><br><span class="line"><span class="comment">    * 注：StringBuilder也是这么扩容的</span></span><br><span class="line"><span class="comment">    * //问题1，System.out.println(sb2.length());//3</span></span><br><span class="line"><span class="comment">    * //问题2，扩容问题：如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。</span></span><br><span class="line"><span class="comment">    *       默认情况下，扩容为原来容量的2倍+2，同时、将原有数组中的元素复制的到新的数组中。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *        指导意义：建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)——就是一开始</span></span><br><span class="line"><span class="comment">    *           就指定一个长度，省的不够了再扩容。然后根据是否需要线程安全选择用StringBuffer还是StringBuilder</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;abcde&quot;</span>);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        System.out.println(sb2.length());<span class="comment">//返回0（不是16啊喂）</span></span><br><span class="line">        sb1.setCharAt(<span class="number">0</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">        System.out.println(sb1);</span><br><span class="line">        System.out.println(sb1.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0908 StringBuffer的常用方法</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0908%20StringBuffer%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * StringBuffer的常用方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * StringBuffer append(xxx)：提供了很多append()方法，用于字符串的拼接</span></span><br><span class="line"><span class="comment"> * StringBuffer delete(int start, int end)：删除指定位置的内容(左闭右开)</span></span><br><span class="line"><span class="comment"> * StringBuffer replace(int start, int end, String str)：把[start, end)位置替换为str</span></span><br><span class="line"><span class="comment"> * StringBuffer insert(int offset, xxx)：在指定位置插入xxx</span></span><br><span class="line"><span class="comment"> * StringBuffer reverse()：将当前字符串反转</span></span><br><span class="line"><span class="comment"> * public int indexOf(String str)</span></span><br><span class="line"><span class="comment"> * public String substring(int start, int end)</span></span><br><span class="line"><span class="comment"> * public int Length()</span></span><br><span class="line"><span class="comment"> * public char charAt(int n)</span></span><br><span class="line"><span class="comment"> * public void setCharAt(int n, char ch)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-11 10:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;anc&quot;</span>);</span><br><span class="line">        s1.append(<span class="number">11</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line">        s1.delete(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line">        s1.reverse();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0909 JDK 8之前日期和时间的API测试</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0909%20JDK%208%E4%B9%8B%E5%89%8D%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%9A%84API%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * JDK 8之前日期和时间的API测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-11 10:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.System类中的currentTimeMillis()</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//返回当前时间与1970年01月01日00时00分00秒之间以毫秒为单位的时间差</span></span><br><span class="line">        <span class="comment">//成为时间戳</span></span><br><span class="line">        System.out.println(time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * java.util.Date类</span></span><br><span class="line"><span class="comment">        *           |--- java.sql.Date类</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 1.两个构造器的使用</span></span><br><span class="line"><span class="comment">        *       构造器一：创建一个当前时间的Date对象</span></span><br><span class="line"><span class="comment">        *       构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line"><span class="comment">        * 2.两个方法的使用</span></span><br><span class="line"><span class="comment">        *   toString()：显示当前的年、月、日、时、分、秒</span></span><br><span class="line"><span class="comment">        *   getTime()：获取当前Date对象对应的毫秒数（时间戳）</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 3.java.sql.Date对应数据库中的日期类型的变量</span></span><br><span class="line"><span class="comment">        *       1）如何实例化</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *       2）将java.sql.Date 转换为 java.util.Date</span></span><br><span class="line"><span class="comment">        *               子类转父类，多态直接强转即可</span></span><br><span class="line"><span class="comment">        *       3）将java.util.Date 转换为 java.sql.Date</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器一：创建一个当前时间的Date对象</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(date1.toString());</span><br><span class="line">        System.out.println(date1.getTime());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1618108721043L</span>);</span><br><span class="line">        System.out.println(date2.toString());</span><br><span class="line"></span><br><span class="line">        java.sql.<span class="type">Date</span> <span class="variable">date3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="number">1618108875378L</span>);</span><br><span class="line">        System.out.println(date3.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line">        <span class="comment">//情况一：</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="number">1618108875378L</span>);</span><br><span class="line">        java.sql.<span class="type">Date</span> <span class="variable">date6</span> <span class="operator">=</span> (java.sql.Date)date5;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        情况二：</span></span><br><span class="line">        <span class="comment">//两者共通的就是时间戳（毫秒数）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">dte4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(date7.getTime());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0910 一个易出错的题，可以当做面试题</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0910%20%E4%B8%80%E4%B8%AA%E6%98%93%E5%87%BA%E9%94%99%E7%9A%84%E9%A2%98%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BD%93%E5%81%9A%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 一个易出错的题，可以当做面试题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-11 14:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test10</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//        System.out.println(str.length());//空指针异常NullPointerException</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        sb.append(str);<span class="comment">//不会报错</span></span><br><span class="line"></span><br><span class="line">        System.out.println(sb.length());<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">        System.out.println(sb);<span class="comment">//&quot;null&quot;，是一个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        StringBuffer sb1 = new StringBuffer(str);//抛异常</span></span><br><span class="line"><span class="comment">//        System.out.println(sb1);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0911 JDK 8之前日期时间的API测试</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0911%20JDK%208%E4%B9%8B%E5%89%8D%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E7%9A%84API%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * JDK 8之前日期时间的API测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. System类中currentTimeMillis()</span></span><br><span class="line"><span class="comment"> * 2. java.util.Date和子类java.sql.Date</span></span><br><span class="line"><span class="comment"> * 3. SimpleDateFormat</span></span><br><span class="line"><span class="comment"> * 4. Calender</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-11 15:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test11</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * SimpleDateFormat的使用：SimpleDateFormat对日期Date类的格式化和解析</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 1.两个操作</span></span><br><span class="line"><span class="comment">        *   1.1 格式化：日期——&gt;字符串</span></span><br><span class="line"><span class="comment">        *   1.2 解析：格式化的逆过程，字符串——&gt;日期</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 2.SimpleDateFormat的实例化</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleDateFormat</span><span class="params">()</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">            <span class="comment">//实例化SimpleDateFormat</span></span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//格式化：日期——&gt;字符串</span></span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            System.out.println(date);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">            System.out.println(res);<span class="comment">//&quot;2021/4/11 下午3:10&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析：格式化的逆过程，字符串——&gt;日期</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2011/14/11 下午3:13&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> sdf.parse(str);<span class="comment">//因为你可能传一个不符合格式的字符串，所以要么异常处理，要么抛异常</span></span><br><span class="line">            System.out.println(date1);</span><br><span class="line">            System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            按照指定方式进行格式化</span></span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">            <span class="comment">//格式化</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">format1</span> <span class="operator">=</span> sdf2.format(date);</span><br><span class="line">            System.out.println(format1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析：要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现)</span></span><br><span class="line">            <span class="comment">//否则就会抛异常</span></span><br><span class="line">            <span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> sdf2.parse(<span class="string">&quot;2020-02-11 11:11:11&quot;</span>);</span><br><span class="line">            System.out.println(date2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 练习一：字符串&quot;2020-0908&quot;转换为java.sql.Date</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">birth</span> <span class="operator">=</span> <span class="string">&quot;2020-06-11&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">resDate</span> <span class="operator">=</span> sdf1.parse(birth);</span><br><span class="line">            System.out.println(resDate);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将java.util.Date转为java.sql.Date</span></span><br><span class="line">            java.sql.<span class="type">Date</span> <span class="variable">resSqlDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(resDate.getTime());</span><br><span class="line">            System.out.println(resSqlDate);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0912 Calender 日历类（抽象类）的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0912%20Calender%20%E6%97%A5%E5%8E%86%E7%B1%BB%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%89%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-11 16:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test12</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * Calender 日历类（抽象类）的使用</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tsetCalender</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.实例化</span></span><br><span class="line">        <span class="comment">//方式一：创建其子类（GregorianCalendar）的对象</span></span><br><span class="line">        <span class="comment">//方式二：调用其静态的方法getInstance()</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        System.out.println(calendar.getClass());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.常用方法</span></span><br><span class="line">        <span class="comment">//get()：获取常用的属性信息</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days);</span><br><span class="line">        System.out.println(calendar.get(Calendar.DAY_OF_YEAR));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//set()：修改</span></span><br><span class="line">        calendar.set(Calendar.DAY_OF_MONTH,<span class="number">10</span>);</span><br><span class="line">        days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add()</span></span><br><span class="line">        calendar.add(Calendar.DAY_OF_MONTH,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//        calendar.add(Calendar.DAY_OF_MONTH,-3);//减去天数</span></span><br><span class="line">        days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getTime()：日历类——&gt;Date</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        System.out.println(date1);</span><br><span class="line">        System.out.println(<span class="string">&quot;**************分割线**************&quot;</span>);</span><br><span class="line">        <span class="comment">//setTime()：Date——&gt;日历类</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        calendar.setTime(date);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        System.out.println(calendar.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0913 LocalDate、LocalTime、LocalDateTime 的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0913%20LocalDate%E3%80%81LocalTime%E3%80%81LocalDateTime%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-11 17:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test13</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//偏移量</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2021</span>-<span class="number">1900</span>,<span class="number">4</span>-<span class="number">1</span>,<span class="number">11</span>);</span><br><span class="line">        System.out.println(date1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * LocalDate、LocalTime、LocalDateTime 的使用</span></span><br><span class="line"><span class="comment">    * 日期        时间          日期和时间</span></span><br><span class="line"><span class="comment">    * 说明：</span></span><br><span class="line"><span class="comment">    *   1.LocalDateTime相较于LocalDate、LocalTime，使用率要高</span></span><br><span class="line"><span class="comment">    *   2.类似于Calender</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化：now() 或 of() 这两种方式</span></span><br><span class="line">        <span class="comment">//now()：获取当前的日期、时间、日期+时间</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">localTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">        System.out.println(localDate);</span><br><span class="line">        System.out.println(localTime);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*********************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//of()：设置指定的年月日时分秒是没有偏移量的</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime1</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2021</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">17</span>,<span class="number">59</span>);</span><br><span class="line">        System.out.println(localDateTime1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getXxx()</span></span><br><span class="line">        System.out.println(localDateTime.getDayOfMonth());</span><br><span class="line">        System.out.println(localDateTime.getDayOfWeek());</span><br><span class="line">        System.out.println(localDateTime.getMonth());<span class="comment">//如：四月返回 APRIL</span></span><br><span class="line">        System.out.println(localDateTime.getMonthValue());<span class="comment">//如：四月，返回 4</span></span><br><span class="line">        System.out.println(localDateTime.getMinute());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//体现不可变性</span></span><br><span class="line">        <span class="comment">//withXxx()：设置相关的属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">localDate1</span> <span class="operator">=</span> localDate.withDayOfMonth(<span class="number">22</span>);</span><br><span class="line">        System.out.println(localDate1);</span><br><span class="line">        System.out.println(localDate);<span class="comment">//并未发生改变</span></span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime2</span> <span class="operator">=</span> localDateTime.withHour(<span class="number">4</span>);</span><br><span class="line">        System.out.println(localDateTime2);</span><br><span class="line">        System.out.println(localDateTime1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不可变性</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime3</span> <span class="operator">=</span> localDateTime.plusMonths(<span class="number">3</span>);</span><br><span class="line">        System.out.println(localDateTime3);</span><br><span class="line">        System.out.println(localDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0914 Instant （瞬时点） 的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0914%20Instant%20%EF%BC%88%E7%9E%AC%E6%97%B6%E7%82%B9%EF%BC%89%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.OffsetDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Instant （瞬时点） 的使用</span></span><br><span class="line"><span class="comment"> * 类似于java.util.Date类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-11 22:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test14</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//now()：获取本初子午线对应的标准时间</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now();<span class="comment">//默认格林威治时间（本初子午线），比东八区晚8个小时</span></span><br><span class="line">        System.out.println(instant);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加时间的偏移量</span></span><br><span class="line">        <span class="type">OffsetDateTime</span> <span class="variable">offsetDateTime</span> <span class="operator">=</span> instant.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">        System.out.println(offsetDateTime);<span class="comment">//例子：2021-04-11T22:39:20.840595400+08:00</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//toEpochMilli()：获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数——Date类的getTime方法</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">milli</span> <span class="operator">=</span> instant.toEpochMilli();</span><br><span class="line">        System.out.println(milli);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ofEpochMilli()：通过给定的毫秒数，获取Instant实例 ——&gt; Date(long millis)</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant1</span> <span class="operator">=</span> Instant.ofEpochMilli(<span class="number">1618152169715L</span>);</span><br><span class="line">        System.out.println(instant1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0915 DateTimeFormatter：格式化或解析日期、时间</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0915%20DateTimeFormatter%EF%BC%9A%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%88%96%E8%A7%A3%E6%9E%90%E6%97%A5%E6%9C%9F%E3%80%81%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.format.FormatStyle;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalAccessor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-11 22:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test15</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * DateTimeFormatter：格式化或解析日期、时间</span></span><br><span class="line"><span class="comment">    * 类似SimpleDateFormatter</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span></span><br><span class="line"><span class="comment">//        方式二：本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG)</span></span><br><span class="line"><span class="comment">//        方式三：自定义的格式，如：ofPattern(&quot;yyyy-MM-dd hh:mm:ss E&quot;)</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ISO_DATE_TIME;</span><br><span class="line">        System.out.println(formatter);</span><br><span class="line">        <span class="comment">//格式化：日期——&gt;字符串</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> formatter.format(localDateTime);</span><br><span class="line">        System.out.println(str1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析：字符串——&gt;日期</span></span><br><span class="line">        TemporalAccessor parse= formatter.parse(<span class="string">&quot;2021-04-11T23:23:26.3453121&quot;</span>);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：本地化相关格式。如：ofLocalizedDateTime()</span></span><br><span class="line">        <span class="comment">//FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT ：使用于LocalDateTime</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter1</span> <span class="operator">=</span> DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> formatter1.format(localDateTime);</span><br><span class="line">        System.out.println(str2);<span class="comment">//2021/4/12 下午4:52</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//本地化相关格式：如，ofLocalizedDate()</span></span><br><span class="line">        <span class="comment">//FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT ：使用于LocalDate</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter2</span> <span class="operator">=</span> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> formatter2.format(LocalDate.now());</span><br><span class="line">        System.out.println(str3);<span class="comment">//2021年4月12日</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：自定义的格式。如：ofPattern(&quot;yyyy-MM-dd hh:mm&quot;ss&quot;)</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter3</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> formatter3.format(LocalDateTime.now());</span><br><span class="line">        System.out.println(str4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        <span class="type">TemporalAccessor</span> <span class="variable">accessor</span> <span class="operator">=</span> formatter3.parse(<span class="string">&quot;2021-04-12 05:01:04&quot;</span>);</span><br><span class="line">        System.out.println(accessor);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>0916 Comparable和Comparator的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%B9%9D%E7%AB%A0/0916%20Comparable%E5%92%8CComparator%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> chapter09Test.Goods;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 一、说明：Java中的对象，正常情况下，只能进行比较：== 或 != 。不能使用 &gt; 或 &lt; 的。</span></span><br><span class="line"><span class="comment"> * 但是在日常开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。</span></span><br><span class="line"><span class="comment"> * 如何实现？使用两个接口中的任何一个：Comparable 或 Comparator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 二、Comparable接口与Comparator使用的对比</span></span><br><span class="line"><span class="comment"> *      Comparable接口的方式一旦指定，保证Comparable接口实现类的对象在任何位置都可以比较大小</span></span><br><span class="line"><span class="comment"> *      Comparator接口属于临时性的比较。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-12 17:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test16</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   Comparable接口的使用举例：      自然排序</span></span><br><span class="line"><span class="comment">    *   1.像String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较两个对象大小的规则</span></span><br><span class="line"><span class="comment">    *   2.像String、包装类等重写了compareTo()方法以后，进行了从小到大的排序</span></span><br><span class="line"><span class="comment">    *   3.重写comparaTo(obj) 的规则：</span></span><br><span class="line"><span class="comment">    *       如果当前对象this大于形参对象obj，则返回正整数；</span></span><br><span class="line"><span class="comment">    *       如果当前对象this小于形参对象obj，则返回负数；</span></span><br><span class="line"><span class="comment">    *       如果当前对象this等于形参对象obj，则返回零</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;dd&quot;</span>,<span class="string">&quot;ee&quot;</span>,<span class="string">&quot;CC&quot;</span>&#125;;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        System.out.println(arr.toString());</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//使用另一个包下的Goods类，有price、name两个属性</span></span><br><span class="line">        Goods[] arr = <span class="keyword">new</span> <span class="title class_">Goods</span>[<span class="number">4</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;huawei华为&quot;</span>,<span class="number">50</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;xiaomi小米&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;lianxiang联想&quot;</span>,<span class="number">70</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;shuangfeiyan双飞燕&quot;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Comparator接口的使用：定制排序</span></span><br><span class="line"><span class="comment">    * 1.背景：</span></span><br><span class="line"><span class="comment">    * 当元素的类型没有实现java.long.Comparable接口而又不方便修改代码，</span></span><br><span class="line"><span class="comment">    * 或者实现了java.lang.Comparable接口的排序规则不适合当前操作</span></span><br><span class="line"><span class="comment">    * 那么可以考虑使用 Comparator 的对象来排序</span></span><br><span class="line"><span class="comment">    * 2.重写compare(Object o1, Object o2)方法，比较o1和o2的大小：</span></span><br><span class="line"><span class="comment">    *   如果方法返回正整数，则表示o1大于o2；</span></span><br><span class="line"><span class="comment">    *   如果返回0，表示相等</span></span><br><span class="line"><span class="comment">    *   返回负数，表示o1小于o2</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;dd&quot;</span>,<span class="string">&quot;ee&quot;</span>,<span class="string">&quot;CC&quot;</span>&#125;;</span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> String &amp;&amp; o2 <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> (String) o1;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> (String) o2;</span><br><span class="line">                    <span class="keyword">return</span> -s1.compareTo(s2);<span class="comment">//默认从小到大，加一个负号变从大到小</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                return 0;</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入的类型不一致&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//使用另一个包下的Goods类，有price、name两个属性</span></span><br><span class="line">        Goods[] arr = <span class="keyword">new</span> <span class="title class_">Goods</span>[<span class="number">4</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;h华为&quot;</span>,<span class="number">50</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;x小米&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;l联想&quot;</span>,<span class="number">70</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;s双飞燕&quot;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//指明商品比较大小的方式：按照产品名称从低到高排序，在按照价格从低到高排序</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> Goods &amp;&amp; o2 <span class="keyword">instanceof</span> Goods)&#123;</span><br><span class="line">                    <span class="type">Goods</span> <span class="variable">g1</span> <span class="operator">=</span> (Goods)o1;</span><br><span class="line">                    <span class="type">Goods</span> <span class="variable">g2</span> <span class="operator">=</span> (Goods)o2;</span><br><span class="line">                    <span class="keyword">if</span>(g1.getName().equals(g2.getName()))&#123;</span><br><span class="line">                        <span class="keyword">return</span> -Double.compare(g1.getPrice(), g2.getPrice());</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> g1.getName().compareTo(g2.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;数据类型不匹配&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第九章 常用类</category>
      </categories>
  </entry>
  <entry>
    <title>01 面向对象的特征之一——继承</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/01%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81%E4%B9%8B%E4%B8%80%E2%80%94%E2%80%94%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 面向对象的特征——继承</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 一、继承性的好处</span></span><br><span class="line"><span class="comment"> * 	1）减少了代码的冗余，提高了代码的复用性</span></span><br><span class="line"><span class="comment"> * 	2）便于功能的扩展</span></span><br><span class="line"><span class="comment"> * 	3）为之后多态性的使用提供了前提</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 二、继承的格式：class A extends B&#123;&#125;</span></span><br><span class="line"><span class="comment"> * 		A 子类、派生类、subclass</span></span><br><span class="line"><span class="comment"> * 		B 父类、超类、基类、superclass</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 	1.体现：一旦子类继承了父类以后，子类就获得了父类中声明的结构（属性和方法）</span></span><br><span class="line"><span class="comment"> * 特别地，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获得了父类中私有的结构。</span></span><br><span class="line"><span class="comment"> * 只有因为封装性的影响，使得子类不能直接调用父类的结构</span></span><br><span class="line"><span class="comment"> * 	2.子类继承父类以后，还可以声明自己特有的属性和方法，实现功能的扩展。</span></span><br><span class="line"><span class="comment"> * 子类通常比父类更加丰富，不同于集合与子级的关系</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 三、Java中关于继承的规定</span></span><br><span class="line"><span class="comment"> * 	1.一个类可以被多个子类继承</span></span><br><span class="line"><span class="comment"> * 	2.一个类只能有一个父类</span></span><br><span class="line"><span class="comment"> * 	3.子父类是相对的概念，可以多层继承</span></span><br><span class="line"><span class="comment"> * 	4.子类直接继承的类叫直接父类，间接继承的父类称为间接父类</span></span><br><span class="line"><span class="comment"> * 	5.子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 四、</span></span><br><span class="line"><span class="comment"> * 	1.如果我们没有显式声明一个类的父类的话，则此类继承于java.lang.Object类</span></span><br><span class="line"><span class="comment"> * 	2.所有的java类（除java.lang.Object类之外）都直接或间接继承于java.lang.Object类</span></span><br><span class="line"><span class="comment"> * 	3.意味着，所有的java类具有java.lang.Object类声明的功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test00</span>继承 &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Student</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();demo.study();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承格式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the age</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> age the age to set</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the name</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> name the name to set</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> String name=<span class="string">&quot;dopphu&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Person在吃饭&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		System.out.println(<span class="string">&quot;我无处不在（）&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(getName()+<span class="string">&quot;正在学习&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>02 一个继承的练习</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/02%20%E4%B8%80%E4%B8%AA%E7%BB%A7%E6%89%BF%E7%9A%84%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个继承的练习</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01Extend01</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Kids</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kids</span>(<span class="number">12</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ManKind</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> sex;<span class="comment">//man:1,women:0</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> salary;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ManKind</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> sex</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> salary</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ManKind</span><span class="params">(<span class="type">int</span> sex, <span class="type">int</span> salary)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.sex = sex;</span><br><span class="line">		<span class="built_in">this</span>.salary = salary;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">manOrWoman</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(sex==<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;man&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;woman&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">employeed</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(salary==<span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;no job&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;job&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Kids</span> <span class="keyword">extends</span> <span class="title class_">ManKind</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> yearOld;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Kids</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> yearOld</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Kids</span><span class="params">(<span class="type">int</span> yearOld)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.yearOld = yearOld;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">printAge</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;yearsOld:&quot;</span>+yearOld);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>03 方法的重写（override、overwrite）</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/03%20%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%EF%BC%88override%E3%80%81overwrite%EF%BC%89/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类的方法覆盖父类符方法——方法的重写（override、overwrite）</span></span><br><span class="line"><span class="comment"> * 方法名和形参列表都一致</span></span><br><span class="line"><span class="comment"> * 重写后子类的对象调用时，就执行子类重写的方法</span></span><br><span class="line"><span class="comment"> * 子类重写的方法的权限要求不小于父类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 重写的规定：</span></span><br><span class="line"><span class="comment"> * 		方法的声明：权限修饰符 返回值类型 方法名()&#123;//方法体&#125;</span></span><br><span class="line"><span class="comment"> * 	</span></span><br><span class="line"><span class="comment"> * 		特殊情况：子类不能重写父类中被private修饰的方法，</span></span><br><span class="line"><span class="comment"> * 			因为不可见了嘛，就和自己又定义一个方法一样，这种形式不叫重写而已</span></span><br><span class="line"><span class="comment"> * 		返回值类型：</span></span><br><span class="line"><span class="comment"> * 			父类方法为void，子类也要求为void</span></span><br><span class="line"><span class="comment"> * 			父类被重写的返回值类型为A，则子类重写的方法返回值为A或A的自子类</span></span><br><span class="line"><span class="comment"> * 			（基本数据类型就必须保持一致）</span></span><br><span class="line"><span class="comment"> * 			子类重写的方法抛出的异常类型大小不大于父类被重写的方法抛出的异常（具体的异常处理再讲）</span></span><br><span class="line"><span class="comment"> * --------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * 			子类和父类中同名同参数的方法要么都声明为非static（考虑重写），要么都声明为static的（不考虑重写或者不称为重写）</span></span><br><span class="line"><span class="comment"> * 			static方法不能被覆盖，是随着类的加载而加载的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">StudentOverrideTest</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentOverrideTest</span>();</span><br><span class="line">		<span class="type">PersonOverrideTest</span> <span class="variable">fa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonOverrideTest</span>();</span><br><span class="line">		</span><br><span class="line">		demo.test();</span><br><span class="line">		fa.test();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonOverrideTest</span>&#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	Object <span class="title function_">testR</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2.3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">walooo</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentOverrideTest</span> <span class="keyword">extends</span> <span class="title class_">PersonOverrideTest</span>&#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Students&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	String  <span class="title function_">testR</span><span class="params">()</span> &#123;<span class="comment">//String 是 Object的子类</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">wallooo</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>04 super关键字的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/04%20super%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * super关键字的使用</span></span><br><span class="line"><span class="comment"> * 1.super理解为：父类的</span></span><br><span class="line"><span class="comment"> * 2.super可以用来调用：属性、方法、构造器</span></span><br><span class="line"><span class="comment"> * 3.super的使用</span></span><br><span class="line"><span class="comment"> * 		3.1我们可以在子类的方法或构造器中，通过使用“super.属性”或“super.方法”的方式显式地调用</span></span><br><span class="line"><span class="comment"> * 		父类中声明的属性或方法。但是，通常情况下，我们习惯省略“super”（跟省略this的道理差不多）</span></span><br><span class="line"><span class="comment"> * 		3.2特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类声明的属性，则必须</span></span><br><span class="line"><span class="comment"> * 		显式使用“super.属性”的方式，表名调用的是父类中声明的属性</span></span><br><span class="line"><span class="comment"> * 		3.3同3.2，重写父类的方法后，super可以调用父类被重写的方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.super来调用构造器</span></span><br><span class="line"><span class="comment"> * 		4.1我们可以在子类的构造器中显示的使用“super(形参列表)”的方式，调用父类中声明的构造器</span></span><br><span class="line"><span class="comment"> * 		4.2“super(形参列表)”的使用，必须声明在子类构造器的首行！</span></span><br><span class="line"><span class="comment"> * 		4.3我们在类的构造器中，针对于“this(形参列表)”和“super(形参列表)”只能二选一（因为只有一个首行）</span></span><br><span class="line"><span class="comment"> * 		4.4默认会调用super()</span></span><br><span class="line"><span class="comment"> * 		4.5在类的多个构造器中，至少有一个构造器使用了“super(形参列表)”,调用父类中的构造器</span></span><br><span class="line"><span class="comment"> * 		  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05super</span> <span class="keyword">extends</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">	Test05super()&#123;</span><br><span class="line"><span class="comment">//		super(12);</span></span><br><span class="line">		<span class="comment">//啥也不写，默认就会调用super()</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="built_in">super</span>.study();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//class Test&#123;</span></span><br><span class="line"><span class="comment">//	public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">//		Test05super demo =  new Test05super();</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>05 子类对象实例化的全过程</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/05%20%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类对象实例化的全过程</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.从结果上看：（继承性）</span></span><br><span class="line"><span class="comment"> * 		子类继承父类以后，就获得了父类中声明的属性或方法</span></span><br><span class="line"><span class="comment"> * 		创建子类对象时，在堆空间中，就会加载所有父类声明的属性</span></span><br><span class="line"><span class="comment"> * 2.从过程上看：</span></span><br><span class="line"><span class="comment"> * 		当我们通过子类的构造器创建子类对象时，我们一定会直接或间接调用其父类的构造器。</span></span><br><span class="line"><span class="comment"> * 		直到调用了java.lang.Object类中空参的构造器为止，正因为加载过所有的父类的结构，所以才可以看到内存中有父类中的结构</span></span><br><span class="line"><span class="comment"> * 		子类对象才可以考虑进行调用。</span></span><br><span class="line"><span class="comment"> * 明确：虽然创建子类对象时调用了父类的构造器，但是自始至终只创建过一个对象，即为new的子类对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>06 面向对象特征之多态性</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/06%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E5%BE%81%E4%B9%8B%E5%A4%9A%E6%80%81%E6%80%A7/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 面向对象特征之多态性</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.理解多态性：可以理解为一个事物的多种形态</span></span><br><span class="line"><span class="comment"> * 2.何为多态性</span></span><br><span class="line"><span class="comment"> * 		对象的多态性：父类的引用指向子类的对象（或者子类的对象赋给父类的引用）</span></span><br><span class="line"><span class="comment"> * 3.多态的使用，虚拟方法调用</span></span><br><span class="line"><span class="comment"> * 		有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是</span></span><br><span class="line"><span class="comment"> * 		子类重写父类的方法</span></span><br><span class="line"><span class="comment"> * 总结：编译看右边，运行看右边</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.多态性的使用前提：1）类的继承关系；2）方法的重写</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5.对象的多态性：只适用于方法，不适用与属性，属性的话都看右边</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * instanceof 关键字的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">		</span><br><span class="line">		<span class="type">Man</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">		man.eat();</span><br><span class="line">		man.earnMoney();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//*******************************</span></span><br><span class="line">		System.out.println(<span class="string">&quot;**********&quot;</span>);</span><br><span class="line">		<span class="comment">//对象的多态性:父类的引用指向子类的对象</span></span><br><span class="line">		<span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">		</span><br><span class="line">		p2.eat();<span class="comment">//调用的是子类重写的eat()方法，虽然p2是Person类型，</span></span><br><span class="line">		<span class="comment">//但是实际上赋了Man类型，所以调用的是重写的eat()方法</span></span><br><span class="line"><span class="comment">//		p2.walk();//不能调用，因为p2是Person类的</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;*********************&quot;</span>);</span><br><span class="line"><span class="comment">//		对于p2来说不能调用子类特有的属性和方法</span></span><br><span class="line"><span class="comment">//		p2.isSmoking = true;</span></span><br><span class="line"><span class="comment">//		p2.earnMoney();</span></span><br><span class="line">		<span class="comment">//有了对象的多态性以后，内存中实际是加载了子类特有的属性和方法，但是由于变量声明为父类类型，</span></span><br><span class="line">		<span class="comment">//导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//那么如何才能调用子类特有的属性和方法呢？使用强制类型转换</span></span><br><span class="line">		<span class="type">Man</span> <span class="variable">m1</span> <span class="operator">=</span> (Man)p2;</span><br><span class="line">		m1.earnMoney();</span><br><span class="line">		m1.isSomking  = <span class="literal">true</span>;</span><br><span class="line">		<span class="comment">//下面这么转就不行</span></span><br><span class="line"><span class="comment">//		Woman w1 = (Woman)p2;</span></span><br><span class="line"><span class="comment">//		w1.goShopping();</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//为了正确的转换，引入instanceof关键字的使用</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * instanceof关键字的使用</span></span><br><span class="line"><span class="comment">		 *</span></span><br><span class="line"><span class="comment">		 * a instanceof A ——判断对象a是否是A的实例，如果是返回，true否则返回false</span></span><br><span class="line"><span class="comment">		 *	a是A的子类，则是true</span></span><br><span class="line"><span class="comment">		 * */</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(p2 <span class="keyword">instanceof</span> Woman) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;is womon&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(p2 <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;is Person&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(p2 <span class="keyword">instanceof</span> Object) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;is Object&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//练习</span></span><br><span class="line">		<span class="comment">//问题一：编译通过，运行不通过</span></span><br><span class="line"><span class="comment">//		Person p3 = new Woman();</span></span><br><span class="line"><span class="comment">//		Man m3 = (Man)p3;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//问题二：编译通过，运行也通过</span></span><br><span class="line">		<span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person)obj;</span><br><span class="line">		System.out.println(p2.age);<span class="comment">//0</span></span><br><span class="line">		<span class="comment">//问题三：编译不过，运行也过(编译都不通过，运行就更不可能了)</span></span><br><span class="line"><span class="comment">//		Man m4 = new Woman();</span></span><br><span class="line"><span class="comment">//		Man m5 = new Person();</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> isSomking;</span><br><span class="line">	<span class="type">double</span> age=<span class="number">123</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">earnMoney</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;男人负责赚钱养家&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;男人多吃肉，长肌肉&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;男人霸气的走路&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Woman</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	<span class="type">boolean</span> isBeauty;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goShopping</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;女人喜欢购物&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;女人少吃，为了减肥&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;女人窈窕的走路&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>07 多态性的使用举例</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/07%20%E5%A4%9A%E6%80%81%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多态性的使用举例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Test08</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test08</span>();</span><br><span class="line">		<span class="comment">//有了多态性就省了重载方法了了</span></span><br><span class="line">		test.func(<span class="keyword">new</span> <span class="title class_">Animal</span>());</span><br><span class="line">		test.func(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">		test.func(<span class="keyword">new</span> <span class="title class_">Cat</span>());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">		animal.eat();</span><br><span class="line">		animal.shout();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;动物吃饭&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;动物叫&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">	 <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">		 System.out.println(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">		 System.out.println(<span class="string">&quot;汪汪汪&quot;</span>);</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;猫爱吃鱼&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;喵喵喵&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>08 Object类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/08%20Object%E7%B1%BB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java.lang.Object 类</span></span><br><span class="line"><span class="comment"> * 1.Object类是所有java类的根父类</span></span><br><span class="line"><span class="comment"> * 2.如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类</span></span><br><span class="line"><span class="comment"> * 3.Object类中的功能（方法、属性）就具有通用性</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.Object类只声明了一个空参的构造器</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 方法：equals、toString、getClass、hashCode、clone、finalize、wait、notify、notifyAll</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 面试题：final、finally、finalize的区别</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test09</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">		System.out.println(order.getClass().getSuperclass());</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>&#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>09 Object类中toString()的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/09%20Object%E7%B1%BB%E4%B8%ADtoString()%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Object类中toString()的使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.当我们输出一个对象的引用时，实际上就是调用当前对象的toString()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.Object类中toString()的定义</span></span><br><span class="line"><span class="comment"> * 		 public String toString() &#123;</span></span><br><span class="line"><span class="comment">        	return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	3.像String、Date、File、包装类等都重写了Object类中的toString()方法</span></span><br><span class="line"><span class="comment">	使得在调用对象的toString()时，返回“实体内容”信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4.自定义类也可以重写toString()方法，当调用此方法时，返回实体内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test10toString</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Customer</span> <span class="variable">cust1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="number">12</span>,<span class="string">&quot;Dophu&quot;</span>);</span><br><span class="line">		System.out.println(cust1.toString());</span><br><span class="line">		System.out.println(cust1);</span><br><span class="line">		</span><br><span class="line">		<span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;MM&quot;</span>);</span><br><span class="line">		System.out.println(s1.toString());<span class="comment">//String类对toString()方法重写过</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span>&#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	String name;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//自动快捷生成toString()方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Customer [age=&quot;</span> + age + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>10 包装类的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/10%20%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包装类的使用：(因为JUnit（单元测试不会整）出问题解决不了，所以还是用main进行测试)</span></span><br><span class="line"><span class="comment"> * 1.java提供了8种基本数据类型，使得基本数据类型的变量具有类的特征</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.掌握的：基本数据类型、包装类、String三者之间的转换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test12</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//		System.out.println(num1.toString());//编译报错</span></span><br><span class="line">		<span class="type">Integer</span> <span class="variable">in1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(num1);</span><br><span class="line">		System.out.println(in1.toString());</span><br><span class="line">		</span><br><span class="line">		<span class="type">Integer</span> <span class="variable">in2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">		System.out.println(in2.toString());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//报异常</span></span><br><span class="line"><span class="comment">//		Integer in3 = new Integer(&quot;123asd&quot;);</span></span><br><span class="line"><span class="comment">//		System.out.println(in3.toString());</span></span><br><span class="line">		</span><br><span class="line">		<span class="type">Float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="number">12.3f</span>);</span><br><span class="line">		<span class="type">Float</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="string">&quot;12.3&quot;</span>);</span><br><span class="line">		System.out.println(f1);</span><br><span class="line">		System.out.println(f2);</span><br><span class="line">		</span><br><span class="line">		<span class="type">Boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line">		<span class="type">Boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="type">Boolean</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&quot;trueasd1523&quot;</span>);</span><br><span class="line">		System.out.println(b3);<span class="comment">//false</span></span><br><span class="line">		</span><br><span class="line">		<span class="type">OrderTest</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderTest</span>();</span><br><span class="line">		System.out.println(order.isMale);<span class="comment">//false</span></span><br><span class="line">		System.out.println(order.isFemale);<span class="comment">//null</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//包装类转基本数据类型</span></span><br><span class="line">		<span class="comment">//方法：调用某包装类Xxx的xxxvalue()</span></span><br><span class="line">		<span class="type">Float</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="number">12.3</span>);</span><br><span class="line">		<span class="type">float</span> <span class="variable">f4</span> <span class="operator">=</span> f1.floatValue();</span><br><span class="line">		System.out.println(f2+<span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;******************************&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//JDK 5.0新特性：自动装箱与自动拆箱</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">		<span class="comment">//基本数据类型——&gt;包装类的对象</span></span><br><span class="line">		method(num2);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//自动装箱</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">		<span class="type">Integer</span> <span class="variable">in3</span> <span class="operator">=</span> num3;<span class="comment">//自动装箱</span></span><br><span class="line">		System.out.println(in3);</span><br><span class="line">		<span class="type">boolean</span> <span class="variable">b5</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="type">Boolean</span> <span class="variable">b4</span> <span class="operator">=</span> b5;<span class="comment">//自动装箱</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//自动拆箱：包装类——&gt;基本数据类型</span></span><br><span class="line">		System.out.println(in1.toString());</span><br><span class="line">		</span><br><span class="line">		<span class="type">int</span> <span class="variable">num4</span> <span class="operator">=</span> in1;<span class="comment">//自动拆箱</span></span><br><span class="line">		System.out.println(<span class="string">&quot;**********************&quot;</span>);</span><br><span class="line">		<span class="comment">//基本数据类型——&gt;String类型，调用String重载的valueOf(Xxx xxx)</span></span><br><span class="line"><span class="comment">//		int num1 = 10;</span></span><br><span class="line">		<span class="comment">//方式一：连接运算</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> num1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="comment">//方式二：调用String的valueOf(Xxx xxx)</span></span><br><span class="line">		<span class="comment">//基本数据类型和包装类都可以这么做</span></span><br><span class="line">		<span class="type">float</span> <span class="variable">f5</span> <span class="operator">=</span> <span class="number">12.3f</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> String.valueOf(f5);</span><br><span class="line">		System.out.println(str2);<span class="comment">//&quot;12.3&quot;</span></span><br><span class="line">		</span><br><span class="line">		<span class="type">Double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">124.4</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> String.valueOf(d1);</span><br><span class="line">		System.out.println(str3);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//String类型——&gt;基本数据类型、包装类：调用包装类的parseXxx(String s)</span></span><br><span class="line">		<span class="comment">//不同类的强制类型装换必须有子父类的关系，基本数据类型不能强转为引用数据类型（否则都会编译报错）</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">		<span class="comment">//错误的情况</span></span><br><span class="line"><span class="comment">//		int num5 = (int)str1;//编译报错</span></span><br><span class="line"><span class="comment">//		Integer in4 = (Integer)str1;</span></span><br><span class="line">		<span class="comment">//可能会报NumberFormatException（字符串不是规矩的数字就会报这个错）</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">num6</span> <span class="operator">=</span> Integer.parseInt(str1);</span><br><span class="line">		System.out.println(num4);</span><br><span class="line">		</span><br><span class="line">		<span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="string">&quot;true&quot;</span>;<span class="comment">//不是true的都是false</span></span><br><span class="line">		<span class="type">boolean</span> <span class="variable">b6</span> <span class="operator">=</span> Boolean.parseBoolean(str5);</span><br><span class="line">		System.out.println(b6);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">		System.out.println(obj);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderTest</span>&#123;</span><br><span class="line">	<span class="type">boolean</span> isMale;</span><br><span class="line">	Boolean isFemale;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>Java中的JUnit单元测试</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/Java%E4%B8%AD%E7%9A%84JUnit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java中的JUnit单元测试</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 步骤：</span></span><br><span class="line"><span class="comment"> * 1.选中当前工程，右键选择build path——&gt;add libraries - JUnit 4 - 下一步</span></span><br><span class="line"><span class="comment"> * 2.创建Java类，进行单元测试。</span></span><br><span class="line"><span class="comment"> * 		此时的Java类要求：①此类是public的 ②此类提供公共的无参的构造器</span></span><br><span class="line"><span class="comment"> * 3.此类中声明单元测试的方法</span></span><br><span class="line"><span class="comment"> * 		此时的单元测试的方法：方法的权限是public，没有返回值，没有形参</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.此单元测试方法上需要声明注解：<span class="doctag">@Test</span>，并在单元测试类中导入：import org.junit.Test</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5.声明好单元测试方法以后，就可以在方法体内测试相关的代码</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 6.写完代码以后，左键双击单元测试方法名，右键：run as - JUnit</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 说明：正常——绿条</span></span><br><span class="line"><span class="comment"> * 	   异常——红条</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test11</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEquals</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;MM&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;MM&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		System.out.println(s1.equals(s2));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>体会四种权限修饰符</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/%E4%BD%93%E4%BC%9A%E5%9B%9B%E7%A7%8D%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 体会4种不同的权限修饰符 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">	<span class="type">int</span> orderDefault;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> orderPrivate;</span><br><span class="line">	<span class="keyword">protected</span> <span class="type">int</span> orderProtected;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> orderPublic;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">methodPrivate</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;private&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">methodDefault</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Default&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodPublic</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Public&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">methodProtected</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Protected&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">//		TestDesc demo = new TestDesc();</span></span><br><span class="line"><span class="comment">//		demo.methodDefault();</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//class TestDesc&#123;</span></span><br><span class="line"><span class="comment">//	</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>包装类练习</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包装类练习</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *	</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="literal">true</span> ? <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>) : <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);</span><br><span class="line">		<span class="comment">//三元运算符的两个表达式类型要进行统一，所以本来是1，统一成后边的Double类型1.0</span></span><br><span class="line">		System.out.println(o1);<span class="comment">//1.0</span></span><br><span class="line">		</span><br><span class="line">		<span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">		<span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">		System.out.println(i==j);<span class="comment">//false</span></span><br><span class="line">		</span><br><span class="line">		<span class="type">Integer</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">		<span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">		System.out.println(m == n);<span class="comment">//true</span></span><br><span class="line">		</span><br><span class="line">		<span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">		<span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">		<span class="comment">//语法细节https://www.bilibili.com/video/BV1Kb411W75N?p=309&amp;spm_id_from=pageDriver</span></span><br><span class="line">		<span class="comment">//Integer类中的机制可以理解为一个缓存，已经有了一个数组，里面存了-128 到 127 的int数，当给一个128时，超出了</span></span><br><span class="line">		<span class="comment">//这个数组的范围，所以就会new一个，因此地址不同，然后就false</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//视频解释：</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * Integer内部定义了IntegerCache结构，IntegerCache中定义了Integer[]</span></span><br><span class="line"><span class="comment">		 * 保存了-128~127范围的整数，如果我们使用自动装箱的方式，给Integer赋值的范围在</span></span><br><span class="line"><span class="comment">		 * -128~127范围内时，可以直接使用数组中标中的元素，不用再去new。目的，提高效率</span></span><br><span class="line"><span class="comment">		 * */</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(x == y);<span class="comment">//false</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>0801 多线程的创建方式一：继承于Thread类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0801%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F%E4%B8%80%EF%BC%9A%E7%BB%A7%E6%89%BF%E4%BA%8EThread%E7%B1%BB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多线程的创建，方式一：继承于Thread类</span></span><br><span class="line"><span class="comment"> * 1.创建一个继承于thread类的子类</span></span><br><span class="line"><span class="comment"> * 2.重写Thread类的run()方法——&gt;将此线程执行的操作声明在run()中</span></span><br><span class="line"><span class="comment"> * 3.创建Thread类的子类的对象</span></span><br><span class="line"><span class="comment"> * 4.通过此对象调用start()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例子：遍历100以内的所有偶数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-07 10:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0801</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//3.创建Thread类的子类的对象</span></span><br><span class="line"><span class="comment">//        MyThread myThread = new MyThread();</span></span><br><span class="line"><span class="comment">//        //4.通过此对象调用start():①启动当前线程 ②调用当前线程的run()</span></span><br><span class="line"><span class="comment">//        myThread.start();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//问题一：我们不能通过直接调用run()的方式启动线程</span></span><br><span class="line"><span class="comment">//        myThread.run();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//问题二：再启动一个线程，遍历100以内的偶数，不可以让已经start()的线程去执行，会报java.lang.IllegalThreadStateException</span></span><br><span class="line"><span class="comment">//        myThread.start();//java.lang.IllegalThreadStateException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        MyThread t2 = new MyThread();</span></span><br><span class="line"><span class="comment">//        t2.start();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">m2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line"></span><br><span class="line">        m1.start();</span><br><span class="line">        m2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如下的操作仍然是在main线程中执行</span></span><br><span class="line"><span class="comment">//        for(int i = 0; i&lt;100;i++)&#123;</span></span><br><span class="line"><span class="comment">//            if(i%2==0)&#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(i+&quot;********&quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Thread类的匿名子类的方式</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.重写Thread类的run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.重写Thread类的run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>面试题：== 和 equals() 的区别</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E4%BA%94%E7%AB%A0/%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A==%20%E5%92%8C%20equals()%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 面试题：== 和 equals() 的区别</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 一、回顾 == 的使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ==：运算符</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.可以使用在基本数据类型变量和引用数据变量</span></span><br><span class="line"><span class="comment"> * 2.如果比较的是基本数据类型变量，比较的是两个变量保存的数据是否相等（类型可以不同）</span></span><br><span class="line"><span class="comment"> * 	 如果比较的是引用数据类型变量，比较两个对象的地址值是否相同，即两个引用是否指向同一个</span></span><br><span class="line"><span class="comment"> * 对象实体</span></span><br><span class="line"><span class="comment"> * 补充：== 使用时，变量类型要能统一在一起，否则编译都不通过</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 二、equals()方法的使用</span></span><br><span class="line"><span class="comment"> * 这是一个方法，基本数据类型没法调用，所有就只考虑引用数据类型</span></span><br><span class="line"><span class="comment"> * 1.Object类中equals()方法的定义</span></span><br><span class="line"><span class="comment"> *	 public boolean equals(Object obj) &#123;</span></span><br><span class="line"><span class="comment">        return (this == obj);</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment"> * 2.像String、Date、File，包装类等类都重写了Object类中的equals()方法。重写以后。</span></span><br><span class="line"><span class="comment"> * 比较的不是两个引用的地址是否相同，而是比较两个对象的“实体内容”是否相同</span></span><br><span class="line"><span class="comment"> * 3.通常情况下，我们自定义类如果使用equals()的话，也通常是比较两个对象的“实体内容”是否相同，</span></span><br><span class="line"><span class="comment"> * 那么，我们就需要对Object类中的equals()方法进行重写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEquals</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="number">1</span>==<span class="number">1.</span>);<span class="comment">//true</span></span><br><span class="line">		System.out.println(<span class="number">97</span>==<span class="string">&#x27;a&#x27;</span>);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//		System.out.println(1==true);//编译报错</span></span><br><span class="line">		</span><br><span class="line">		<span class="type">Obj</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Obj</span>();</span><br><span class="line">		<span class="type">Obj</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Obj</span>();</span><br><span class="line">		</span><br><span class="line">		<span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;asd&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;asd&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(a==b);<span class="comment">//false</span></span><br><span class="line">		System.out.println(s1==s2);<span class="comment">//false</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(s1.equals(s2));<span class="comment">//true</span></span><br><span class="line">		System.out.println(a.equals(b));<span class="comment">//false(未重写时)</span></span><br><span class="line">		</span><br><span class="line">		<span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">315464646L</span>);</span><br><span class="line">		<span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">315464646L</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(date1.equals(date2));<span class="comment">//true</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;asd&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;asd&quot;</span>;</span><br><span class="line">		System.out.println(s3==s4);<span class="comment">//true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Obj</span>&#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	String name;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Obj</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Obj</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="comment">//自动生成的equals()方法（开发基本上都是自动生成）</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="type">Obj</span> <span class="variable">other</span> <span class="operator">=</span> (Obj) obj;</span><br><span class="line">		<span class="keyword">if</span> (age != other.age)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (other.name != <span class="literal">null</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	//重写的原则：比较两个对象的实体内容是否相等</span></span><br><span class="line"><span class="comment">//	@Override</span></span><br><span class="line">	<span class="comment">//自己重写的方法</span></span><br><span class="line"><span class="comment">//	public boolean equals(Object obj) &#123;</span></span><br><span class="line"><span class="comment">//		if(this == obj) &#123;</span></span><br><span class="line"><span class="comment">//			return true;</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//		if(obj instanceof Obj) &#123;</span></span><br><span class="line"><span class="comment">//			Obj objTemp = (Obj)obj;</span></span><br><span class="line"><span class="comment">//			//比较两个对象的每个属性是否相同</span></span><br><span class="line"><span class="comment">//			return this.age==objTemp.age &amp;&amp; this.name==objTemp.name;</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//		return false;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第五章 面向对象(中)</category>
      </categories>
  </entry>
  <entry>
    <title>0802 Thread类中的常用方法和线程的优先级</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0802%20Thread%E7%B1%BB%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 测试Thread类中的常用方法：</span></span><br><span class="line"><span class="comment"> * 1.start():启动当前线程；调用当前线程的run()</span></span><br><span class="line"><span class="comment"> * 2.run():通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</span></span><br><span class="line"><span class="comment"> * 3.currentThread():静态方法，返回执行当前代码的线程</span></span><br><span class="line"><span class="comment"> * 4.getName():获取当前线程的名字</span></span><br><span class="line"><span class="comment"> * 5.setName():设置当前线程的名字</span></span><br><span class="line"><span class="comment"> * 6.yield():释放当前CPU的执行权，但是也有可能下一时刻又被分配到执行权</span></span><br><span class="line"><span class="comment"> * 7.join():在线程A中调用线程B的join()，此时线程A就进入阻塞状态，知道线程B完全执行以后，线程A才</span></span><br><span class="line"><span class="comment"> * 结束阻塞状态</span></span><br><span class="line"><span class="comment"> * 8.stop()——已经过时，官方不建议使用：当执行此方法时，前置结束当前线程</span></span><br><span class="line"><span class="comment"> * 9.sleep(long millitime);//静态方法，可以用类名调：让当前线程“睡眠”执行的millitime毫秒，在指定的millitime毫秒时间内，</span></span><br><span class="line"><span class="comment"> * 当前线程是阻塞状态</span></span><br><span class="line"><span class="comment"> * 10.isAlive()：判断当前线程是否存活</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 线程的优先级：</span></span><br><span class="line"><span class="comment"> * 1.</span></span><br><span class="line"><span class="comment"> * MAX_PRIORITY: 10</span></span><br><span class="line"><span class="comment"> * MIN_PRIORITY: 1</span></span><br><span class="line"><span class="comment"> * NORM_PRIORITY: 5 ——&gt;默认优先级</span></span><br><span class="line"><span class="comment"> * 2.如何获取和设置当前线程的优先级</span></span><br><span class="line"><span class="comment"> *  getPriority():获取</span></span><br><span class="line"><span class="comment"> *  setPriority():设置</span></span><br><span class="line"><span class="comment"> * 说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率地被执行，</span></span><br><span class="line"><span class="comment"> * 并不意味着只有当高优先级线程执行完以后，低优先级的线程才执行。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 线程通信：wait()/notify()/notifyAll() : 此三个方法定义在Object类中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-07 17:11</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread02</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    sleep(10);</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;:&quot;</span>+ Thread.currentThread().getPriority()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(i%20==0)&#123;</span></span><br><span class="line"><span class="comment">//                yield();//释放执行权</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread02</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0802</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread02</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread02</span>(<span class="string">&quot;Thread_1&quot;</span>);</span><br><span class="line"><span class="comment">//        m1.setName(&quot;线程一&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置分线程的优先级</span></span><br><span class="line">        m1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"></span><br><span class="line">        m1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给主线程命名</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+Thread.currentThread().getPriority()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">20</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    m1.join();<span class="comment">//在m1执行完后才能继续执行主线程</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m1.isAlive());<span class="comment">//false:m1线程已经结束</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>0803 例子：创建三个窗口卖票(存在线程安全问题，待解决)</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0803%20%E4%BE%8B%E5%AD%90%EF%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%89%E4%B8%AA%E7%AA%97%E5%8F%A3%E5%8D%96%E7%A5%A8(%E5%AD%98%E5%9C%A8%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%EF%BC%8C%E5%BE%85%E8%A7%A3%E5%86%B3)/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例子：创建三个窗口卖票，总票数为100张，使用继承Thread类的方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 存在线程安全问题，待解决。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-07 23:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0803</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window</span> <span class="variable">w1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window</span>();</span><br><span class="line">        <span class="type">Window</span> <span class="variable">w2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window</span>();</span><br><span class="line">        <span class="type">Window</span> <span class="variable">w3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window</span>();</span><br><span class="line"></span><br><span class="line">        w1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        w2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        w3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(getName()+<span class="string">&quot;:卖票，票号为：&quot;</span>+ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>0804 创建多线程的方式二：实现Runnable接口</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0804%20%E5%88%9B%E5%BB%BA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BA%8C%EF%BC%9A%E5%AE%9E%E7%8E%B0Runnable%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建多线程的方式二：实现Runnable接口</span></span><br><span class="line"><span class="comment"> * 1.创建一个实现了Runnable接口的类</span></span><br><span class="line"><span class="comment"> * 2.实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line"><span class="comment"> * 3.创建实现类的对象</span></span><br><span class="line"><span class="comment"> * 4.将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line"><span class="comment"> * 5.通过Thread类的对象调用start()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 比较创建线程的两种方式：继承Thread有局限性（比如Window已经继承了一个类，就没法继承Thread）</span></span><br><span class="line"><span class="comment"> * 实现Runnable的方式体现了数据共享</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 开发中，优先选择实现Runnable接口的方式</span></span><br><span class="line"><span class="comment"> * 原因：</span></span><br><span class="line"><span class="comment"> *      1）实现的方式没有类的单继承性的局限性</span></span><br><span class="line"><span class="comment"> *      2）实现的方式更适合来处理多个线程共享数据的情况</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 联系：Thread类本身也实现了Runnable接口</span></span><br><span class="line"><span class="comment"> * 相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-07 23:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0804</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//3.创建实现类的对象</span></span><br><span class="line">        <span class="type">MThread</span> <span class="variable">mThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MThread</span>();</span><br><span class="line">        <span class="comment">//4.将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mThread);</span><br><span class="line">        <span class="comment">//5.通过Thread类的对象调用start()：①启动线程；②调用当前线程的run()——&gt;调用了Runnable类型的target的run()</span></span><br><span class="line">        t1.setName(<span class="string">&quot;第一个线程&quot;</span>);<span class="comment">//起名要在start()前</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再启动一个线程，遍历100以内的偶数</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mThread);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.创建一个实现了Runnable结口的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.实现类去实现Runnable中的抽象方法：：run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>0805 解决三窗口卖票线程安全问题(实现Runnable接口的方式)</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0805%20%E8%A7%A3%E5%86%B3%E4%B8%89%E7%AA%97%E5%8F%A3%E5%8D%96%E7%A5%A8%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例子：创建三个窗口卖票，总票数为100张，使用实现Runnable接口的方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  存在线程安全问题，待解决</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  1.问题：卖票过程中，出现了重票、错票——&gt;出现了线程的安全问题</span></span><br><span class="line"><span class="comment"> *  2.问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其它线程参与进来，也操作车票。</span></span><br><span class="line"><span class="comment"> *  3.如何解决：当一个线程a在操作ticket的时候，其它线程不能参与进来，直到线程a操作完成ticket时，其它线程才可以</span></span><br><span class="line"><span class="comment"> *  开始操作ticket。这种情况即使线程a出现了阻塞，也不能改变。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  4.在java中，我们通过同步机制，来解决线程安全问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      方式一：同步代码块</span></span><br><span class="line"><span class="comment"> *          synchronize(同步监视器)&#123;</span></span><br><span class="line"><span class="comment"> *              //需要被同步的代码</span></span><br><span class="line"><span class="comment"> *          &#125;</span></span><br><span class="line"><span class="comment"> *          说明：1.操作共享数据的代码，即为需要被同步的代码——&gt;不能包多了，也不能包少了</span></span><br><span class="line"><span class="comment"> *               2.共享数据：多个线程共同操作的变量，如：本问题的ticket</span></span><br><span class="line"><span class="comment"> *               3.同步监视器，俗称：锁。任何一个对象都能充当锁</span></span><br><span class="line"><span class="comment"> *                     要求：多个线程必须要共用同一把锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      方式二：同步方法</span></span><br><span class="line"><span class="comment"> *  5.同步的方式，解决了线程的安全问题。——好处</span></span><br><span class="line"><span class="comment"> *    操作同步代码时，只能有一个线程参与，其它线程等待。相当于是一个单线程的过程，效率低。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-07 23:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0805</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window1</span> <span class="variable">w1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window1</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w1);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="comment">//    Object obj = new Object();</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;<span class="comment">//这this是唯一的，在本例子中指w1  //synchronized (d) &#123;</span></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//                    try &#123;</span></span><br><span class="line"><span class="comment">//                        Thread.sleep(100);//sleep会抛异常，所以要用try-catch包一下</span></span><br><span class="line"><span class="comment">//                    &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                        e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;卖票了，票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>0806 解决三窗口卖票线程安全问题(继承Thread类的方式)</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0806%20%E8%A7%A3%E5%86%B3%E4%B8%89%E7%AA%97%E5%8F%A3%E5%8D%96%E7%A5%A8%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98(%E7%BB%A7%E6%89%BFThread%E7%B1%BB%E7%9A%84%E6%96%B9%E5%BC%8F)/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例子：创建三个窗口卖票，总票数为100张，使用继承Thread类的方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用同步代码块来解决继承Thread类的方式的线程安全问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 说明：在继承Thread类创建多线程的方式中，慎用this充当同步监视器，</span></span><br><span class="line"><span class="comment"> * 考虑使用当前类充当同步监视器，如：本例子中的Window2.class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-07 23:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0806</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window2</span> <span class="variable">w1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window2</span>();</span><br><span class="line">        <span class="type">Window2</span> <span class="variable">w2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window2</span>();</span><br><span class="line">        <span class="type">Window2</span> <span class="variable">w3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window2</span>();</span><br><span class="line"></span><br><span class="line">        w1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        w2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        w3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//声明一个静态变量来当监视器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//            synchronized(obj)&#123;</span></span><br><span class="line">            <span class="keyword">synchronized</span>(Window2.class)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(getName()+<span class="string">&quot;:卖票，票号为：&quot;</span>+ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>0807 使用同步方法解决实现Runnable接口的线程安全问题</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0807%20%E4%BD%BF%E7%94%A8%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3%E5%AE%9E%E7%8E%B0Runnable%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用同步方法解决实现Runnable接口的线程安全问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-08 22:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0807</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window3</span> <span class="variable">w3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window3</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w3);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w3);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w3);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window3</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            show();</span><br><span class="line">            <span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;<span class="comment">//同步监视器是：this</span></span><br><span class="line">        <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;卖票了,票号为：&quot;</span>+ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>0808 使用同步方法处理继承Thread类的方式中的线程安全问题</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0808%20%E4%BD%BF%E7%94%A8%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%A4%84%E7%90%86%E7%BB%A7%E6%89%BFThread%E7%B1%BB%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用同步方法处理继承Thread类的方式中的线程安全问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 关于同步方法的总结：</span></span><br><span class="line"><span class="comment"> * 1.同步方法仍然涉及同步监视器，只是不需要我们显式的声明</span></span><br><span class="line"><span class="comment"> * 2.非静态的同步方法，同步监视器——this</span></span><br><span class="line"><span class="comment"> *   静态的同步方法，同步监视器——当前类本身（类名.class）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-08 23:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0808</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window4</span> <span class="variable">w1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window4</span>();</span><br><span class="line">        <span class="type">Window4</span> <span class="variable">w2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window4</span>();</span><br><span class="line">        <span class="type">Window4</span> <span class="variable">w3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window4</span>();</span><br><span class="line"></span><br><span class="line">        w1.setName(<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line">        w2.setName(<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line">        w3.setName(<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window4</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            show();</span><br><span class="line">            <span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;<span class="comment">//同步监视器：Window4.class</span></span><br><span class="line">        <span class="comment">//private synchronized void show() 同步监视器：(仍然是this)w1、w2、w3，监视器不唯一， 是错误的</span></span><br><span class="line">        <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;卖票了，票号为：&quot;</span>+ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>0809 使用同步机制将当前单例模式中的懒汉式改写为线程安全的</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0809%20%E4%BD%BF%E7%94%A8%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%E5%B0%86%E5%BD%93%E5%89%8D%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%AD%E7%9A%84%E6%87%92%E6%B1%89%E5%BC%8F%E6%94%B9%E5%86%99%E4%B8%BA%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用同步机制将当前单例模式中的懒汉式改写为线程安全的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-09 16:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0809</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Bank</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Bank</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title function_">getInstance</span><span class="params">()</span>&#123;<span class="comment">//还可以使用同步方法的方式</span></span><br><span class="line">        <span class="comment">//方式一：效率稍差。当已经创建过对象以后，线程还是可能卡在if语句那儿</span></span><br><span class="line"><span class="comment">//        synchronized (Bank.class) &#123;</span></span><br><span class="line"><span class="comment">//            if(instance==null)&#123;</span></span><br><span class="line"><span class="comment">//                instance = new Bank();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            return instance;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：效率更高</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Bank.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>0810 演示线程死锁</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0810%20%E6%BC%94%E7%A4%BA%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 演示线程死锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.死锁的理解：不同的线程分别占用对方需要的同步资源不放，</span></span><br><span class="line"><span class="comment"> * 都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.说明：</span></span><br><span class="line"><span class="comment"> * 1）出现死锁后，不会出现异常，只是所有的线程处于阻塞状态，无法继续</span></span><br><span class="line"><span class="comment"> * 2）我们使用同步时，要避免出现死锁。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 程序正常执行不意味着没死锁，可能还是有死锁的概率，只是这次执行没有发生死锁而已</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-09 16:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0810</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(s1)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    s1.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span>(s2)&#123;</span><br><span class="line">                        s1.append(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                        s2.append(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;<span class="comment">//提供实现Runnable接口的类的对象</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(s2)&#123;</span><br><span class="line"></span><br><span class="line">                    s1.append(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span>(s1)&#123;</span><br><span class="line">                        s1.append(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">                        s2.append(<span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>0811 解决线程安全问题的方式三：Lock锁——JDK5.0新增</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0811%20%E8%A7%A3%E5%86%B3%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B8%89%EF%BC%9ALock%E9%94%81%E2%80%94%E2%80%94JDK5.0%E6%96%B0%E5%A2%9E/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 解决线程安全问题的方式三：Lock锁——JDK5.0新增</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.面试题：synchronize 与 lock的异同？</span></span><br><span class="line"><span class="comment"> *  相同：二者都可以解决线程安全问题</span></span><br><span class="line"><span class="comment"> *  不同：synchronize机制在执行完相应的同步代码以后，自动的释放同步监视器</span></span><br><span class="line"><span class="comment"> *          Lock需要手动的启动同步（Lock()），同时结束同步也需要手动的实现（unlock()）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.优先使用顺序：</span></span><br><span class="line"><span class="comment"> * Lock——&gt;同步代码块（已经进入了方法体，分配了相应资源）——&gt;同步方法（在方法体之外）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 面试题：如何解决线程安全问题？有几种方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-09 20:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0811</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window5</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window5</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window5</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);<span class="comment">//公平意味着先进先出</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    Thread.sleep(1000);</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖票了，票号为:&quot;</span>+ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁的方法：unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>0812 线程通信的例子：使用两个线程打印1-100.线程1、线程2交替打印</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0812%20%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1%E7%9A%84%E4%BE%8B%E5%AD%90%EF%BC%9A%E4%BD%BF%E7%94%A8%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%89%93%E5%8D%B01-100.%E7%BA%BF%E7%A8%8B1%E3%80%81%E7%BA%BF%E7%A8%8B2%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 线程通信的例子：使用两个线程打印1-100.线程1、线程2交替打印</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  （线程通信）涉及到的三个方法：</span></span><br><span class="line"><span class="comment"> *  wait()：一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</span></span><br><span class="line"><span class="comment"> *  notify()：一旦执行此方法，就会唤醒被wait()的一个线程，如果有多个线程被wait，就唤醒优先级高的</span></span><br><span class="line"><span class="comment"> *  notifyAll()：一旦执行此方法，就会唤醒所有被wait()的线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  说明：</span></span><br><span class="line"><span class="comment"> *  1.wait()，notify()，notifyAll()三个方法都必须使用在同步代码块或同步方法中</span></span><br><span class="line"><span class="comment"> *  2.wait()，notify()，notifyAll()三个方法的调用者都必须是同步代码块或同步方法中的同步监视器，</span></span><br><span class="line"><span class="comment"> *  否则会出现异常java.lang.IllegalMonitorStateException</span></span><br><span class="line"><span class="comment"> *  3.wait()，notify()，notifyAll()三个方法都定义在java.lang.Object中（me：因为每个对象都可以当多同步监视器）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 面试题：sleep() 和 wait()的异同？</span></span><br><span class="line"><span class="comment"> * 1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</span></span><br><span class="line"><span class="comment"> * 2.不同点：1）两个方法的声明位置不同：Thread类中声明静态的sleep()，Object类中声明wait()</span></span><br><span class="line"><span class="comment"> *          2）调用要求的不同：sleep()可以在任何需要的场景下使用；wait()必须使用在同步代码块或同步方法中</span></span><br><span class="line"><span class="comment"> *          3）关于是否释放同步监视器：如果两个方法都使用在同步代码或同步方法中，sleep()不释放，wait()释放</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-09 22:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0812</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(number);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                notify();</span><br><span class="line">                <span class="keyword">if</span>(number&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+number);</span><br><span class="line">                    number++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//使得调用如下wait()方法的线程进入阻塞状态</span></span><br><span class="line">                        wait();<span class="comment">//注意！阻塞后释放锁</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>0813 线程通信的应用——生产者消费者问题</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0813%20%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1%E7%9A%84%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程通信的应用</span></span><br><span class="line"><span class="comment"> * 生产者消费者问题：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 生产者（Productor）将产品交给店员（Clerk），而消费者（Customer）从店员处取走</span></span><br><span class="line"><span class="comment"> * 产品，店员一次只能持有固定数量的产品（比如：20个），如果生产者试图生产更多的产品，</span></span><br><span class="line"><span class="comment"> * 店员就会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产</span></span><br><span class="line"><span class="comment"> * 品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这里可能出现两个问题：</span></span><br><span class="line"><span class="comment"> * &gt; 生产者比消费者快时，消费者会漏掉一些数据没有取到</span></span><br><span class="line"><span class="comment"> * &gt; 消费者比生产者快时，消费者会取到相同的数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 分析：</span></span><br><span class="line"><span class="comment"> * 1.是否是多线程问题？是，生产者线程，消费者线程</span></span><br><span class="line"><span class="comment"> * 2.是否有共享数据？是，店员（或产品）</span></span><br><span class="line"><span class="comment"> * 3.如何解决线程的安全问题？同步机制，有三种方法</span></span><br><span class="line"><span class="comment"> * 4.是否涉及到线程的通信？是</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-09 22:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0813</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Clerk</span> <span class="variable">clerk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Clerk</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Producer</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Producer</span>(clerk);</span><br><span class="line">        p1.setName(<span class="string">&quot;生产者1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(clerk);</span><br><span class="line">        c1.setName(<span class="string">&quot;消费者1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(clerk);</span><br><span class="line">        c2.setName(<span class="string">&quot;消费者2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        p1.start();</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clerk</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">productCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">produceProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(productCount &lt; <span class="number">20</span>)&#123;</span><br><span class="line">            productCount++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:开始生产第&quot;</span>+productCount+<span class="string">&quot;个产品&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//只要生产者生产产品就可唤醒消费者</span></span><br><span class="line">            notify();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">consumeProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(productCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:开始消费第&quot;</span>+productCount+<span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">            productCount--;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//只要消费者消费产品就可以唤醒生产者</span></span><br><span class="line">            notify();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Clerk clerk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName()+<span class="string">&quot;:开始生产产品&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            clerk.produceProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;<span class="comment">//消费者</span></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Clerk clerk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName()+<span class="string">&quot;:开始消费产品&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            clerk.consumeProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>0814 创建线程的方式三：实现Callable接口————JDK5.0新增</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0814%20%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B8%89%EF%BC%9A%E5%AE%9E%E7%8E%B0Callable%E6%8E%A5%E5%8F%A3%E2%80%94%E2%80%94%E2%80%94%E2%80%94JDK5.0%E6%96%B0%E5%A2%9E/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 创建线程的方式三：实现Callable接口————JDK5.0新增</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</span></span><br><span class="line"><span class="comment"> * 1.call()可以有返回值的</span></span><br><span class="line"><span class="comment"> * 2.call()可以抛出异常，被外面的操作捕获，获取异常的信息</span></span><br><span class="line"><span class="comment"> * 3.Callable是支持泛型的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-09 23:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0814</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//3.创建Callable接口实现类的对象</span></span><br><span class="line">        <span class="type">NumThread</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumThread</span>();</span><br><span class="line">        <span class="comment">//4.将此Callable接口实现类的对象作为参数传递到FuturaTask构造器中，创建FutureTask的对象</span></span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(n);</span><br><span class="line">        <span class="comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//6.（需要的话）获取Callable中call方法的返回值</span></span><br><span class="line">            <span class="comment">//get()返回值即为FutureTask构造器参数Callable实现类的重写的call()的返回值</span></span><br><span class="line">            System.out.println(<span class="string">&quot;总和为：&quot;</span>+futureTask.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建一个实现Callable的实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.实现 call方法，将此线程需要执行的操作声明在call中</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum+=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>0815 创建线程的方式四：使用线程池</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AB%E7%AB%A0/0815%20%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F%E5%9B%9B%EF%BC%9A%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 创建线程的方式四：使用线程池</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 好处：</span></span><br><span class="line"><span class="comment"> * 1.提高响应速度（减少了创建线程的时间）</span></span><br><span class="line"><span class="comment"> * 2.降低资源消耗（重复使用线程池中的线程，不需要每次都创建）</span></span><br><span class="line"><span class="comment"> * 3.便于线程管理</span></span><br><span class="line"><span class="comment"> *          corePoolSize：核心线程池大小</span></span><br><span class="line"><span class="comment"> *          maximumPoolSize：最大线程数</span></span><br><span class="line"><span class="comment"> *          keepAliveTime：线程没有任务时最多保持多长时间后会终止</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 面试题</span></span><br><span class="line"><span class="comment"> * 创建线程的方式有几种?四种</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-10 0:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0815</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.提供指定线程数量的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//EecutorService是一个接口,它没有那么多属性，所以要找它的实现类</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span>  <span class="variable">service1</span> <span class="operator">=</span> (ThreadPoolExecutor)service;</span><br><span class="line">        <span class="comment">//设置线程的属性</span></span><br><span class="line"><span class="comment">//        service1.setCorePoolSize(15);</span></span><br><span class="line"><span class="comment">//        service1.setKeepAliveTime();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(service.getClass());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.执行指定的线程的操作，需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">NumberThread</span>());<span class="comment">//适合使用于Runnable</span></span><br><span class="line"><span class="comment">//        service.submit();//适合使用于Callable</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">NumberThread1</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberThread1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第八章 多线程</category>
      </categories>
  </entry>
  <entry>
    <title>01 static关键字的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/01%20static%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * static关键字的使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.static：静态的</span></span><br><span class="line"><span class="comment"> * 2.static可以用来修饰：属性、方法、代码块、内部类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.使用static修饰属性:静态变量（或类变量）</span></span><br><span class="line"><span class="comment"> * 		3.1属性按是否用static修饰分为：非静态变量和静态变量（实例变量）</span></span><br><span class="line"><span class="comment"> * 		实例变量：我们创建了类的多个变量，每个对象都独立的拥有一套类中的非静态属性，当修改其中一个对象的</span></span><br><span class="line"><span class="comment"> * 			非静态属性时，不会导致其他对象中同样的属性值的修改</span></span><br><span class="line"><span class="comment"> * 		3.2静态变量：所有类的对象共享同一个静态变量。当通过某一个对象来修改其值时，</span></span><br><span class="line"><span class="comment"> * 			其他对象调用该静态变量的时候，是修改过的</span></span><br><span class="line"><span class="comment"> * 		3.3 static修饰属性的其他说明：</span></span><br><span class="line"><span class="comment"> * 			1）静态变量随着类的加载而加载</span></span><br><span class="line"><span class="comment"> * 			</span></span><br><span class="line"><span class="comment"> * 			2）静态变量的加载要早于对象的创建</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 			3）由于类只会加载一次，则静态变量在内存中也只会存在一份，存在方法区的静态域中</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 			4）		类变量		实例变量</span></span><br><span class="line"><span class="comment"> * 			类		yes			no</span></span><br><span class="line"><span class="comment"> * 			对象		yes			yes</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.使用static修饰方法：静态方法</span></span><br><span class="line"><span class="comment"> * 			me：主要原因是生命周期不同</span></span><br><span class="line"><span class="comment"> * 			1）随着类的加载而加载，可以通过“类.静态方法”的方式进行调用</span></span><br><span class="line"><span class="comment"> * 			2）			静态方法		非静态方法</span></span><br><span class="line"><span class="comment"> * 				类		yes			no</span></span><br><span class="line"><span class="comment"> * 				对象		yes			yes</span></span><br><span class="line"><span class="comment"> * 			3）静态方法中只能调用静态方法或属性</span></span><br><span class="line"><span class="comment"> * 			4）非静态方法中，既可以调用非静态方法或属性，也可以调用静态的方法或属性</span></span><br><span class="line"><span class="comment"> * 5.static注意点</span></span><br><span class="line"><span class="comment"> * 		在静态的方法内，不能用this、super（me：静态属性或方法前省略的不是this，而是类）</span></span><br><span class="line"><span class="comment"> * 		要从生命周期的角度进行理解		</span></span><br><span class="line"><span class="comment"> * 6.如何确定一个属性是否要声明为static的？</span></span><br><span class="line"><span class="comment"> * 		&gt; 属性是可以被多个对象共享的，不会随着对象的不同而不同\</span></span><br><span class="line"><span class="comment"> * 		&gt; final修饰的变量就不再是变量了，而是常量了，常量习惯上也常常声明为static</span></span><br><span class="line"><span class="comment"> * 		</span></span><br><span class="line"><span class="comment"> * 	 如何确定一个方法是否要声明为static的？</span></span><br><span class="line"><span class="comment"> * 		&gt; 操作静态属性的方法通常就设置为静态的</span></span><br><span class="line"><span class="comment"> * 		&gt; 工具类中的方法，习惯上声明为static的。比如：Math、Arrays、Collection</span></span><br><span class="line"><span class="comment"> * 		</span></span><br><span class="line"><span class="comment"> */</span>		</span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		Chinese.nation = <span class="string">&quot;中国&quot;</span>;</span><br><span class="line">	</span><br><span class="line">		System.out.println(Chinese.nation);</span><br><span class="line">		</span><br><span class="line">		<span class="type">Chinese</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line">		c1.nation = <span class="string">&quot;CHN&quot;</span>;</span><br><span class="line">		<span class="type">Chinese</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line">		</span><br><span class="line">		System.out.println(c2.nation);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中国人</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">static</span> String nation;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>02 static关键字的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/02%20static%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * static关键字的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Circle</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">		<span class="type">Circle</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;c1的id：&quot;</span>+c1.getId());</span><br><span class="line">		System.out.println(<span class="string">&quot;c2的id：&quot;</span>+c2.getId());</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;创建的圆的个数：&quot;</span>+Circle.getTotal());</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> id;<span class="comment">//自动赋值</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> radius</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>();</span><br><span class="line">		<span class="built_in">this</span>.radius = radius;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the total</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> total;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span> &#123;</span><br><span class="line">		id = init++;</span><br><span class="line">		total++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> total;<span class="comment">//记录创建圆的个数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">init</span> <span class="operator">=</span> <span class="number">1001</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the radius</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> radius;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> radius the radius to set</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.radius = radius;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the id</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> id the id to set</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>03 单例设计模式</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/03%20%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例设计模式：</span></span><br><span class="line"><span class="comment"> * 		1.所谓单例设计模式，就是采用一定的方法保证在整个软件体系中，对某个类只能存在一个对象实例</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 		2.如何实现</span></span><br><span class="line"><span class="comment"> * 			懒汉式 VS　饿汉式</span></span><br><span class="line"><span class="comment"> * 		3.区分懒汉式和饿汉式</span></span><br><span class="line"><span class="comment"> * 			饿汉式：</span></span><br><span class="line"><span class="comment"> * 				缺点：对象加载时间过长</span></span><br><span class="line"><span class="comment"> * 				优点：懒汉式是线程安全的</span></span><br><span class="line"><span class="comment"> * 			懒汉式：</span></span><br><span class="line"><span class="comment"> * 				优点：延迟对象的创建（不用的时候不占内存）</span></span><br><span class="line"><span class="comment"> * 				目前的写法缺点：线程不安全——&gt;到线程内容时，再修改让它变成安全的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">Order</span> <span class="variable">o1</span> <span class="operator">=</span> Order.getInstance();</span><br><span class="line">		<span class="type">Order</span> <span class="variable">o2</span> <span class="operator">=</span> Order.getInstance();</span><br><span class="line">		System.out.println(o1==o2);</span><br><span class="line">		</span><br><span class="line">		<span class="type">Bank</span> <span class="variable">b1</span> <span class="operator">=</span> Bank.getInstance();</span><br><span class="line">		<span class="type">Bank</span> <span class="variable">b2</span> <span class="operator">=</span> Bank.getInstance();</span><br><span class="line">		System.out.println(b1==b2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//1.私有化类的构造器</span></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Bank</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//2.内部创建类的对象</span></span><br><span class="line">	<span class="comment">//4.要求此对象也必须声明为静态的</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Bank</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.提供公共的方法，返回类的对象</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式（巧记：比较懒，用的时候再造）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>&#123;</span><br><span class="line"><span class="comment">//	1.私有化类的构造器</span></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Order</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//2.声明当前类对象，没有初始化</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Order</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.声明public、static的返回当前类对象的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(instance==<span class="literal">null</span>) &#123;</span><br><span class="line">			instance = <span class="keyword">new</span> <span class="title class_">Order</span>();	</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>04 main()方法的使用说明</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/04%20main()%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * main()方法的使用说明</span></span><br><span class="line"><span class="comment"> * 1.main()方法作为程序的入口</span></span><br><span class="line"><span class="comment"> * 2.main()方法也是一个普通的静态方法</span></span><br><span class="line"><span class="comment"> * 3.main()方法也可以作为我们与控制台交互的方式。（之前使用Scanner）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04mainInfo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;<span class="comment">//</span></span><br><span class="line">		System.out.println(<span class="string">&quot;public类的main方法&quot;</span>);</span><br><span class="line">		Main.main(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">100</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Main 的main方法&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>05 类的成员之：代码块</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/05%20%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E4%B9%8B%EF%BC%9A%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类的成员之：代码块</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.代码块的作用：初始化类、对象</span></span><br><span class="line"><span class="comment"> * 2.代码块如果有修饰的话，只能用static声明</span></span><br><span class="line"><span class="comment"> * 3.分类：静态代码块VS非静态代码块</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 静态代码块：</span></span><br><span class="line"><span class="comment"> * 		&gt; 内部可以有输出语句</span></span><br><span class="line"><span class="comment"> * 		&gt; 随着类的加载而执行(只执行一次)</span></span><br><span class="line"><span class="comment"> * 		&gt; 作用：初始化类的静态属性</span></span><br><span class="line"><span class="comment"> * 		&gt;只能调用静态结构</span></span><br><span class="line"><span class="comment"> * 非静态代码块：</span></span><br><span class="line"><span class="comment"> * 		&gt; 内部可以有输出语句</span></span><br><span class="line"><span class="comment"> * 		&gt; 随着对象的创建而执行</span></span><br><span class="line"><span class="comment"> * 		&gt; 每造一个对象就会执行一次	 </span></span><br><span class="line"><span class="comment"> * 		&gt; 作用：可以在创建对象时，对对象的属性进行赋值</span></span><br><span class="line"><span class="comment"> * 		&gt;可以调用非静态结构和静态结构</span></span><br><span class="line"><span class="comment"> * 静态代码块的执行先于非静态代码块，如果一个类中定义了多个静态代码块（一般不写多个），则按声明的先后顺序执行，非静态也是如此</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 对属性可以进行赋值的位置：</span></span><br><span class="line"><span class="comment"> * 1）默认初始化</span></span><br><span class="line"><span class="comment"> * 2）显示初始化</span></span><br><span class="line"><span class="comment"> * 3）构造器中初始化</span></span><br><span class="line"><span class="comment"> * 4）有了对象以后，使用“对象.属性”或“对象.方法”的方式来进行赋值</span></span><br><span class="line"><span class="comment"> * 5）代码块中赋值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 	代码块的执行先于构造器</span></span><br><span class="line"><span class="comment"> * 执行先后顺序：1 - 2/5（2和5谁先写谁先执行） - 3 - 4</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> Person.desc;</span><br><span class="line">		System.out.println(<span class="string">&quot;*********分割*********&quot;</span>);</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">		System.out.println(p1.age);</span><br><span class="line">		System.out.println(Person.desc);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> <span class="string">&quot;我是一个人&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Person [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, desc=&quot;</span> + desc + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//非静态代码块</span></span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;你好我是代码块儿&quot;</span>);</span><br><span class="line">		age = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//静态代码块</span></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		desc = <span class="string">&quot;我是静态在静态&quot;</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;我是静态代码块儿010&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		desc = <span class="string">&quot;我是静态在静态&quot;</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;我是静态代码块儿02&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>06 final关键字</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/06%20final%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * final：最终的</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.final可以用来修饰的结构：类、方法、变量</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.final用来修饰一个类：表明此类不能被继承</span></span><br><span class="line"><span class="comment"> * 			比如：String类、System类、StringBuffer类</span></span><br><span class="line"><span class="comment"> * 3.final用来修饰方法：表明此方法不可以被重写</span></span><br><span class="line"><span class="comment"> * 			比如：Object中的getClass()</span></span><br><span class="line"><span class="comment"> * 4.final用来修饰变量：此时变量不可被修改（只能被赋值一次）</span></span><br><span class="line"><span class="comment"> * 		4.1 final修饰属性：可以考虑赋值的位置有：显示初始化、代码块中赋值、构造器中初始化</span></span><br><span class="line"><span class="comment"> * 		4.2 final修饰局部变量</span></span><br><span class="line"><span class="comment"> * 				尤其是使用final修饰形参时，表名形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，</span></span><br><span class="line"><span class="comment"> * 			就只能在方法体重使用此形参，但不能进行重新赋值</span></span><br><span class="line"><span class="comment"> * static final 用来修饰：属性、方法</span></span><br><span class="line"><span class="comment"> * 		&gt; 修饰属性：全局常量</span></span><br><span class="line"><span class="comment"> * 		&gt; 方法：（final）不能被重写，（static）随着类加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06final</span> &#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="type">int</span> num;<span class="comment">//此时是一个常量</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> num)</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	&#123;num=<span class="number">1</span>;&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="type">int</span> num;</span><br><span class="line">		num = <span class="number">10</span>;</span><br><span class="line">		System.out.println(num);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//final class A&#123;</span></span><br><span class="line"><span class="comment">//	</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//class B extends String&#123;</span></span><br><span class="line"><span class="comment">//	</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//class AA&#123;</span></span><br><span class="line"><span class="comment">//	final void demo() &#123;</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//class BB extends AA&#123;</span></span><br><span class="line"><span class="comment">//	void demo() &#123;</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>07 抽象类与抽象方法</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/07%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随着继承层次中一个个新子类的定义，类变得越来越具体，而父类更一般更通用。</span></span><br><span class="line"><span class="comment"> * 类的设计应该保证父类和子类能够共享特征。有时候将一个父类设计得非常抽象，以至于他没有</span></span><br><span class="line"><span class="comment"> * 具体的实例，这样的类叫做抽象类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 抽象类与抽象方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * abstract关键字的使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * abstract可以用来修饰的结构：类、方法</span></span><br><span class="line"><span class="comment"> * 		修饰类</span></span><br><span class="line"><span class="comment"> * 			&gt; 此类不能实例化</span></span><br><span class="line"><span class="comment"> * 			&gt; 抽象类中一定有构造器，便于子类实例化时调用（涉及子类对象实例化的全过程）</span></span><br><span class="line"><span class="comment"> * 			&gt; 开发中，会提供抽象类的子类，让子类对象实例化，完成相关操作</span></span><br><span class="line"><span class="comment"> * 		修饰方法</span></span><br><span class="line"><span class="comment"> * 			&gt;　抽象方法只有声明，没有方法体</span></span><br><span class="line"><span class="comment"> * 			&gt; 包含抽象方法的类，一定是一个抽象类；反之不成立</span></span><br><span class="line"><span class="comment"> * 			&gt; 若子类重写了父类中的所有抽象方法后，此类方可实例化</span></span><br><span class="line"><span class="comment"> * 			  若没有重写所有父类所有的抽象方法，则此类要为抽象类（需要用abstract修饰），方可实例化</span></span><br><span class="line"><span class="comment"> * 				（父类的抽象方法也包括间接父类的抽象方法）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * abstract使用的注意点：</span></span><br><span class="line"><span class="comment"> * 		1. abstract不能用来修饰属性构造器等结构。</span></span><br><span class="line"><span class="comment"> * 		2. abstract不能用来修饰私有方法、静态方法、final的方法、final的类。</span></span><br><span class="line"><span class="comment"> *      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//		PersonTest07 p1 = new PersonTest07();</span></span><br><span class="line"><span class="comment">//		p1.eat();</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">PersonTest07</span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">PersonTest07</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">PersonTest07</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;人吃饭&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">PersonTest07</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>08 抽象类的匿名子类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/08%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BF%E5%90%8D%E5%AD%90%E7%B1%BB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象类的匿名子类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		method(<span class="keyword">new</span> <span class="title class_">Student</span>());<span class="comment">//匿名对象</span></span><br><span class="line">		</span><br><span class="line">		<span class="type">Worker</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line">		method(w);<span class="comment">//非匿名类的非匿名对象</span></span><br><span class="line">		</span><br><span class="line">		method(<span class="keyword">new</span> <span class="title class_">Worker</span>());<span class="comment">//非匿名类的匿名对象</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//创建了一个匿名子类的对象</span></span><br><span class="line">		<span class="type">PersonTest07</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonTest07</span>() &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">				System.out.println(<span class="string">&quot;匿名子类&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		</span><br><span class="line">		p.walk();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//创建匿名子类的匿名对象</span></span><br><span class="line">		method(<span class="keyword">new</span> <span class="title class_">PersonTest07</span>() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">				System.out.println(<span class="string">&quot;匿名子类的匿名方法&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; );</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>09 抽象类的应用：模板方法的设计模式</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/09%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%9A%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象类的应用：模板方法的设计模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test09</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	    <span class="type">SubTemplate</span> <span class="variable">sp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubTemplate</span>();</span><br><span class="line">	    sp.spendTime();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Template</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spendTime</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//计算代码花费的时间</span></span><br><span class="line">		<span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">		code();</span><br><span class="line">		<span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">		System.out.println(end-start);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubTemplate</span> <span class="keyword">extends</span> <span class="title class_">Template</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;Math.sqrt(i);j++) &#123;</span><br><span class="line">				System.out.println(i+<span class="string">&quot;:&quot;</span>+j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>11 接口的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/11%20%E6%8E%A5%E5%8F%A3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口的使用,，满足多态性</span></span><br><span class="line"><span class="comment"> * 接口，实际上是定义了一种规范</span></span><br><span class="line"><span class="comment"> * 在开发中体会面向接口编程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test11</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Computer</span> <span class="variable">com</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1.创建了接口的非匿名实现类的非匿名对象</span></span><br><span class="line">		<span class="type">Flash</span> <span class="variable">flash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Flash</span>();</span><br><span class="line">		com.transferData(flash);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.创建了接口的非匿名实现类的匿名对象</span></span><br><span class="line">		com.transferData(<span class="keyword">new</span> <span class="title class_">Printer</span>());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//3.创建了接口的匿名实现类的非匿名对象</span></span><br><span class="line">		<span class="type">USB</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">USB</span>() &#123;</span><br><span class="line">		</span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;手机开始工作&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;手机停止工作&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//4.创建匿名实现类的匿名对象</span></span><br><span class="line">		com.transferData(<span class="keyword">new</span> <span class="title class_">USB</span>() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">				System.out.println(<span class="string">&quot;mp3开始工作&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">				System.out.println(<span class="string">&quot;mp3停止工作&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferData</span><span class="params">(USB usb)</span> &#123;</span><br><span class="line">		usb.start();</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;具体的工作&quot;</span>);</span><br><span class="line">		usb.stop();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">USB</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//常量：定义了长、宽、高最大最小的传输速度</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Flash</span> <span class="keyword">implements</span> <span class="title class_">USB</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;U盘开始工作&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;U盘结束工作&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Printer</span> <span class="keyword">implements</span> <span class="title class_">USB</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;打印机开始工作&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;打印机结束工作&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>10 接口interface</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/10%20%E6%8E%A5%E5%8F%A3interface/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口interface</span></span><br><span class="line"><span class="comment"> * 1.接口的使用interface来定义</span></span><br><span class="line"><span class="comment"> * 2.Java中，接口和类是并列的两个结构</span></span><br><span class="line"><span class="comment"> * 3.如何定义接口：定义接口中的成员</span></span><br><span class="line"><span class="comment"> * 		3.1 JDK7及以前：只能定义全局常量和抽象方法</span></span><br><span class="line"><span class="comment"> * 			&gt; 全局常量：public static final的，但是书写时可以省略不写</span></span><br><span class="line"><span class="comment"> * 			&gt; 抽象方法：public abstract</span></span><br><span class="line"><span class="comment"> * 		3.2 JDK8 除了定义全局常量和抽象方法之外，可以定义静态方法、默认方法（略）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.接口中不能定义构造器，意味着接口不可以实例化</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5. Java开发中，接口通过让类去实现(implements)的方式来使用</span></span><br><span class="line"><span class="comment"> * 	如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化</span></span><br><span class="line"><span class="comment"> * 	如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 6.Java类可以实现多个接口——&gt;弥补了Java单继承的局限性</span></span><br><span class="line"><span class="comment"> * 		格式：class AA extends BB implements CC,DD,EE</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 7. 接口与接口之间可以继承且可以多继承</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 8. 接口的具体使用，体现多态性</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 9.接口，实际上可以看做是一种规范</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 面试题：抽象类和接口有哪些异同</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test10</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Plane</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Plane</span>();</span><br><span class="line">		p.stop();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//全局变量</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_SPEED</span> <span class="operator">=</span> <span class="number">7000</span>;<span class="comment">//第一宇宙速度</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">MIN_SPEED</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//省略了public static final</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//抽象的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;<span class="comment">//省略了public abstract</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Plane</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Plane can fly&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Plane can stop&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AA</span>&#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">BB</span>&#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CC</span> <span class="keyword">extends</span> <span class="title class_">AA</span>,BB&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>12 接口的应用：代理模式</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/12%20%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%9A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口的应用：代理模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test12</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line">		<span class="type">ProxyServer</span> <span class="variable">proxyServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyServer</span>(server);</span><br><span class="line">		</span><br><span class="line">		proxyServer.browse();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NetWork</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span> <span class="keyword">implements</span> <span class="title class_">NetWork</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">&quot;真是的服务器网络&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyServer</span> <span class="keyword">implements</span> <span class="title class_">NetWork</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> NetWork work;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> work</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ProxyServer</span><span class="params">(NetWork work)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.work = work;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;联网前的准备工作&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		check();</span><br><span class="line">		work.browse();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>13 JDK8接口</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/13%20JDK8%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**（接口）</span></span><br><span class="line"><span class="comment"> * JDK8（以后） 除了定义全局常量和抽象方法之外，可以定义静态方法、默认方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test13</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">SubClass</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubClass</span>();</span><br><span class="line">		</span><br><span class="line"><span class="comment">//		s.method1();//调不了</span></span><br><span class="line">		<span class="comment">//接口中定义的静态方法，只能通过接口来调用</span></span><br><span class="line">		CompareA.method1();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//通过实现类的对象，可以调用接口的默认方法</span></span><br><span class="line">		<span class="comment">//如果实现类重写了接口中的默认方法，则调用重写后的方法</span></span><br><span class="line">		s.method2();</span><br><span class="line">		s.method3();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//知识点：类优先原则</span></span><br><span class="line">		<span class="comment">//如果子类（或实现类）继承的父类和实现的接口中声明了同名同参数的默认方法，</span></span><br><span class="line">		<span class="comment">//那么子类在没有重写此方法的情况下，默认调用的是父类中同名同参数的默认方法</span></span><br><span class="line">		</span><br><span class="line">		s.method3();</span><br><span class="line">		<span class="comment">//那么要是多实现呢？实现的多个接口中有同名同参数的默认方法，则会报错：接口冲突</span></span><br><span class="line">		<span class="comment">//冲突了你还想用，那就必须重写了</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CompareA</span>&#123;</span><br><span class="line">	<span class="comment">//静态方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;CompareAMethod&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//默认方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;CompareA：上海&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;CompareMethod3&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span> <span class="keyword">implements</span> <span class="title class_">CompareA</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;method2重写&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;接口实现重写的method&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">		method3();<span class="comment">//重写的方法</span></span><br><span class="line">		<span class="built_in">super</span>.method3();<span class="comment">//调用父类中的方法</span></span><br><span class="line">		<span class="comment">//知识点：如何实现调用接口中的默认方法</span></span><br><span class="line">		CompareA.<span class="built_in">super</span>.method3();<span class="comment">//调用接口中的默认方法</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperClass</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;SuperClass的method3&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>main()方法也可以作为我们与控制台交互的方式。（之前使用Scanner）</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/main()%E6%96%B9%E6%B3%95%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%9C%E4%B8%BA%E6%88%91%E4%BB%AC%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BA%A4%E4%BA%92%E7%9A%84%E6%96%B9%E5%BC%8F%E3%80%82%EF%BC%88%E4%B9%8B%E5%89%8D%E4%BD%BF%E7%94%A8Scanner%EF%BC%89/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * main()方法也可以作为我们与控制台交互的方式。（之前使用Scanner）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;args.length;i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;*****&quot;</span>+args[i]);</span><br><span class="line">			</span><br><span class="line">			<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(args[i]);</span><br><span class="line">			System.out.println(<span class="string">&quot;######&quot;</span>+num);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>14 内部类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/14%20%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内部类</span></span><br><span class="line"><span class="comment"> * 1.Java中允许将一个类A声明在另一个类B中，则类A就是内部类，B成为外部类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.内部类的分类：成员内部类 VS 局部内部类（方法内、代码块内、构造器内）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.成员内部类：</span></span><br><span class="line"><span class="comment"> * 		一方面：作为成员内部类</span></span><br><span class="line"><span class="comment"> * 			&gt; 调用外部类的结构：外部类名.this.方法或属性</span></span><br><span class="line"><span class="comment"> * 			&gt; 可以被static修饰</span></span><br><span class="line"><span class="comment"> * 			&gt; 可以被四种权限修饰符修饰</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 		另一方面：作为一个类</span></span><br><span class="line"><span class="comment"> * 			&gt; 类可以定义属性、方法、构造器等</span></span><br><span class="line"><span class="comment"> * 			&gt; 可以被final修饰，此类不能被继承；不使用final就可以被继承</span></span><br><span class="line"><span class="comment"> * 			&gt; 可以被abstract修饰，表示类不能被实例化</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.关注如下的3个问题</span></span><br><span class="line"><span class="comment"> * 		4.1 如何实例化成员内部类的对象</span></span><br><span class="line"><span class="comment"> * 		4.2 如何在成员内部类区分调用外部类的结构</span></span><br><span class="line"><span class="comment"> * 				不重名的话好说</span></span><br><span class="line"><span class="comment"> * 				重名：</span></span><br><span class="line"><span class="comment"> * 		4.3	开发中局部内部类的使用(见Test15)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test14</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//创建静态的成员内部类</span></span><br><span class="line">		PersonTest14.<span class="type">Leg</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonTest14</span>.Leg();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//创建Bird实例（非静态的成员内部类）</span></span><br><span class="line">		<span class="type">PersonTest14</span> <span class="variable">p14</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonTest14</span>();</span><br><span class="line">		PersonTest14.<span class="type">Brain</span> <span class="variable">b</span> <span class="operator">=</span> p14.<span class="keyword">new</span> <span class="title class_">Brain</span>();</span><br><span class="line">		b.print(<span class="number">123</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonTest14</span>&#123;</span><br><span class="line">	<span class="type">int</span> id=<span class="number">1</span>;</span><br><span class="line">	<span class="comment">//非静态成员内部类</span></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">Brain</span>&#123;</span><br><span class="line">		<span class="type">int</span> id=<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">			System.out.println(id);<span class="comment">//方法的形参</span></span><br><span class="line">			System.out.println(<span class="built_in">this</span>.id);<span class="comment">//内部类的属性</span></span><br><span class="line">			System.out.println(PersonTest14.<span class="built_in">this</span>.id);<span class="comment">//外部类的属性</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//静态成员内部类</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Leg</span>&#123; </span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//局部内部类</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">AA</span>&#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//局部内部类</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">BB</span>&#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">PersonTest14</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//局部内部类</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">CC</span>&#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>局部内部类使用的一个注意点</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%B8%AA%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 局部内部类使用的一个注意点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在局部内部类的方法中（比如：show） 如果调用局部内部类所声明的方法（比如：method）中的局部变量（比如num）</span></span><br><span class="line"><span class="comment">	 * 此局部变量要求声明为final</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * JDK7及之前的版本要求显示声明final</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * JDK8及之后，可以省略final的声明（但实际上还是final）</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">AA</span>&#123;</span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//				num=20;//Local variable num defined in an enclosing scope must be final or effectively final</span></span><br><span class="line">				System.out.println(num);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>面试题（关于接口）</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%85%AD%E7%AB%A0/%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%85%B3%E4%BA%8E%E6%8E%A5%E5%8F%A3%EF%BC%89/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 面试题（关于接口）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter06Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span>笔试题 &#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">A</span>  &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pX</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//		System.out.println(x);//ambiguous</span></span><br><span class="line">		System.out.println(A.x);</span><br><span class="line">		System.out.println(<span class="built_in">super</span>.x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第六章 面向对象(下)</category>
      </categories>
  </entry>
  <entry>
    <title>1101 集合概述和集合知识框架</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/1101%20%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0%E5%92%8C%E9%9B%86%E5%90%88%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 一、集合概述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.集合、数组都是对多个数据进行存储操作的结构，简称Java容器</span></span><br><span class="line"><span class="comment"> *  说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt, .jpg, .avi, 数据库中）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.1 数组在存储多个数据方面的特点：</span></span><br><span class="line"><span class="comment"> *      &gt; 一旦初始化以后，长度就确定了</span></span><br><span class="line"><span class="comment"> *      &gt; 数组一旦定义好，其元素类型也就确定了。我们也就只能操作指定类型的数据了。</span></span><br><span class="line"><span class="comment"> *              比如：String[]、int[]</span></span><br><span class="line"><span class="comment"> * 2.2 数组在存储多个数据方面的缺点：</span></span><br><span class="line"><span class="comment"> *      &gt; 一旦初始化以后，其长度就不可修改</span></span><br><span class="line"><span class="comment"> *      &gt; 数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便</span></span><br><span class="line"><span class="comment"> *      &gt; 获取数组中实际元素个数，数组没有现成的属性和方法</span></span><br><span class="line"><span class="comment"> *      &gt; 数组存储数据的特点：有序、可重复。对于无序、不可重复等需求，数组无法满足。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 二、集合框架</span></span><br><span class="line"><span class="comment"> *      |--- Collection接口：单列集合，用来存储一个一个数据</span></span><br><span class="line"><span class="comment"> *              |---List接口：存储有序的、可重复的数据。——&gt;“动态”数据</span></span><br><span class="line"><span class="comment"> *                  |--- ArrayList、LinkedList、Vector</span></span><br><span class="line"><span class="comment"> *              |---Set接口：存储无序的、不可重复的数据 ——&gt;无序确定互异</span></span><br><span class="line"><span class="comment"> *                  |--- HashSet、LinkedHashSet、TreeSet</span></span><br><span class="line"><span class="comment"> *      |---Map接口：双列集合，用来存储一对（key·value）一对的数据</span></span><br><span class="line"><span class="comment"> *              说明：一个key对应一个value（像函数一样一一对应）</span></span><br><span class="line"><span class="comment"> *              |---HashMap、LinkedHashMap、TreeMap、Hashtable、Properties</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 三、Collection接口中的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-14 10:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1101</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//add(Object e)：将元素e添加到集合中</span></span><br><span class="line">        coll.add(<span class="number">456</span>);<span class="comment">//自动装箱</span></span><br><span class="line">        coll.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//size()：获取数组元素个数</span></span><br><span class="line">        System.out.println(coll.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//addAll(Collection coll1):将Coll1集合中的元素添加到当前的集合中</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll1.add(<span class="string">&quot;asd&quot;</span>);</span><br><span class="line">        coll1.add(<span class="number">111</span>);</span><br><span class="line">        coll.addAll(coll1);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">        System.out.println(coll1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear()：清空，不会变成空指针，就是size变成0</span></span><br><span class="line">        coll1.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//isEmpty()：判断当前集合是否为空</span></span><br><span class="line">        System.out.println(coll1.isEmpty());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十一章 集合</category>
      </categories>
  </entry>
  <entry>
    <title>1103 集合元素的遍历操作</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/1103%20%E9%9B%86%E5%90%88%E5%85%83%E7%B4%A0%E7%9A%84%E9%81%8D%E5%8E%86%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 集合元素的遍历操作，使用迭代器Iterator接口（Map的遍历不通过这个迭代器）</span></span><br><span class="line"><span class="comment"> * 1.内部的方法：hasNext() 和 next()</span></span><br><span class="line"><span class="comment"> * 2.每当我们调用iterator()都会返回一个新的迭代器，</span></span><br><span class="line"><span class="comment"> * 默认游标都会在集合的第一个元素之前。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.内部定义了remove()，可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()</span></span><br><span class="line"><span class="comment"> *      —— 就是此处调用的remove方法不是集合中的remove方法</span></span><br><span class="line"><span class="comment"> *  注意：如果还未调用next()或在上一次调用next方法之后已经调用了remove方法，</span></span><br><span class="line"><span class="comment"> *  在调用remove都会报java.lang.IllegalStateException</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-14 21:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1103</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> coll.iterator();</span><br><span class="line">        <span class="comment">//方式一（不推荐）</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        //报异常java.util.NoSuchElementException</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line">        <span class="comment">//方式二（不推荐）</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i&lt;coll.size(); i++)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三（推荐）</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> coll.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式一：会跳着输出，也避免不了报错</span></span><br><span class="line"><span class="comment">//        Iterator iterator = coll.iterator();</span></span><br><span class="line"><span class="comment">//        while(iterator.next() != null)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式二：</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 每当我们调用iterator()都会返回一个新的迭代器</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"><span class="comment">//        while (coll.iterator().hasNext())&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(coll.iterator().next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试Iterator中的remove()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> coll.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除集合中的“Tom”</span></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;Tom&quot;</span>.equals(obj))&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator1.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十一章 集合</category>
      </categories>
  </entry>
  <entry>
    <title>1102 Collection接口中声明的方法测试</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/1102%20Collection%E6%8E%A5%E5%8F%A3%E4%B8%AD%E5%A3%B0%E6%98%8E%E7%9A%84%E6%96%B9%E6%B3%95%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Collection接口中声明的方法测试</span></span><br><span class="line"><span class="comment"> *  结论：（很重要！很重要！很重要！）</span></span><br><span class="line"><span class="comment"> *      向Collection接口的实现类的对象添加数据obj时，要求obj所在类要重写equals() ！！！</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-14 16:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1102</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line">        coll.add(p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.contains(Object obj)：判断当前集合中是否包含obj</span></span><br><span class="line">        <span class="comment">//我们在判断时，会调用obj对象所在类的equals()方法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> coll.contains(<span class="number">123</span>);</span><br><span class="line">        System.out.println(contains);</span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>)));</span><br><span class="line">        System.out.println(coll.contains(p));</span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">12</span>)));</span><br><span class="line">        <span class="comment">//上面的说明：这个contains方法是调用的equals方法，但是由于我们在Person类中没有重写equals方法，故</span></span><br><span class="line">        <span class="comment">//仍然调用Object中的equals方法（即用==判断），故不重写equals方法的话结果就为false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.containsAll(Collection coll1)：判断形参coll1中所有元素是都都存在于当前集合中</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll1</span> <span class="operator">=</span> Arrays.asList(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll2</span> <span class="operator">=</span> Arrays.asList(<span class="number">1203</span>,<span class="number">456</span>);</span><br><span class="line">        System.out.println(coll.containsAll(coll1));</span><br><span class="line">        System.out.println(coll.containsAll(coll2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//3.remove(Object obj)</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line">        coll.add(p);</span><br><span class="line"></span><br><span class="line">        coll.remove(<span class="number">1223233</span>);</span><br><span class="line">        coll.remove(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">12</span>));<span class="comment">//也会调用equals，故也需要重写equals方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.removeAll(Collection coll1)：从当前集合移除coll1中所有的元素（两个集合可以有不同的元素，移除交集部分）</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll1</span> <span class="operator">=</span> Arrays.asList(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line">        coll.removeAll(coll1);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line">        coll.add(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.retainAll()：获取coll和coll1交集部分（coll保留交集部分）</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll1</span> <span class="operator">=</span> Arrays.asList(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line">        coll.retainAll(coll1);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.equals() 判断当前集合和形参,要想返回true，首先对象都为集合才可</span></span><br><span class="line"><span class="comment">//        Collection coll = new ArrayList();</span></span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line">        coll.add(p);</span><br><span class="line">        System.out.println(coll.equals(coll1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.hashCode()：返回当前对象的哈希值</span></span><br><span class="line">        System.out.println(coll.hashCode());<span class="comment">//hashCode() 定义在Object中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.集合转换为数组 toArray()</span></span><br><span class="line">        Object[] arr = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拓展：数组——&gt;集合</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;CC&quot;</span>&#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">arr1</span> <span class="operator">=</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">123</span>, <span class="number">456</span>&#125;);<span class="comment">//这样会识别为一个元素</span></span><br><span class="line">        System.out.println(arr1);<span class="comment">//[[I@1990a65e]</span></span><br><span class="line">        System.out.println(arr1.size());<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">arr2</span> <span class="operator">=</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">123</span>,<span class="number">456</span>&#125;);</span><br><span class="line">        System.out.println(arr2.size());<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//9.iterator()：返回Iterator接口的实例，用于遍历集合</span></span><br><span class="line">        <span class="comment">//见文件Test1103.java</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用Person类的equals方法&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十一章 集合</category>
      </categories>
  </entry>
  <entry>
    <title>1104 jdk 5.0 新增了foreach循环，用于遍历集合、数组</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/1104%20jdk%205.0%20%E6%96%B0%E5%A2%9E%E4%BA%86foreach%E5%BE%AA%E7%8E%AF%EF%BC%8C%E7%94%A8%E4%BA%8E%E9%81%8D%E5%8E%86%E9%9B%86%E5%90%88%E3%80%81%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * jdk 5.0 新增了foreach循环，用于遍历集合、数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-14 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1104</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for(集合元素的类型 局部变量 : 集合对象)</span></span><br><span class="line">        <span class="comment">//内部仍然调用了迭代器。（next、hasNext）</span></span><br><span class="line">        <span class="keyword">for</span>(Object obj : coll)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">5</span>,<span class="number">66</span>,<span class="number">123</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">//for(数组元素的类型 局部变量 : 数组对象)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : arr)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        String arr[] = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;MM&quot;</span>,<span class="string">&quot;MM&quot;</span>,<span class="string">&quot;MM&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：普通for循环</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; arr.length; i++)&#123;</span></span><br><span class="line"><span class="comment">//            arr[i] = &quot;GG&quot;;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：增强for循环（foreach）</span></span><br><span class="line">        <span class="keyword">for</span> (String s : arr)&#123;</span><br><span class="line">            s = <span class="string">&quot;DD&quot;</span>;<span class="comment">//不会改变原数组</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十一章 集合</category>
      </categories>
  </entry>
  <entry>
    <title>1105 List接口的具体实现类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/1105%20List%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E7%B1%BB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  1.接口框架</span></span><br><span class="line"><span class="comment"> *  |--- Collection接口：单列集合，用来存储一个一个数据</span></span><br><span class="line"><span class="comment"> *             |---List接口：存储有序的、可重复的数据。——&gt;“动态”数据</span></span><br><span class="line"><span class="comment"> *                 |--- ArrayList：作为List接口的主要实现类。线程不安全，效率高；底层使用Object[] elementData存储</span></span><br><span class="line"><span class="comment"> *                 |--- LinkedList：对于频繁的插入、删除操作，使用此类效率高；底层使用双向链表存储</span></span><br><span class="line"><span class="comment"> *                 |--- Vector：作为古老实现类。线程安全，效率低；底层使用Object[] elementData存储</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.ArrayList源码分析：</span></span><br><span class="line"><span class="comment"> *      2.1 jdk 7情况下</span></span><br><span class="line"><span class="comment"> *          ArrayList arr = new ArrayLis();//调用空参构造器，底层创建了长度是10的Object[] 数组elementData</span></span><br><span class="line"><span class="comment"> *          arr.add(123);//elementData[0] = new Integer(123);</span></span><br><span class="line"><span class="comment"> *          ...//继续添加</span></span><br><span class="line"><span class="comment"> *          arr.add(11);//如果此次添加导致底层elementData数组容量不够，则扩容</span></span><br><span class="line"><span class="comment"> *          默认情况下，扩容为原来容量的1.5倍，同时则需要将原数组中的数据复制到新的数组中。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *          结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)</span></span><br><span class="line"><span class="comment"> *          (me：在大概知道需要多长的数组的情况下，免得空参构造器容量不够，需要频繁扩容)</span></span><br><span class="line"><span class="comment"> *      2.2 jdk 8中ArrayList的变化：</span></span><br><span class="line"><span class="comment"> *          ArrayList list = new ArrayList();//底层Object[] elementData初始化为&#123;&#125;，并没有创建长度为10的数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *          list.add(123);//第一次调用add()时，底层才创建了长度为10的数组，并将数据123添加到elementData中</span></span><br><span class="line"><span class="comment"> *          ...</span></span><br><span class="line"><span class="comment"> *          后续的添加和扩容操作与jdk 7 无异</span></span><br><span class="line"><span class="comment"> *      2.3 小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，二jdk8中的ArrayList的对象的创建</span></span><br><span class="line"><span class="comment"> *      类似于单例的蓝=懒汉式，延迟了数组的创建，节省内存。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.LinkedList源码分析（7和8没有太大的差别，所以直接在8里边看）</span></span><br><span class="line"><span class="comment"> *      LinkedList list = new LinkedList();内部声明了Node类型的first和last属性，默认值为null</span></span><br><span class="line"><span class="comment"> *      list.add(123);//将123封装到Node中，创建了Node对象。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      其中，Node定义为:（双向链表）</span></span><br><span class="line"><span class="comment"> *      private static class Node&lt;E&gt; &#123;</span></span><br><span class="line"><span class="comment"> *         E item;</span></span><br><span class="line"><span class="comment"> *         Node&lt;E&gt; next;</span></span><br><span class="line"><span class="comment"> *         Node&lt;E&gt; prev;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *         Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span></span><br><span class="line"><span class="comment"> *             this.item = element;</span></span><br><span class="line"><span class="comment"> *             this.next = next;</span></span><br><span class="line"><span class="comment"> *             this.prev = prev;</span></span><br><span class="line"><span class="comment"> *         &#125;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * 4. Vector的源码分析：jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组，</span></span><br><span class="line"><span class="comment"> *  在扩容方面，默认扩容为原来的数组长度的2倍。</span></span><br><span class="line"><span class="comment"> * 面试题：ArrayList、LinkedList、Vector三者的异同：</span></span><br><span class="line"><span class="comment"> * 同：三个类都是实现了List接口，存储数据的特点相同：存储有序的、可重复的数据</span></span><br><span class="line"><span class="comment"> * 异：见上</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-15 8:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1105</span> &#123;</span><br><span class="line">    <span class="comment">//List的常用方法</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * void add(int index, Object ele):在index位置插入ele元素</span></span><br><span class="line"><span class="comment">    * boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素逐个添加进来</span></span><br><span class="line"><span class="comment">    * Object get(int index):获取指定index位置的元素</span></span><br><span class="line"><span class="comment">    * int indexOf(Object obj):返回obj在当前集合中首次出现的位置;若不存在，返回-1</span></span><br><span class="line"><span class="comment">    * int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</span></span><br><span class="line"><span class="comment">    * Object remove(int index):移除指定index位置的元素，并返回此元素</span></span><br><span class="line"><span class="comment">    * Object set(int index, Object ele):设置指定index位置的元素为ele</span></span><br><span class="line"><span class="comment">    * List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</span></span><br><span class="line"><span class="comment">    *   总结：常用方法</span></span><br><span class="line"><span class="comment">    *       增：add(Object obj)</span></span><br><span class="line"><span class="comment">    *       删：remove(int index) / remove(Object obj) e.g. remove(2) 此时 2 是索引值，而非对象；remove(Integer(2));//删除出元素2</span></span><br><span class="line"><span class="comment">    *       改：set(int index, Object ele)</span></span><br><span class="line"><span class="comment">    *       查：get(int index)</span></span><br><span class="line"><span class="comment">    *       长度：size()</span></span><br><span class="line"><span class="comment">    *       遍历：</span></span><br><span class="line"><span class="comment">    *           1）Iterator</span></span><br><span class="line"><span class="comment">    *           2）增强for循环</span></span><br><span class="line"><span class="comment">    *           3）普通的循环</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：Iterator迭代器方式</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：foreach循环（增强for循环）</span></span><br><span class="line">        <span class="keyword">for</span>(Object obj : list)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：普通for循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add(int index, Object ele)</span></span><br><span class="line">        list.add(<span class="number">1</span>,<span class="string">&quot;CV&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//addAll(int index, Collection eles)</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        list.addAll(list1);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object get(int index)</span></span><br><span class="line">        System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//indexOf()</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> list.indexOf(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> list.indexOf(<span class="string">&quot;asdasd&quot;</span>);<span class="comment">//不存在返回-1</span></span><br><span class="line">        System.out.println(index1);</span><br><span class="line">        System.out.println(index2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lastIndexOf()：如果不存在，返回-1</span></span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="number">456</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object remove()</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> list.remove(<span class="number">1</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(obj1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object set()</span></span><br><span class="line">        list.set(<span class="number">1</span>,<span class="string">&quot;QAQ&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List subList(int fromIndex, int toIndex):左闭右开，产生新的List的对象，原对象不改变</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="type">List</span> <span class="variable">subList</span> <span class="operator">=</span> list.subList(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(subList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十一章 集合</category>
      </categories>
  </entry>
  <entry>
    <title>1106 Set接口的具体实现类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/1106%20Set%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E7%B1%BB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> SetTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  |--- Collection接口：单列集合，用来存储一个一个数据</span></span><br><span class="line"><span class="comment"> *              |---Set接口：存储无序的、不可重复的数据 ——&gt;无序确定互异</span></span><br><span class="line"><span class="comment"> *                    |--- HashSet:作为Set接口的主要实现类，线程不安全，可以存储null值</span></span><br><span class="line"><span class="comment"> *                          |--- LinkedHashSet:作为HashSet的子类：遍历其内部数据时，可以按照添加的顺序遍历。</span></span><br><span class="line"><span class="comment"> *                              对于频繁的遍历操作，LinkedHashSet效率高于HashSet</span></span><br><span class="line"><span class="comment"> *                    |--- TreeSet:可以按照添加元素或对象的指定属性进行排序。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.要求：向Set中添加的数据，其所在的类一定要重写hashCode()和equals()方法</span></span><br><span class="line"><span class="comment"> *      要求重写的hashCode()和equals()尽可能保持一致性</span></span><br><span class="line"><span class="comment"> *      重写两个方法的一个小技巧：对象中用作equals()方法比较Field，都应该用来计算hashCode()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-15 18:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1106</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 一、Set：存储无序的、不可重复的数据</span></span><br><span class="line"><span class="comment">    * 1.无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的</span></span><br><span class="line"><span class="comment">    *   注：hashCode是Object类中的，根据需要进行重写</span></span><br><span class="line"><span class="comment">    * 2.不可重复性：保证添加的元素按照equals()判断时，不能返回true。即：相同的元素只能添加一次</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 二、添加元素的过程，以HashSet为例：</span></span><br><span class="line"><span class="comment">    *   我们向HashSet中添加元素a，首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，</span></span><br><span class="line"><span class="comment">    *   此哈希值接着通过某种算法计算出所在HashSet底层数组中的存放位置（即为：索引位置），判断</span></span><br><span class="line"><span class="comment">    *   数组此位置上是否已经有过元素：</span></span><br><span class="line"><span class="comment">    *       如果此位置上没有其他元素，则a添加成功 ——&gt; 情况1</span></span><br><span class="line"><span class="comment">    *       如果此位置上有其它元素（或以链表形式存在的多个元素），则比较元素a和元素b的hash值：</span></span><br><span class="line"><span class="comment">    *           如果hash值不同，则元素a添加成功 ——&gt; 情况2</span></span><br><span class="line"><span class="comment">    *           如果hash值相同，进而需要调用元素a所在类的equals()方法：</span></span><br><span class="line"><span class="comment">    *               equals()返回true，元素a添加失败</span></span><br><span class="line"><span class="comment">    *               equals()返回false，元素a添加成功 ——&gt; 情况3</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *       对于添加成功的元素的情况2和3而言，元素a与已经存在指定索引位置上数据以链表的方式存储。</span></span><br><span class="line"><span class="comment">    *       jdk 7 ：元素a放到数组中，指向原来的元素</span></span><br><span class="line"><span class="comment">    *       jkd 8 ：原来的元素在数组中，指向元素a</span></span><br><span class="line"><span class="comment">    *           总结：7上8下</span></span><br><span class="line"><span class="comment">    *   注：HashSet底层也是数组，初始容量为16。当如果使用率超过0.75，（16*0.75=12）</span></span><br><span class="line"><span class="comment">    *       就会扩大容量为原来的2倍。（16扩容为32，依次为64.128...等）</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"></span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">12</span>, <span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">12</span>, <span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * LinkedHashSet的使用</span></span><br><span class="line"><span class="comment">    *   LinkedHashSet 作为hashSet的子类，在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据</span></span><br><span class="line"><span class="comment">    * 和后一个数据</span></span><br><span class="line"><span class="comment">    * 优点：对于频繁的遍历操作，LinkedHashSet效率高于HashSet</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line"></span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">12</span>, <span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">12</span>, <span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) o;</span><br><span class="line">        <span class="keyword">return</span> age == user.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(age, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//按姓名从大到小排序</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)o;</span><br><span class="line">            <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span>  -<span class="built_in">this</span>.name.compareTo(user.name);<span class="comment">//按姓名从大到小排序</span></span><br><span class="line">            <span class="keyword">if</span>(compare!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="built_in">this</span>.age,user.age);<span class="comment">//这个方法也是从小到大</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入的类型不匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十一章 集合</category>
      </categories>
  </entry>
  <entry>
    <title>1107 TreeSet的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/1107%20TreeSet%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> SetTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * TreeSet的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-16 19:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1107</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* me:返回整数往前放，负数往后放（这个表述歧义比较大，但大概就是这个意思）</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 1.向TreeSet中添加数据，要求是相同类的对象</span></span><br><span class="line"><span class="comment">    * 2.两种排序方式：自然排序（实现Comparable接口）和定制排序（Comparator）</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 3.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0，不再是equals()</span></span><br><span class="line"><span class="comment">    * 4.定制排序中，比较两个对象是否相同的标准为：compare()返回0，不再是equals()</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br><span class="line"><span class="comment">//失败：不能添加不同类的对象</span></span><br><span class="line"><span class="comment">//        set.add(123);</span></span><br><span class="line"><span class="comment">//        set.add(456);</span></span><br><span class="line"><span class="comment">//        set.add(&quot;AA&quot;);</span></span><br><span class="line"><span class="comment">//        set.add(new User(12,&quot;Tom&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例一：</span></span><br><span class="line"><span class="comment">//        set.add(12);</span></span><br><span class="line"><span class="comment">//        set.add(-112);</span></span><br><span class="line"><span class="comment">//        set.add(112);</span></span><br><span class="line"><span class="comment">//        set.add(2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例二：</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">12</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;Jerry&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">6</span>,<span class="string">&quot;Mike&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">112</span>,<span class="string">&quot;Jack&quot;</span>));</span><br><span class="line">        <span class="comment">//TreeSet是按照compareTo()进行是否相同的判断，如果只按姓名进行排序，“Jack”只能添加一个</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">56</span>,<span class="string">&quot;Jack&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">com</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//按照年龄从小到大排序</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> (User)o1;</span><br><span class="line">                    <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> (User)o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入的数据类型不匹配&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(com);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">12</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;Jerry&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">6</span>,<span class="string">&quot;Mike&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">112</span>,<span class="string">&quot;Jack&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">11</span>,<span class="string">&quot;Jack&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">11</span>,<span class="string">&quot;Marry&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十一章 集合</category>
      </categories>
  </entry>
  <entry>
    <title>1108 一个面试题，很有意思，很好的体现了hashCode()、equals()</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/1108%20%E4%B8%80%E4%B8%AA%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%BE%88%E6%9C%89%E6%84%8F%E6%80%9D%EF%BC%8C%E5%BE%88%E5%A5%BD%E7%9A%84%E4%BD%93%E7%8E%B0%E4%BA%86hashCode()%E3%80%81equals()/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> SetTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> chapter09Test.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 一个面试题，很有意思，很好的体现了hashCode()、equals()</span></span><br><span class="line"><span class="comment"> * 添加元素的时候，先算哈希值，相同了，再用equals()进行比较，然后以链表形式添加</span></span><br><span class="line"><span class="comment"> *  这道题的前提是上面的hashCode()、equals()方法都被重写过了哈</span></span><br><span class="line"><span class="comment"> *      先 hashCode() 再equals()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-16 20:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1108</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1002</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">        p1.name = <span class="string">&quot;CC&quot;</span>;</span><br><span class="line"></span><br><span class="line">        set.remove(p1);<span class="comment">//要删除就要判断有没有这个元素，既然判断有没有，那和add时判断有没有就是一个逻辑</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;CC&quot;</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十一章 集合</category>
      </categories>
  </entry>
  <entry>
    <title>1109 Map接口的具体实现类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/1109%20Map%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E7%B1%BB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> MapTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * |--- Map：双列数据，存储key-value对的数据    —— 类似于高中的函数：y=f(x)。me：字典</span></span><br><span class="line"><span class="comment"> *          |--- HashMap：作为Map的主要实现类：线程不安全，效率高；存储null的key和value</span></span><br><span class="line"><span class="comment"> *              |---LinkedHashMap：保证在遍历map元素时，可以按照添加的顺序实现遍历</span></span><br><span class="line"><span class="comment"> *                      原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素</span></span><br><span class="line"><span class="comment"> *                      对频繁的遍历操作，此类执行效率高于HashMap</span></span><br><span class="line"><span class="comment"> *          |--- TreeMap：保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序和定制排序</span></span><br><span class="line"><span class="comment"> *                        底层使用红黑树</span></span><br><span class="line"><span class="comment"> *          |--- Hashtable：作为古老的实现类：线程安全，效率低；不能存储null的key和value</span></span><br><span class="line"><span class="comment"> *              |---Properties：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      HashMap的底层：数组 + 链表 （JDK 7之前）</span></span><br><span class="line"><span class="comment"> *                    数组 + 链表 + 红黑树 （jdk 8）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 面试题：</span></span><br><span class="line"><span class="comment"> * 1. （极其常考）HashMap的底层实现</span></span><br><span class="line"><span class="comment"> * 2.  HashMap 和 Hashtable的异同？</span></span><br><span class="line"><span class="comment"> * 3. CurrentHashMap 和 Hashtable的异同？ （暂时不讲）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 二、Map结构的理解：</span></span><br><span class="line"><span class="comment"> *      Map中的key：无序的、不可重复的，使用Set存储所有的key ——&gt; key所在的类要重写equals()和hashCode()（以HashMap为例）</span></span><br><span class="line"><span class="comment"> *      Map中的value：无序的、可重复的，使用Collection存储所有的value ——&gt; value所在类要重写equals()</span></span><br><span class="line"><span class="comment"> *      一个键值对：key-value构成了一个Entry对象</span></span><br><span class="line"><span class="comment"> *      Mao中的entry：无序的、不可重复的，使用set存储所有的entry</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 三、HashMap的底层实现原理？以jdk 7为例</span></span><br><span class="line"><span class="comment"> *      HashMap map = new HashMap();</span></span><br><span class="line"><span class="comment"> *      在实例化以后，底层创建了长度为16的以为数组Entry[] table。</span></span><br><span class="line"><span class="comment"> *      ...可能已经执行过多次put...</span></span><br><span class="line"><span class="comment"> *      map.put(key1,value1)：</span></span><br><span class="line"><span class="comment"> *      首先，调用key1所在类的hashCode() 计算key1哈希值，此哈希值经过某种算法以后，得到在Entry数组中的存放位置</span></span><br><span class="line"><span class="comment"> *      如果此位置上的数据为空，此时的key1-value1添加成功 ——&gt; 情况一</span></span><br><span class="line"><span class="comment"> *      如果此位置上的数据不安全，（意味着此位置上存在一个或多个数据（以链表形式存在））比较key1和已经存在的一个或多个数据的</span></span><br><span class="line"><span class="comment"> *      哈希值：</span></span><br><span class="line"><span class="comment"> *              如果key1的哈希值与已经存在的哈希值都不相同，此时key1-value1添加成功。 ——&gt; 情况二</span></span><br><span class="line"><span class="comment"> *              如果key1的哈希值和已经存在的某一个哈希值相同，继续比较：调用key1所在类的equals()方法，比较：</span></span><br><span class="line"><span class="comment"> *                  如果equals()返回false：此时key1-value1添加成功 ——&gt; 情况三</span></span><br><span class="line"><span class="comment"> *                  如果equals()返回true：使用value1替换value2</span></span><br><span class="line"><span class="comment"> *          补充：关于情况2和情况三：此时key1-value1和原来的数据以链表的方式存储</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *       在不断的添加过程中，会涉及到扩容问题，当超出临街值（且要存放的位置非空时），默认的扩容方式，扩容为原来的2倍，并将原有的数据复制过来</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *       jdk 8 相较于jdk 7在底层实现方面的不同:</span></span><br><span class="line"><span class="comment"> *        1. new HashMap():底层没有创建长度为16的数组</span></span><br><span class="line"><span class="comment"> *        2. jdk 8底层的数组是：Node[]，而非Entry[]</span></span><br><span class="line"><span class="comment"> *        3. 首次调用put()方法时，底层创建长度为16的数组</span></span><br><span class="line"><span class="comment"> *        4. jdk7底层结构只有：数组+链表；jdk8中底层结构：数组+链表+红黑树（二叉排序树）</span></span><br><span class="line"><span class="comment"> *              当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8，并且，当前数组的长度 &gt; 64时，</span></span><br><span class="line"><span class="comment"> *              此时索引位置上的所有数据改为使用红黑树存储。</span></span><br><span class="line"><span class="comment"> *      DEFAULT_INITIAL_CAPACITY : HashMap的默认容量 16</span></span><br><span class="line"><span class="comment"> *      DEFAULT_LOAD_FACTOR : HashMap的默认加载因子 0.75</span></span><br><span class="line"><span class="comment"> *      threshold : 扩容的临界值 = 容量*填充因子 ： 16*0.75 = 12</span></span><br><span class="line"><span class="comment"> *      TREEIFY_THRESHOLD : Bucket中链表长度大于该默认值，转化为红黑树（JDK8中）</span></span><br><span class="line"><span class="comment"> *      MIN_TREEDIFY_CAPACITY : 桶中的Node被树化时最小的hash表容量：64</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 四、LinkedHashMap 的底层实现原理（了解）</span></span><br><span class="line"><span class="comment"> *          源码中：</span></span><br><span class="line"><span class="comment"> *          static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span></span><br><span class="line"><span class="comment"> *              Entry&lt;K,V&gt; before, after;//能够记录添加元素的先后顺序</span></span><br><span class="line"><span class="comment"> *              Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment"> *                  super(hash, key, value, next);</span></span><br><span class="line"><span class="comment"> *              &#125;</span></span><br><span class="line"><span class="comment"> *          &#125;</span></span><br><span class="line"><span class="comment"> * 五、Map中定义的方法</span></span><br><span class="line"><span class="comment"> *      添加、删除、修改：</span></span><br><span class="line"><span class="comment"> *          Object put(Object key, Object value): 将指定key-value添加到（或修改）当前当前map对象中</span></span><br><span class="line"><span class="comment"> *          void putAll(Map m): 将m中所有key-value对存放到当前map中</span></span><br><span class="line"><span class="comment"> *          Object remove(Object key): 移除指定key的key-value对，并返回value</span></span><br><span class="line"><span class="comment"> *          void clear(): 清空当前map中所有数据</span></span><br><span class="line"><span class="comment"> *      元素查询的操作：</span></span><br><span class="line"><span class="comment"> *          Object get(): 获取指定key对应的value</span></span><br><span class="line"><span class="comment"> *          boolean containsKey(Object key): 是否包含指定的key</span></span><br><span class="line"><span class="comment"> *          boolean containsValue(Object value): 是否包含指定的value</span></span><br><span class="line"><span class="comment"> *          int size(): 返回map中key-value的个数</span></span><br><span class="line"><span class="comment"> *          boolean isEmpty(): 判断当前map是否为空</span></span><br><span class="line"><span class="comment"> *          boolean equals(Object obj): 判断当前map和参数obj是否相等</span></span><br><span class="line"><span class="comment"> *      元始图操作的方法：</span></span><br><span class="line"><span class="comment"> *          Set keySet(): 返回所有key构成的Set集合</span></span><br><span class="line"><span class="comment"> *          Collection values(): 返回所有value构成的Collection集合</span></span><br><span class="line"><span class="comment"> *          Set entrySet(): 返回所有key-value对构成的Set集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 总结：常用方法</span></span><br><span class="line"><span class="comment"> *  添加 put</span></span><br><span class="line"><span class="comment"> *  删除 remove</span></span><br><span class="line"><span class="comment"> *  修改 put</span></span><br><span class="line"><span class="comment"> *  查询 get</span></span><br><span class="line"><span class="comment"> *  长度 size</span></span><br><span class="line"><span class="comment"> *  遍历 keySet() / values() / entrySet()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-16 20:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1109</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        <span class="comment">//key和value的参数类型为Object，所以类型混着来也可以，不过实际开发中一般key的类型时确定统一的，value的类型也是确定统一的</span></span><br><span class="line">        map.put(<span class="number">12</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;CC&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">1223</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map1.put(<span class="string">&quot;DD&quot;</span>,<span class="number">45</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;AA&quot;</span>,<span class="number">999</span>);</span><br><span class="line"></span><br><span class="line">        map.putAll(map1);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//remove(Object key)</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> map.remove(<span class="string">&quot;CCC&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear()</span></span><br><span class="line">        map.clear();<span class="comment">//与map=null不同</span></span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * Object get(): 获取指定key对应的value</span></span><br><span class="line"><span class="comment">        * boolean containsKey(Object key): 是否包含指定的key</span></span><br><span class="line"><span class="comment">        * boolean containsValue(Object value): 是否包含指定的value</span></span><br><span class="line"><span class="comment">        * int size(): 返回map中key-value的个数</span></span><br><span class="line"><span class="comment">        * boolean isEmpty(): 判断当前map是否为空</span></span><br><span class="line"><span class="comment">        * boolean equals(Object obj): 判断当前map和参数obj是否相等</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line">        <span class="comment">//Object get(Object key)</span></span><br><span class="line">        System.out.println(map.get(<span class="number">45</span>));</span><br><span class="line">        <span class="comment">//containsKey(Object key)</span></span><br><span class="line">        System.out.println(map.containsKey(<span class="string">&quot;BB&quot;</span>));</span><br><span class="line">        <span class="comment">//containsValue()</span></span><br><span class="line">        System.out.println(map.containsValue(<span class="number">123</span>));</span><br><span class="line">        <span class="comment">//size()</span></span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        <span class="comment">//isEmpty()</span></span><br><span class="line">        System.out.println(map.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 元始图操作的方法：</span></span><br><span class="line"><span class="comment">     *          Set keySet(): 返回所有key构成的Set集合</span></span><br><span class="line"><span class="comment">     *          Collection values(): 返回所有value构成的Collection集合</span></span><br><span class="line"><span class="comment">     *          Set entrySet(): 返回所有key-value对构成的Set集合</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的key</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set1</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> set1.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator1.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历所有的value</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line">        <span class="keyword">for</span>(Object o:values)&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历所有的key-value</span></span><br><span class="line">        <span class="comment">//方式1</span></span><br><span class="line">        <span class="comment">//entrySet()</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set2</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set2.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="comment">//entrySet集合中的元素都是entry</span></span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry)obj;</span><br><span class="line"></span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">&quot;——&gt;&quot;</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set3</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator3</span> <span class="operator">=</span> set1.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iterator3.hasNext())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> iterator3.next();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;——&gt;&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="literal">null</span>,<span class="number">123</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>();</span><br><span class="line">        map.put(<span class="number">123</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        map.put(<span class="number">345</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        map.put(<span class="number">12</span>,<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十一章 集合</category>
      </categories>
  </entry>
  <entry>
    <title>1110 向TreeMap中添加key-value自然排序和定制排序</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/1110%20%E5%90%91TreeMap%E4%B8%AD%E6%B7%BB%E5%8A%A0key-value%E8%87%AA%E7%84%B6%E6%8E%92%E5%BA%8F%E5%92%8C%E5%AE%9A%E5%88%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> MapTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-17 12:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1110</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向TreeMap中添加key-value，要求key必须是由同一个类创建的对象</span></span><br><span class="line">    <span class="comment">//因为要按照key进行排序：自然排序、定制排序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//自然排序Comparable接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TreeMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">23</span>,<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">21</span>,<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line"></span><br><span class="line">        map.put(u1,<span class="number">99</span>);</span><br><span class="line">        map.put(u2,<span class="number">69</span>);</span><br><span class="line">        map.put(u3,<span class="number">82</span>);</span><br><span class="line">        map.put(u4,<span class="number">74</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator1.next();</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry)obj;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">&quot;——&gt;&quot;</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定制排序Comparator</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TreeMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> (User)o1;</span><br><span class="line">                    <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> (User)o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入类型不匹配！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">23</span>,<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">21</span>,<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line"></span><br><span class="line">        map.put(u1,<span class="number">99</span>);</span><br><span class="line">        map.put(u2,<span class="number">69</span>);</span><br><span class="line">        map.put(u3,<span class="number">82</span>);</span><br><span class="line">        map.put(u4,<span class="number">74</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator1.next();</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry)obj;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">&quot;——&gt;&quot;</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十一章 集合</category>
      </categories>
  </entry>
  <entry>
    <title>1111 Properties的简单使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/1111%20Properties%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> MapTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Properties的简单使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-17 13:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1111</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Properties：常用来处理配置文件。key和value都是String类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * 目前主要过一下try中的内容即可</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            pros.load(fis);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;password = &quot;</span>+name + <span class="string">&quot;,  password = &quot;</span> + password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十一章 集合</category>
      </categories>
  </entry>
  <entry>
    <title>1112 Collections：操作Collection、Map的工具类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/1112%20Collections%EF%BC%9A%E6%93%8D%E4%BD%9CCollection%E3%80%81Map%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Collections：操作Collection、Map的工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 面试题：Collection 和 Collections的区别？</span></span><br><span class="line"><span class="comment"> * Collection是一个接口，Collections是操作Collection实现类的一个工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-17 16:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1112</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * reverse(List): 反转List中元素</span></span><br><span class="line"><span class="comment">    * shuffle(List): 对List集合元素进行随机排序（随机化处理）</span></span><br><span class="line"><span class="comment">    * sort(List): 根据元素的自然排序对指定的List集合元素按升序排序</span></span><br><span class="line"><span class="comment">    * sort(List, Comparator): 根据指定的Comparator产生的顺序对List集合元素进行排序</span></span><br><span class="line"><span class="comment">    * swap(List,int,int): 将指定集合中的i处元素和j处元素进行交换</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * Object max(Collection): 根据元素的自然排序，返回给指定集合中的最大元素</span></span><br><span class="line"><span class="comment">    * Object max(Collection, Comparator): 根据Comparator指定的顺序，返回给定集合中最大的元素</span></span><br><span class="line"><span class="comment">    * Object min(Collection): 根据元素的自然排序，返回给指定集合中的最小元素</span></span><br><span class="line"><span class="comment">    * Object min(Collection, Comparator): 根据Comparator指定的顺序，返回给定集合中最小的元素</span></span><br><span class="line"><span class="comment">    * int frequency(Collection,Object): 返回指定集合中指定元素的出现次数</span></span><br><span class="line"><span class="comment">    * void copy(List dest, List src): 将src中的内容复制到dest中</span></span><br><span class="line"><span class="comment">    * boolean replaceAll(List list, Object oldVal, Object newVal): 使用新值替换List对</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line"><span class="comment">//        list.add(43.3);</span></span><br><span class="line">        list.add(<span class="number">7564</span>);</span><br><span class="line">        list.add(-<span class="number">12</span>);</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Collections.reverse(list);</span></span><br><span class="line"><span class="comment">//        Collections.shuffle(list);</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(Collections.frequency(list,<span class="number">43</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">7564</span>);</span><br><span class="line">        list.add(-<span class="number">12</span>);</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//报异常java.lang.IndexOutOfBoundsException: Source does not fit in dest</span></span><br><span class="line"><span class="comment">//        List dest = new ArrayList();</span></span><br><span class="line"><span class="comment">//        Collections.copy(dest,list);</span></span><br><span class="line">        <span class="comment">//正确的</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">dest</span> <span class="operator">=</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">Object</span>[list.size()]);</span><br><span class="line">        Collections.copy(dest,list);</span><br><span class="line">        System.out.println(dest);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Collections 类中提供了多个synchronizedXxx()方法，</span></span><br><span class="line"><span class="comment">        * 该方法可使将指定集合包装成线程同的集合，从而可以</span></span><br><span class="line"><span class="comment">        * 解决多线程开发并发访问集合时的线程安全问题</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//返回的list1即为线程安全的、</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> Collections.synchronizedList(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十一章 集合</category>
      </categories>
  </entry>
  <entry>
    <title>11 Employee类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/11%E7%AB%A0%20Employee/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> Chapter11exer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个Employee类</span></span><br><span class="line"><span class="comment"> *  该类包含：private成员变量name、age、birthday，其中birthday 为 MyDate 类的对象。</span></span><br><span class="line"><span class="comment"> *  并未每一个属性定义getter和setter方法</span></span><br><span class="line"><span class="comment"> *  并重写 toString() 方法输出 name、age、birthday</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-16 20:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> MyDate birthday;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MyDate <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(MyDate birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十一章 集合</category>
      </categories>
  </entry>
  <entry>
    <title>1301 File类的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1301%20File%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * File类的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. File类的一个对象代表一个文件或文件目录（俗称文件夹）</span></span><br><span class="line"><span class="comment"> * 2. File类声明在java.io包下</span></span><br><span class="line"><span class="comment"> * 3. File类中涉及到关于文件或目录的创建、删除、重命名、修改时间、文件大小等方法，</span></span><br><span class="line"><span class="comment"> * 并未涉及到写入或读取文件内容操作。如果需要读取或写入文件内容，必须使用IO流来完成。</span></span><br><span class="line"><span class="comment"> * 4. 后续File类的对象常会作为参数传递到流的构造器中，指明读取或写入的“终点”。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-18 16:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1301</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 1. 如何创建File类的实例</span></span><br><span class="line"><span class="comment">    *       File(String filePath)</span></span><br><span class="line"><span class="comment">    *       File(String parentPath,String childPath)</span></span><br><span class="line"><span class="comment">    *       File(String parentFile,String childPath)</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 2.</span></span><br><span class="line"><span class="comment">    *   相对路径：相较于某个了路径下，指明的路径</span></span><br><span class="line"><span class="comment">    *   绝对路径：包含盘符在内的文件或目录</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 3. 路径分隔符</span></span><br><span class="line"><span class="comment">    *   windows：\\</span></span><br><span class="line"><span class="comment">    *   unix：/</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器1</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相对路径是相对于module</span></span><br><span class="line">        System.out.println(file1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器2</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java学习\\Java_IDEA_projects\\txtTest&quot;</span>,<span class="string">&quot;javaSenior&quot;</span>);</span><br><span class="line">        System.out.println(file3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器3</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file3,<span class="string">&quot;h1.txt&quot;</span>);</span><br><span class="line">        System.out.println(file4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 方法：</span></span><br><span class="line"><span class="comment">    *   public String getAbsolutePath()：获取绝对路径</span></span><br><span class="line"><span class="comment">    *   public String getPath()：获取路径</span></span><br><span class="line"><span class="comment">    *   public String getName()：获取名称</span></span><br><span class="line"><span class="comment">    *   public String getParent()：获取上层文件目录路径。若无，则返回null</span></span><br><span class="line"><span class="comment">    *   public long length()：获取文件长度（即：字节数）。不能获取目录的长度</span></span><br><span class="line"><span class="comment">    *   public long LastModified()：最后一次的修改时间，毫秒值</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *   //如下的两个方法适用于文件目录（目录必须存在，这样才能获取嘛，否则运行报错java.lang.NullPointerException）</span></span><br><span class="line"><span class="comment">    *   public String[] list() : 获取指定目录下的所有文件或者文件目录的名称数组</span></span><br><span class="line"><span class="comment">    *   public File[] listFiles() : 获取指定目录下的所有文件或文件目录的File数组</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java学习\\Java_IDEA_projects\\txtTest\\h1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file1.getAbsolutePath());</span><br><span class="line">        System.out.println(file1.getPath());</span><br><span class="line">        System.out.println(file1.getName());</span><br><span class="line">        System.out.println(file1.getParent());</span><br><span class="line">        System.out.println(file1.length());</span><br><span class="line">        System.out.println(file1.lastModified());</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(file2.getAbsolutePath());</span><br><span class="line">        System.out.println(file2.getPath());</span><br><span class="line">        System.out.println(file2.getName());</span><br><span class="line">        System.out.println(file2.getParent());</span><br><span class="line">        System.out.println(file2.length());</span><br><span class="line">        System.out.println(file2.lastModified());<span class="comment">//得到一个毫秒数：1618822284182</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java学习&quot;</span>);</span><br><span class="line">        String[] list = file1.list();</span><br><span class="line">        <span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        File[] files = file1.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(File s:files)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * public boolean renameTo(File dest)：把文件重命名为指定的文件路径</span></span><br><span class="line"><span class="comment">    * 比如：file1.renameTo(file2)为例：</span></span><br><span class="line"><span class="comment">    *       要想保证返回true，需要file1在硬盘中是存在的，且file2不能再硬盘中存在（file2存在返回false，且不会发生改变）</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java学习\\Java_IDEA_projects\\txtTest\\h1.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java学习\\Java_IDEA_projects\\txtTest\\h2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">renameTo</span> <span class="operator">=</span> file1.renameTo(file2);</span><br><span class="line">        System.out.println(renameTo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * public boolean isDirectory() : 判断是否是文件目录</span></span><br><span class="line"><span class="comment">    * public boolean isFile() : 判断是否是文件</span></span><br><span class="line"><span class="comment">    * public boolean exits() : 判断是否存在</span></span><br><span class="line"><span class="comment">    * public boolean canRead() : 判断是否可读</span></span><br><span class="line"><span class="comment">    * public boolean canWrite() : 判断是否可写</span></span><br><span class="line"><span class="comment">    * public boolean isHidden() : 判断是都隐藏</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java学习\\Java_IDEA_projects\\txtTest\\h1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file1.isDirectory());</span><br><span class="line">        System.out.println(file1.isFile());</span><br><span class="line">        System.out.println(file1.exists());</span><br><span class="line">        System.out.println(file1.canRead());</span><br><span class="line">        System.out.println(file1.canWrite());</span><br><span class="line">        System.out.println(file1.isHidden());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * File类的创建功能</span></span><br><span class="line"><span class="comment">    * public boolean createNewFile() : 创建文件。若文件存在，则不创建，返回false</span></span><br><span class="line"><span class="comment">    * public boolean mkdir() : 创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建</span></span><br><span class="line"><span class="comment">    * public boolean mkdirs() : 创建文件目录。如果上层文件目录不存在，一并创建。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 删除</span></span><br><span class="line"><span class="comment">    * public boolean delete() : 删除文件或文件夹（这个文件夹要是空的才能删）</span></span><br><span class="line"><span class="comment">    *       删除注意事项：</span></span><br><span class="line"><span class="comment">    *           Java中的删除不走回收站</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件创建</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hi.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!file1.exists())&#123;</span><br><span class="line">            file1.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            file1.delete();</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//目录创建</span></span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java学习\\Java_IDEA_projects\\txtTest\\front\\txt&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!file2.exists())&#123;</span><br><span class="line">            <span class="keyword">if</span>(!file2.mkdir())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;上层目录不存在&quot;</span>);</span><br><span class="line">                file2.mkdirs();</span><br><span class="line">                System.out.println(<span class="string">&quot;上层目录一并创建！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1302 IO原理及流的分类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1302%20IO%E5%8E%9F%E7%90%86%E5%8F%8A%E6%B5%81%E7%9A%84%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 一、IO流原理及流的分类</span></span><br><span class="line"><span class="comment"> *  &gt; 按照作数据单位的不同：</span></span><br><span class="line"><span class="comment"> *       字节流（8 bit）——如：图片等非文本，字符流（16 bit）——如：文本</span></span><br><span class="line"><span class="comment"> *  &gt; 按照数据流的流向不同分为：输入流、输出流</span></span><br><span class="line"><span class="comment"> *  &gt; 按照流的角色不同分为：节点流、处理流</span></span><br><span class="line"><span class="comment"> *       抽象基类    字节流         字符流</span></span><br><span class="line"><span class="comment"> *        输入流    InputStream     Reader</span></span><br><span class="line"><span class="comment"> *        输出流    OutputStream    Writer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *       1. Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个</span></span><br><span class="line"><span class="comment"> *       抽象基类派生的。</span></span><br><span class="line"><span class="comment"> *       2. 有这四个类派生出来调度子类名称都是以其父类名作为子类名的后缀</span></span><br><span class="line"><span class="comment"> *  抽象基类            节点流（或文件流）       缓冲流（处理流的一种）</span></span><br><span class="line"><span class="comment"> *  InputStream         FileInputStream（read(byte[] buffer)）                  BufferedInputStream（read(byte[] buffer)）</span></span><br><span class="line"><span class="comment"> *  OutputStream        FileOutputStream（write(byte[] buffer, 0, len)）        BufferedOutputStream（write(byte[] buffer, 0, len)）/ flush()</span></span><br><span class="line"><span class="comment"> *  Reader              FileReader（read(char[] cbuf)）                         BufferedReader（read(char[] cbuf) / readLine()）</span></span><br><span class="line"><span class="comment"> *  Writer              FileWriter（write(char[] cbuf, 0, len)）                BufferedWriter（write(char[] cbuf, 0, len)） / flush()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-19 18:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1302</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相较于当前工程</span></span><br><span class="line">        <span class="comment">//方法中的相对路径相对的是module</span></span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 将硬盘中的文件读入到程序中，并输出到控制台</span></span><br><span class="line"><span class="comment">    * 说明：</span></span><br><span class="line"><span class="comment">    *   1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line"><span class="comment">    *   2. 异常的处理 ：为了保证一定可以执行关闭类操作。需要使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">    *   3. 读入的文件一定要存在否则就会报FileNotFoundException</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileReader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//me：声明在外面，让finally后面可以关闭</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.实例化File类的对象，指明要操作的文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java学习\\Java_IDEA_projects\\txtTest\\hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.提供具体的流</span></span><br><span class="line">            fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入</span></span><br><span class="line">            <span class="comment">//read() : 返回读入的一个字符。如果到达文件末尾，返回-1</span></span><br><span class="line">            <span class="comment">//原本的方式</span></span><br><span class="line"><span class="comment">//        int data = fr.read();</span></span><br><span class="line"><span class="comment">//        while (data!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)data);</span></span><br><span class="line"><span class="comment">//            data = fr.read();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">            <span class="comment">//优化一下 : 更加简洁，运行效率没有差别╮(╯_╰)╭</span></span><br><span class="line">            <span class="type">int</span> data;</span><br><span class="line">            <span class="keyword">while</span>((data = fr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>)data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.流的关闭操作</span></span><br><span class="line">            <span class="comment">/* 注：对于其它的物理连接，比如数据库连接、输入输入流、Socket连接，JVM无能为力(不会自动关闭) */</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fr != <span class="literal">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//抛异常的处理方式可能会导致流没有关闭，所以还是try-catch-finally进行处理</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 注：除了下面的重载的read()，还提供了一个重载的read()方法</span></span><br><span class="line"><span class="comment">    * public abstract int read(char cbuf[], int off, int len) throws IOException;</span></span><br><span class="line"><span class="comment">    *   说明：这个方法就指定了传入的数组可以不填满</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileReader1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. File类的实例化</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java学习\\Java_IDEA_projects\\txtTest\\hello.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//2. FileReader流的实例化</span></span><br><span class="line">            fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">            <span class="comment">//3.读入的操作</span></span><br><span class="line">            <span class="comment">/*使用read()重载的方法*/</span></span><br><span class="line">            <span class="comment">//read(char[] cbuf) : 返回每次读入cbuf数组中的字符个数。如果达到文件末尾，返回</span></span><br><span class="line">            <span class="type">char</span>[] cbuffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fr.read(cbuffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//正确的写法↓</span></span><br><span class="line"><span class="comment">//                for(int i = 0; i &lt;len; i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuffer[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//错误的写法↓</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                *       一开始声明的数组的长度是5，一次最多只能读5个字符，最后一次读的时候可能不够5个，比如</span></span><br><span class="line"><span class="comment">                *   可能是3个，然后最后两个还是上一次读出5个字符时的最后两个，这是不符合我们的期望的。</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                * */</span></span><br><span class="line"><span class="comment">//                for(int i = 0; i &lt;cbuffer.length; i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuffer[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//另一个的错误的写法↓</span></span><br><span class="line"><span class="comment">//                String str = new String(cbuffer);</span></span><br><span class="line"><span class="comment">//                System.out.print(str);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//正确的写法↓</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(cbuffer,<span class="number">0</span>,len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.(流)资源的关闭</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fr!=<span class="literal">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 从内存中写出数据到硬盘的文件里</span></span><br><span class="line"><span class="comment">    * 说明：</span></span><br><span class="line"><span class="comment">    *   1. 输出操作，对应的File可以不存在的</span></span><br><span class="line"><span class="comment">    *       如果不存在，在输出的过程中，会自动创建此文件。</span></span><br><span class="line"><span class="comment">    *       如果存在，对原有文件进行覆盖或追加</span></span><br><span class="line"><span class="comment">    *       注：</span></span><br><span class="line"><span class="comment">    *           FileWriter fw = new FileWriter(file, false);//这个构造器第二个参数是true：追加，默认是false</span></span><br><span class="line"><span class="comment">    *           FileWriter fw = new FileWriter(file);//这个构造器就是覆盖写入</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileWriter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 提供File类的对象，指明写出到的文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java学习\\Java_IDEA_projects\\txtTest\\Write01.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//2. 提供FileWriter的对象，用于数据的写出</span></span><br><span class="line">            fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file, <span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//3. 写出的操作</span></span><br><span class="line">            fw.write(<span class="string">&quot;123132&quot;</span>);</span><br><span class="line">            fw.write(<span class="string">&quot;\nad asd &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4. 流资源的关闭</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileReaderFileWriter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File类的对象，指明读入和写出的文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java学习\\Java_IDEA_projects\\txtTest\\Write01.txt&quot;</span>);</span><br><span class="line">            <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java学习\\Java_IDEA_projects\\txtTest\\dest01.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 不能使用字符流来处理图片等字节数据 */</span></span><br><span class="line"><span class="comment">//            File srcFile = new File(&quot;未标题-1.png&quot;);</span></span><br><span class="line"><span class="comment">//            File destFile = new File(&quot;未标题-1new.png&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建输入流和输出流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(srcFile);</span><br><span class="line">            fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(destFile);</span><br><span class="line">            <span class="comment">//3.数据的读入和写出操作</span></span><br><span class="line">            <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="type">int</span> len;<span class="comment">//记录每次对到cbuf数组中的字符的个数</span></span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//每次写出len个字符</span></span><br><span class="line">                fw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.关闭流资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fw.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fr.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1303 FileInputStream和FileOutPutStream的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1303%20FileInputStream%E5%92%8CFileOutPutStream%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 测试FileInputStream和FileOutPutStream的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 结论：</span></span><br><span class="line"><span class="comment"> *      1. 对于文本文件（.txt，.java，.c），使用字符流进行处理</span></span><br><span class="line"><span class="comment"> *      2. 对于非文本文件(.jpg，.mp3，mp4，avi，doc，ppt)，使用字节流处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-19 20:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1303</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用字节流FileInputStream处理文本文件是可能出现乱码的</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileInputStream1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 造文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hi.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//2. 造流</span></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="comment">//3.读数据</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="comment">/* 注：utf-8中一个汉字要三个字节存，所以用byte数组可能会导致汉字被“劈开” */</span></span><br><span class="line">            <span class="type">int</span> len;<span class="comment">//记录每次读取的字节的个数</span></span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer,<span class="number">0</span>,len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流资源</span></span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 实现对图片的复制操作</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileInputStream2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;未标题-1.png&quot;</span>);</span><br><span class="line">            <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;未标题-1copy.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//复制的过程</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;复制成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fos!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fis!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(String src,String dest)</span>&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(src);</span><br><span class="line">            <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dest);</span><br><span class="line"></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//复制的过程</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;复制成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fos!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fis!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定路径下文件的复制</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCopyFile</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">srcPath</span> <span class="operator">=</span> <span class="string">&quot;E:\\视频\\2021寒假翻山 (1).mp4&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destPath</span> <span class="operator">=</span> <span class="string">&quot;E:\\视频\\Copy.mp4&quot;</span>;</span><br><span class="line">        copyFile(srcPath,destPath);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1304 处理流之一：缓冲流的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1304%20%E5%A4%84%E7%90%86%E6%B5%81%E4%B9%8B%E4%B8%80%EF%BC%9A%E7%BC%93%E5%86%B2%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 处理流之一：缓冲流的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.缓冲流</span></span><br><span class="line"><span class="comment"> * BufferedInputStream</span></span><br><span class="line"><span class="comment"> * BufferedOutputStream</span></span><br><span class="line"><span class="comment"> * BufferedReader</span></span><br><span class="line"><span class="comment"> * BufferedWriter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.作用：提供流的读取、写入的速度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-20 18:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1304</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 实现非文本文件的复制</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BufferedStreamTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;未标题-1.png&quot;</span>);</span><br><span class="line">            <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;未标题Copy2.png&quot;</span>);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1 造节点流</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile);</span><br><span class="line">            <span class="comment">//2.2 造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 复制的细节：读取、写入</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = bis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line"></span><br><span class="line"><span class="comment">//                bos.flush();/* 刷新缓冲区 */ //使用缓冲流会自动调用这个方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭（现在包了一层，关闭流的顺序就有了要求）</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bos!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bis!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动进行关闭。关于内层流的关闭，我们可以省略</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现文件复制的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyFileWithBuffered</span><span class="params">(String srcPath, String destPath)</span> &#123;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(srcPath);</span><br><span class="line">            <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destPath);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1 造节点流</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile);</span><br><span class="line">            <span class="comment">//2.2 造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 复制的细节：读取、写入</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭（现在包了一层，关闭流的顺序就有了要求）</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bos != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bis != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 测试缓冲流文件复制的操作 */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCopyFileWithBuffered</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        copyFileWithBuffered(<span class="string">&quot;E:\\视频\\符华[A]ddiction _2160p_HDR_Extreme\\[A]ddiction _2160p_HDR_Extreme.mp4&quot;</span>,<span class="string">&quot;E:\\视频\\符华[A]ddiction _2160p_HDR_Extreme\\copy.mp4&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;（withBuffered）所用毫秒数为：&quot;</span> + (end - start) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用Buffered和BufferedWriter实现文本文件的复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBufferedReaderBufferedWriter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//简洁一下</span></span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hi.txt&quot;</span>)));</span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hicopy&quot;</span>)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读写操作</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//            char[] cbuf = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while ((len = br.read(cbuf))!=-1)&#123;</span></span><br><span class="line"><span class="comment">//                bw.write(cbuf,0,len);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//方式二：</span></span><br><span class="line">            String data;</span><br><span class="line">            <span class="keyword">while</span> ((data = br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//方法1：</span></span><br><span class="line"><span class="comment">//                bw.write(data+&quot;\n&quot;);//data中不包含换行符</span></span><br><span class="line">                <span class="comment">//方法2：</span></span><br><span class="line">                bw.write(data);</span><br><span class="line">                bw.newLine();<span class="comment">//提供换行的操作</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bw!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(br!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1305 图片简单的加密和解密</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1305%20%E5%9B%BE%E7%89%87%E7%AE%80%E5%8D%95%E7%9A%84%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 图片简单的加密和解密</span></span><br><span class="line"><span class="comment"> * 注：下面的方法图片的大小不会发生改变</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-20 19:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1305</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的加密</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;未标题-1.png&quot;</span>));</span><br><span class="line">            <span class="comment">//可以这样简洁一点写</span></span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;未标题-1Secret加密版.png&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//字符数组进行修改</span></span><br><span class="line">                <span class="comment">//错误的:这样并不会对原有 数据进行修改（类似按值传递参数）</span></span><br><span class="line">    <span class="comment">//            for (byte b : buffer)&#123;</span></span><br><span class="line">    <span class="comment">//                b = (byte)(b^5);</span></span><br><span class="line">    <span class="comment">//            &#125;</span></span><br><span class="line">                <span class="comment">//正确的</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                    buffer[i] = (<span class="type">byte</span>)(buffer[i]^<span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fos!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fis!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的解密</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;未标题-1Secret加密版.png&quot;</span>));</span><br><span class="line">            <span class="comment">//可以这样简洁一点写</span></span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;未标题-1Secret解密版.png&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//字符数组进行修改</span></span><br><span class="line">                <span class="comment">//错误的:这样并不会对原有 数据进行修改（类似按值传递参数）</span></span><br><span class="line">    <span class="comment">//            for (byte b : buffer)&#123;</span></span><br><span class="line">    <span class="comment">//                b = (byte)(b^5);</span></span><br><span class="line">    <span class="comment">//            &#125;</span></span><br><span class="line">                <span class="comment">//正确的</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                    buffer[i] = (<span class="type">byte</span>)(buffer[i]^<span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fos!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fis!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1306 处理流之二：转换流的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1306%20%E5%A4%84%E7%90%86%E6%B5%81%E4%B9%8B%E4%BA%8C%EF%BC%9A%E8%BD%AC%E6%8D%A2%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 处理流之二：转换流的使用</span></span><br><span class="line"><span class="comment"> * 1. 转化流：属于字符流</span></span><br><span class="line"><span class="comment"> *      InputStreamReader ：将一个字节的输入流转换为字符的输入流</span></span><br><span class="line"><span class="comment"> *      OutputStreamWriter ：将一个字符的输出流转换为字节的输出流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2. 作用：提供字节流与字符流之间的转换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. 解码：字节、字符数组 ——&gt; 字符数组、字符串</span></span><br><span class="line"><span class="comment"> *    编码：字符数组、字符串 ——&gt; 字节、字节数组</span></span><br><span class="line"><span class="comment"> * 4.字符集</span></span><br><span class="line"><span class="comment"> *  ASCII：美国标准信息交换码</span></span><br><span class="line"><span class="comment"> *      用一个字节的7位可以表示</span></span><br><span class="line"><span class="comment"> *  ISO8859-1：拉丁码表。欧洲码表</span></span><br><span class="line"><span class="comment"> *      用一个字节的八位表示</span></span><br><span class="line"><span class="comment"> *  GB2321：中国的中文编码表。最多两个字节编码所有字符</span></span><br><span class="line"><span class="comment"> *  GBK：中国的中文编码表的升级，融合了更多的中文文字符号。最多两个字节编码</span></span><br><span class="line"><span class="comment"> *  Unicode：国际标准码。融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。</span></span><br><span class="line"><span class="comment"> *      所有的文字都用两个字节来表示</span></span><br><span class="line"><span class="comment"> *  UTF-8：变长的编码方式，可用1-4个字节来表示一个字符</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-20 19:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1306</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * InputStreamReader的使用，实现字节的输入流到字符的输出流的转换</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;hi.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(fis);//使用系统默认的字符</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//参数2指明了字符集，具体使用哪个字符集，取决于文件保存时使用的字符集</span></span><br><span class="line">            isr = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = isr.read(cbuf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(cbuf,<span class="number">0</span>,len);</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(isr!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    isr.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 综合使用InputStreamReader和OutputStreamWriter</span></span><br><span class="line"><span class="comment">    * 注：下面抛异常的方式处理是为了简便演示，开发中还是要用try-catch-finally</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hi.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;h1_gbk.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file1);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//编码</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写过程</span></span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(cbuf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">        osw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1307 其它流的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1307%20%E5%85%B6%E5%AE%83%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 其它流的使用</span></span><br><span class="line"><span class="comment"> * 1. 标准的输入、输出流</span></span><br><span class="line"><span class="comment"> * 2. 打印流</span></span><br><span class="line"><span class="comment"> * 3. 数据流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-21 20:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1307</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 1.标准的输入、输出流</span></span><br><span class="line"><span class="comment">    *  1.1</span></span><br><span class="line"><span class="comment">    *  System.in:标准的输入流，默认从键盘输入</span></span><br><span class="line"><span class="comment">    *  System.out:标准的输出流，默认从控制台输出</span></span><br><span class="line"><span class="comment">    *  1.2</span></span><br><span class="line"><span class="comment">    *  System类的setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输入和输出的流</span></span><br><span class="line"><span class="comment">    *  1.3练习：</span></span><br><span class="line"><span class="comment">    *   从键盘输入字符串，要求将读取到的整行字符串转换成大写输出，然后继续进行输入操作</span></span><br><span class="line"><span class="comment">    * 直至当输入“e”或者“exit”时，退出程序。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 方法一：使用Scanner</span></span><br><span class="line"><span class="comment">    * 方法二：使用System.in实现。System.in ——&gt; 转换流 ——&gt; BufferedReader的readLine()</span></span><br><span class="line"><span class="comment">    *https://www.bilibili.com/video/BV1Kb411W75N?p=603&amp;spm_id_from=pageDriver</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 打印流：PrintStream 和 PrintWriter</span></span><br><span class="line"><span class="comment">    * 2.1 提供了一系列重载的print() 和 println()</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *https://www.bilibili.com/video/BV1Kb411W75N?p=605&amp;spm_id_from=pageDriver</span></span><br><span class="line"><span class="comment">    * 数据流</span></span><br><span class="line"><span class="comment">    *  DataInputStream 和 DataOutputStream</span></span><br><span class="line"><span class="comment">    *   作用：用于读取或写出基本数据类型的变量或字符串</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1308 对象流的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1308%20%E5%AF%B9%E8%B1%A1%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 对象流的使用</span></span><br><span class="line"><span class="comment"> *  1. ObjectInputStream 和 ObjectOutputStream</span></span><br><span class="line"><span class="comment"> *  2. 作用：用于存储和读取基本数据类型或对象的处理流。它的强大之处就是可以把Java中的对象写入到</span></span><br><span class="line"><span class="comment"> *  数据源中，也能把对象从数据源中还原回来。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  什么样的类可以序列化？</span></span><br><span class="line"><span class="comment"> *      以Person类为例，满足如下要求即可进行序列化</span></span><br><span class="line"><span class="comment"> *          1. 实现Serializable（常用）或Externalizable接口</span></span><br><span class="line"><span class="comment"> *          2. 需要当前类提供一个全局变量：seriaLVersionUID</span></span><br><span class="line"><span class="comment"> *              如：String中的private static final long serialVersionUID = -6849794470754667710L;</span></span><br><span class="line"><span class="comment"> *          3. 除了当前Person类需要实现serialVersionUID接口以外，还必须保证其内部的所有属性</span></span><br><span class="line"><span class="comment"> *          也必须是可序列化的（比如：有一个Person有个Account类型的（一个类）属性，Account也必须是可序列化的）。（默认情况下，基本数据类型可序列化）</span></span><br><span class="line"><span class="comment"> *      补充：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员</span></span><br><span class="line"><span class="comment"> * 注：实现Serializable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-21 21:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1308</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 序列化过程：将内存中的java对象保存到磁盘中或通过网络传输出去</span></span><br><span class="line"><span class="comment">     * 使用ObjectOutputStream实现</span></span><br><span class="line"><span class="comment">     * 注：写出去的文件主要是为了保存数据，不是让我们双击打开看的</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ObjectOutputStream</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;我爱北京天安门&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(oos!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 将对象从文件中还原出来——反序列化</span></span><br><span class="line"><span class="comment">    *   使用ObjectInputStream来实现</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testObjectInputStream</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> (String)obj;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(ois!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    ois.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 自定义类进行序列化和反序列化</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        oos = new ObjectOutputStream(new FileOutputStream(&quot;object.dat&quot;));</span></span><br><span class="line"><span class="comment">//        oos.writeObject(new String(&quot;我爱北京天安门&quot;));</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;PersonDemo.dat&quot;</span>));</span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">2</span>));</span><br><span class="line">            oos.flush();</span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;123asd&quot;</span>));</span><br><span class="line">            oos.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(oos!=<span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;PersonDemo.dat&quot;</span>));</span><br><span class="line">            <span class="comment">//me：读取的顺序是和写入的顺序是一致的；否则报错：</span></span><br><span class="line">            <span class="comment">//java.lang.ClassCastException: class chapter13.Person cannot be cast to class java.lang.String (chapter13.Person is in unnamed module of loader &#x27;app&#x27;; java.lang.String is in module java.base of loader &#x27;bootstrap&#x27;)</span></span><br><span class="line">            <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person)ois.readObject();</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String)ois.readObject();</span><br><span class="line"></span><br><span class="line">            System.out.println(p);</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ois!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ois.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6849794480754667710L</span>;<span class="comment">//String 类中的</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1309 RandomAccessFile的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1309%20RandomAccessFile%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * RandomAccessFile的使用</span></span><br><span class="line"><span class="comment"> * 1. RandomAccessFile 直接继承于java.lang.Object，实现了DataInput和DataOutput接口</span></span><br><span class="line"><span class="comment"> * 2. 既可以做输出流也可以做输入流</span></span><br><span class="line"><span class="comment"> * 3. 如果RandomAccessFile作为输出流时，写出到的文件如果不存在，从开头位置进行覆盖（比原来文件中短的话，就只覆盖前面的，后面的还和原文件中一样）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 方法: long getFilePointer() : 获取文件记录指针的当前位置</span></span><br><span class="line"><span class="comment"> *       void seek(long pos) : 将文件记录指针定位到pos位置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 见：https://www.bilibili.com/video/BV1Kb411W75N?p=617&amp;spm_id_from=pageDriver</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-23 18:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1309</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            raf1 = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;未标题-1.png&quot;</span>),<span class="string">&quot;r&quot;</span>);</span><br><span class="line">            raf2 = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;未标题-11.png&quot;</span>),<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = raf1.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                raf2.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(raf1!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    raf1.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(raf2!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    raf2.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*测试第三点 3. */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;hi2.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        raf1.write(<span class="string">&quot;xsax&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        raf1.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1310 网络编程</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1310%20%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13Net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 一、网络编程中有两个主要的问题</span></span><br><span class="line"><span class="comment"> * 1.如何准确定位网络上的一台或多台主机；定位主机上的特定的应用。</span></span><br><span class="line"><span class="comment"> * 2.找到主机之后，如何高效可靠地进行数据传输</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 二、网络编程中的两个要素：</span></span><br><span class="line"><span class="comment"> *      对应问题一：IP和端口号</span></span><br><span class="line"><span class="comment"> *      对应问题二：提供网络通信协议：TCP/IP参考模型（应用层、传输层、网络层、物理+数据链路层）</span></span><br><span class="line"><span class="comment"> * 三、通信要素一：IP和端口号</span></span><br><span class="line"><span class="comment"> *  1.IP：唯一的标识Internet上的计算机（通信实体）</span></span><br><span class="line"><span class="comment"> *  2.在Java中使用InetAdress类代表IP</span></span><br><span class="line"><span class="comment"> *  3.IP分类：IPv4 和 IPv6 ； 万维网 和 局域网</span></span><br><span class="line"><span class="comment"> *  4.域名： www.baidu.com</span></span><br><span class="line"><span class="comment"> *  5.本地回路地址：127.0.0.1 对应着：localhost</span></span><br><span class="line"><span class="comment"> *  6.如何实例化InetAddress：两个方法:getHostName(String host)、getHostAddress()</span></span><br><span class="line"><span class="comment"> *      两个常用方法：getHostName() / getHostAddress()</span></span><br><span class="line"><span class="comment"> *  7.端口号</span></span><br><span class="line"><span class="comment"> *      要求：不同的进程有不同的端口号</span></span><br><span class="line"><span class="comment"> *      范围：被规定为一个16位的整数 0~65535</span></span><br><span class="line"><span class="comment"> *  8.端口号与IP地址的组合得出一个网络套接字：Socket</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-23 19:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1310</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">inet1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inet1 = InetAddress.getByName(<span class="string">&quot;192.168.10.16&quot;</span>);</span><br><span class="line">            System.out.println(inet1);</span><br><span class="line"></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inet2</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">            System.out.println(inet2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取本机的IP</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inet3</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(inet3);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1311 客户端发送信息给服务器，服务器将数据显示在控制台上</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1311%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%E4%BF%A1%E6%81%AF%E7%BB%99%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B0%86%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%E5%9C%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%8A/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13Net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 实现TCP的网络编程</span></span><br><span class="line"><span class="comment"> * 例子1：客户端发送信息给服务器，服务器将数据显示在控制台上</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-23 19:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1311</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//客户端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">client</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 创建Socket对象，指明服务器端的ip和端口号</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inet</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(inet,<span class="number">8899</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 获取一个输出流，用于输出数据</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            <span class="comment">//3. 写出资源的操作</span></span><br><span class="line">            os.write(<span class="string">&quot;你好，我是客户端mm&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4. 资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span> (os!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">server</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 创建服务器端的ServerSocket，指明自己的端口号</span></span><br><span class="line">            ss = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8899</span>);</span><br><span class="line">            <span class="comment">//2. 调用accept()表示接受来自于客户端的socket</span></span><br><span class="line">            socket = ss.accept();</span><br><span class="line">            <span class="comment">//获取输入流</span></span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不建议这样写，应为可能会有乱码（字符串往byte数组中存）</span></span><br><span class="line"><span class="comment">//        byte[] buffer = new byte[20];</span></span><br><span class="line"><span class="comment">//        int len;</span></span><br><span class="line"><span class="comment">//        while ((len = is.read(buffer))!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            String str = new String(buffer,0,len);</span></span><br><span class="line"><span class="comment">//            System.out.println(str);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">            <span class="comment">//4.读取输入流中的数据</span></span><br><span class="line">            baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取消息发送方</span></span><br><span class="line">            System.out.println(<span class="string">&quot;收到了来自于：&quot;</span> + socket.getInetAddress().getHostAddress() + <span class="string">&quot;数据&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//资源关闭</span></span><br><span class="line">            <span class="keyword">if</span> (baos!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ss!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1312 客户端发送文件给服务器，服务端将文件保存在本地</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1312%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6%E7%BB%99%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%86%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%9C%A8%E6%9C%AC%E5%9C%B0/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13Net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 实现TCP的网络编程</span></span><br><span class="line"><span class="comment"> * 例题2：客户端发送文件给服务器，服务端将文件保存在本地</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-24 18:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1312</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cilent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.</span></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">9090</span>);</span><br><span class="line">            <span class="comment">//2.</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            <span class="comment">//3.</span></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;未标题-1.png&quot;</span>));</span><br><span class="line">            <span class="comment">//4.</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(os!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 还是要用try-catch-finally */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9090</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;getFromclient.jpg&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=is.read(buffer))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1313 客户端发送文件给服务器，服务器保存到本地。并返回“发送成功”给客户端。并关闭相应的连接</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1313%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6%E7%BB%99%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%9D%E5%AD%98%E5%88%B0%E6%9C%AC%E5%9C%B0%E3%80%82%E5%B9%B6%E8%BF%94%E5%9B%9E%E2%80%9C%E5%8F%91%E9%80%81%E6%88%90%E5%8A%9F%E2%80%9D%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%E3%80%82%E5%B9%B6%E5%85%B3%E9%97%AD%E7%9B%B8%E5%BA%94%E7%9A%84%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13Net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 实现TCP的网络编程</span></span><br><span class="line"><span class="comment"> *  * 例题3：从客户端发送文件给服务器，服务器保存到本地。并返回“发送成功”给客户端。</span></span><br><span class="line"><span class="comment"> *  * 并关闭相应的连接。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-24 19:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1313</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cilent</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.</span></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">9090</span>);</span><br><span class="line">            <span class="comment">//2.</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            <span class="comment">//3.</span></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;未标题-1.png&quot;</span>));</span><br><span class="line">            <span class="comment">//4.</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭数据数据的输出</span></span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.接收来自于服务器的数据，并显示到控制台上</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer2 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="type">int</span> len1;</span><br><span class="line">            <span class="keyword">while</span> ((len1 = is.read(buffer2)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer2,<span class="number">0</span>,len1);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6.关闭连接</span></span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(os!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(baos!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 还是要用try-catch-finally */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9090</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;getFromclient2.jpg&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=is.read(buffer))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;你好照片已经收到了&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">        os.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1314 URL</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/1314%20URL/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13Net;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * URL网络编程</span></span><br><span class="line"><span class="comment"> * 1. URl：统一资源定位符，对应着互联网的某一资源地址</span></span><br><span class="line"><span class="comment"> * 2. 格式：</span></span><br><span class="line"><span class="comment"> *      http://localhost:8080/examples/beauty.jpg?username=Tom</span></span><br><span class="line"><span class="comment"> *      协议      主机名  端口号    资源地址            参数列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-24 20:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1314</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        URL url = new URL(&quot;&quot;);</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 常用方法：见截图</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取资源的方法演示见:https://www.bilibili.com/video/BV1Kb411W75N?p=630&amp;spm_id_from=pageDriver</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>UDP协议的网络编程</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/UDP%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter13Net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * UDP协议的网络编程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-24 19:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0314</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sender</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;吃我犹大的世界第一可爱重击&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] data = str.getBytes();</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">inet</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data,<span class="number">0</span>,data.length,inet,<span class="number">9090</span>);</span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiver</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer,<span class="number">0</span>,buffer.length);</span><br><span class="line"></span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十三章 File和IO</category>
      </categories>
  </entry>
  <entry>
    <title>1201 泛型———&gt;jdk 5.0的新增的特性</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0/1201%20%E6%B3%9B%E5%9E%8B%E2%80%94%E2%80%94%E2%80%94jdk%205.0%E7%9A%84%E6%96%B0%E5%A2%9E%E7%9A%84%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型———&gt;jdk 5.0的新增的特性</span></span><br><span class="line"><span class="comment"> * 1. jdk 5.0新增的特性</span></span><br><span class="line"><span class="comment"> * 2.在集合中使用泛型：</span></span><br><span class="line"><span class="comment"> *      总结：</span></span><br><span class="line"><span class="comment"> *          1）集合接口或集合类在jdk5.0时都修改为带泛型的结构。（所以我们使用的时候才能用&lt;类型&gt;来限定）</span></span><br><span class="line"><span class="comment"> *          2）在实例化集合类时，可以指明具体的泛型类型</span></span><br><span class="line"><span class="comment"> *          3）指明完以后，在集合类或接口中凡是定义类或接口时，内部结构使用到类的泛型的位置（比如：方法、构造器、属性等）都指定为实例化时指定的泛型类型</span></span><br><span class="line"><span class="comment"> *              比如：add(E e) ——&gt; 实例化以后：add(Integer e)</span></span><br><span class="line"><span class="comment"> *          4）注意点：泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换。</span></span><br><span class="line"><span class="comment"> *          5）如果实例化时没有指明泛型的类型，默认类型为java.lang.Object类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.如何自定义泛型结构：泛型类、泛型接口；泛型方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-17 16:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1201</span> &#123;</span><br><span class="line">    <span class="comment">//在集合中使用泛型之前的情况</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//需求：存放学生的成绩</span></span><br><span class="line">        list.add(<span class="number">78</span>);</span><br><span class="line">        list.add(<span class="number">89</span>);</span><br><span class="line">        list.add(<span class="number">45</span>);</span><br><span class="line">        list.add(<span class="number">66</span>);</span><br><span class="line">        <span class="comment">//问题一：类型不安全</span></span><br><span class="line"><span class="comment">//        list.add(&quot;Tom&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Object score:list)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stuScore</span> <span class="operator">=</span> (Integer)score;</span><br><span class="line">            System.out.println(stuScore);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在集合中使用泛型的情况</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//泛型中好像不能用基本数据类型</span></span><br><span class="line"><span class="comment">//        ArrayList&lt;int&gt; list = new ArrayList&lt;int&gt;();</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">12</span>);</span><br><span class="line">        list.add(<span class="number">78</span>);</span><br><span class="line">        list.add(<span class="number">89</span>);</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        list.add(<span class="number">56</span>);</span><br><span class="line">        <span class="comment">//编译时，就会进行类型检查，保证数据的安全</span></span><br><span class="line"><span class="comment">//        list.add(&quot;asd&quot;);</span></span><br><span class="line">        <span class="keyword">for</span> (Integer score: list)&#123;</span><br><span class="line">            <span class="comment">//避免了强制类型转换(因为强转是很容易出错的)</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">stuScore</span> <span class="operator">=</span> score;</span><br><span class="line">            System.out.println(stuScore);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stuScore</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(stuScore);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;Tom&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Jerry&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Jack&quot;</span>,<span class="number">66</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//泛型的嵌套</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String,Integer&gt;&gt; iterator = entrySet.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String,Integer&gt; e = iterator.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;——&gt;&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十二章 泛型</category>
      </categories>
  </entry>
  <entry>
    <title>1202 自定义泛型类、泛型接口、泛型方法</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0/1202%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%9B%E5%9E%8B%E7%B1%BB%E3%80%81%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3%E3%80%81%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 如何自定义泛型结构：泛型类、泛型接口 ：泛型方法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 自定义泛型类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注：子类对于父类的泛型：全部保留、部分保留、不保留</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-17 18:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1202</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果定义了泛型类，实例化没有指明类的泛型，则认为此泛型类型为Object类型</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setOrderT(<span class="number">123</span>);</span><br><span class="line">        order.setOrderT(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//建议：实例化时指明类的泛型</span></span><br><span class="line">        Order&lt;String&gt; order1 = <span class="keyword">new</span> <span class="title class_">Order</span>&lt;String&gt;(<span class="string">&quot;orderAA&quot;</span>,<span class="number">1001</span>,<span class="string">&quot;这是一个属性A&quot;</span>);</span><br><span class="line">        System.out.println(order1.getOrderT());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SubOrder</span> <span class="variable">sub1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubOrder</span>();</span><br><span class="line">        <span class="comment">//由于子类在继承带泛型的父类时，指明了泛型类型。则实例化子类对象时，不再需要指明泛型类型。</span></span><br><span class="line">        sub1.setOrderT(<span class="number">1122</span>);</span><br><span class="line"></span><br><span class="line">        SubOrder1&lt;String&gt; sub2 = <span class="keyword">new</span> <span class="title class_">SubOrder1</span>&lt;&gt;();</span><br><span class="line">        sub2.setOrderT(<span class="string">&quot;order...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//泛型不同的引用不能互相赋值</span></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="literal">null</span>;</span><br><span class="line">        ArrayList&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//        list1 = list2;//编译报错</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试泛型方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        Order&lt;String&gt; order = <span class="keyword">new</span> <span class="title class_">Order</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="comment">//泛型方法在调用时，指明泛型参数的类型</span></span><br><span class="line">        List&lt;Integer&gt; list = order.copyFromArrayToList(arr);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义泛型类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>&lt;T&gt;&#123;</span><br><span class="line">    String orderName;</span><br><span class="line">    <span class="type">int</span> orderId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类的内部结构可以使用类的泛型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    T orderT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 想造T类型的数组</span></span><br><span class="line">       <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        T[] arr = new T[10];//me：new的对象必须的指明的，emmm我其实也不知怎么理解(⊙_⊙?)</span></span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line">        T[] arr = (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10</span>];<span class="comment">//等往里边放对象如：arr[0]这就不要再arr[0] = new Object();了，这样会强转报错的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">(String orderName,<span class="type">int</span> orderId,T orderT)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.orderName = orderName;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.orderT = orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getOrderT</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderT</span><span class="params">(T orderT)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderT = orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Order&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;orderName=&#x27;&quot;</span> + orderName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, orderId=&quot;</span> + orderId +</span><br><span class="line">                <span class="string">&quot;, orderT=&quot;</span> + orderT +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法中不能使用类的泛型 (me:因为静态结构的创建早于对象)</span></span><br><span class="line"><span class="comment">//    public static void show()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(T orderT)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(orderT);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void show()&#123;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;catch (T t)&#123;//编译不同过</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//泛型方法：在方法中出现了泛型的结构，泛型参数与类泛型参数没有任何关系</span></span><br><span class="line">    <span class="comment">//换句话说，泛型方法所属的类是不是泛型类都没有关系。</span></span><br><span class="line">    <span class="comment">//泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  &lt;E&gt; List&lt;E&gt; <span class="title function_">copyFromArrayToList</span><span class="params">(E[] arr)</span>&#123;<span class="comment">//List本身就是一个泛型类，List&lt;E&gt;这是用E来指定List的泛型</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span>(E e:arr)&#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常类不能声明为泛型类</span></span><br><span class="line"><span class="comment">//class MyException&lt;T&gt; extends Exception&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十二章 泛型</category>
      </categories>
  </entry>
  <entry>
    <title>1203 泛型在继承方面的体现和通配符</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0/1203%20%E6%B3%9B%E5%9E%8B%E5%9C%A8%E7%BB%A7%E6%89%BF%E6%96%B9%E9%9D%A2%E7%9A%84%E4%BD%93%E7%8E%B0%E5%92%8C%E9%80%9A%E9%85%8D%E7%AC%A6/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.泛型在继承方面的体现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.通配符</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-18 12:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1203</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 1.泛型在继承方面的体现:</span></span><br><span class="line"><span class="comment">    *   虽然类A是类B的父类，但是G&lt;A&gt;和G&lt;B&gt;二者不具备字子父类关系，二者是并列关系</span></span><br><span class="line"><span class="comment">    *       补充：类A是类B的父类，那么A&lt;G&gt;和B&lt;G&gt;具有子父类关系，可以体现多态</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        obj = str;</span><br><span class="line">        Object[] arr1 = <span class="literal">null</span>;</span><br><span class="line">        String[] arr2 = <span class="literal">null</span>;</span><br><span class="line">        arr1 = arr2;</span><br><span class="line"></span><br><span class="line">        List&lt;Object&gt; list1 = <span class="literal">null</span>;</span><br><span class="line">        List&lt;String&gt; list2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此时list1和list2不具有子父类关系</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        list1 = list2;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        Date date = new Date();</span></span><br><span class="line"><span class="comment">//        str = date;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 说明一下为什么list1 = list2;编译不通过</span></span><br><span class="line"><span class="comment">        * 反证法：假设编译通过</span></span><br><span class="line"><span class="comment">        * list1.add(123);就是可以的（因为是Object就可以），这将导致混入非String数据，那设置泛型就没有意义了</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要写两个方法</span></span><br><span class="line">        show(list1);</span><br><span class="line">        show1(list2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">(List&lt;String&gt; list)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(List&lt;Object&gt; list)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 2.通配符的使用</span></span><br><span class="line"><span class="comment">    * 通配符：?</span></span><br><span class="line"><span class="comment">    *   类A是类B的父类，G&lt;A&gt;和G&lt;B&gt;是没有关系的，二者共同的父类时：G&lt;?&gt;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Object&gt; list1 = <span class="literal">null</span>;</span><br><span class="line">        List&lt;String&gt; list2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;?&gt; list = <span class="literal">null</span>;</span><br><span class="line">        list = list1;</span><br><span class="line">        list = list2;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译通过的↓</span></span><br><span class="line"><span class="comment">//        print(list1);</span></span><br><span class="line"><span class="comment">//        print(list2);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list3.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        list3.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        list3.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加：对于List&lt;?&gt;就不能向其内部添加数据</span></span><br><span class="line">        <span class="comment">//除了添加null之外</span></span><br><span class="line"><span class="comment">//        list.add(&quot;AA&quot;);//编译不通过</span></span><br><span class="line">        list3.add(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取（读取）：允许读取数据，读取数据类型为Object</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> list3.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(List&lt;?&gt; list)</span>&#123;</span><br><span class="line">        Iterator&lt;?&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 有限制条件的通配符的使用</span></span><br><span class="line"><span class="comment">    *   ? extends Person:</span></span><br><span class="line"><span class="comment">    *       G&lt;? extend A&gt;可以作为G&lt;A&gt;或G&lt;B&gt;的父类，其中B是A的子类</span></span><br><span class="line"><span class="comment">    *   ? super Person:</span></span><br><span class="line"><span class="comment">    *       G&lt;? extend A&gt;可以作为G&lt;A&gt;或G&lt;B&gt;的父类，其中B是A的父类</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; list1 = <span class="literal">null</span>;<span class="comment">//看成 ≤</span></span><br><span class="line">        List&lt;? <span class="built_in">super</span> Person&gt; list2 = <span class="literal">null</span>;<span class="comment">//看成 ≥</span></span><br><span class="line">        List&lt;Student&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">        List&lt;Person&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">        List&lt;Object&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">        list1 = list3;</span><br><span class="line">        list1 = list4;</span><br><span class="line"><span class="comment">//        list1 = list5;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        list2 = list3;</span></span><br><span class="line">        list2 = list4;</span><br><span class="line">        list2 = list5;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取数据</span></span><br><span class="line">        list1 = list4;</span><br><span class="line">        Person p= list1.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        Student s = list1.get(0);</span></span><br><span class="line"></span><br><span class="line">        list2 = list4;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> list2.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        Person obj2 = list2.get(0);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入数据</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        list1.add(new Student());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line">        list2.add(<span class="keyword">new</span> <span class="title class_">Person</span>());</span><br><span class="line">        list2.add(<span class="keyword">new</span> <span class="title class_">Student</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十二章 泛型</category>
      </categories>
  </entry>
  <entry>
    <title>了解ClassLoader</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%E5%8F%8D%E5%B0%84/%E4%BA%86%E8%A7%A3ClassLoader/</url>
    <content><![CDATA[<p>类加载器<img src="https://cdn.jsdelivr.net/gh/Dopphu/PicX-images@main/20210425/%E4%BA%86%E8%A7%A3ClassLoader.5mrqrim5ejs0.jpg" alt="了解ClassLoader" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.jsdelivr.net/gh/Dopphu/PicX-images@main/20210425/%E4%BA%86%E8%A7%A3ClassLoader.5mrqrim5ejs0.jpg" class="lozad post-image"></p>
]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十四章 反射</category>
      </categories>
  </entry>
  <entry>
    <title>1001 枚举类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E7%AB%A0/1001%20%E6%9E%9A%E4%B8%BE%E7%B1%BB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter10;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 一、枚举类的使用</span></span><br><span class="line"><span class="comment"> * 1.枚举类的理解：类的对象只有有限个，确定的，我们就称此类为枚举类</span></span><br><span class="line"><span class="comment"> * 2.当需要定义一组常量时，强烈建议使用枚举类</span></span><br><span class="line"><span class="comment"> * 3.如果枚举类中只有一个对象，则可以作为单例模式的实现方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 二、如何定义枚举类</span></span><br><span class="line"><span class="comment"> * 方式一：jdk5.0之前，自定义枚举类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 方式二：jdk5.0时可以使用enum关键字定义枚举类</span></span><br><span class="line"><span class="comment"> *          说明：定义的枚举类默认继承于java.lang.Enum类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 三、Enum类的常用方法</span></span><br><span class="line"><span class="comment"> *          values() 方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值</span></span><br><span class="line"><span class="comment"> *          valueOf(String str)：可以把一个字符串转换为对应的的枚举类对象。要求字符串必须是枚举类对象名</span></span><br><span class="line"><span class="comment"> *          toString()：返回当前枚举类对象常量的名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 四、使用enum关键字定义的枚举类实现接口的情况</span></span><br><span class="line"><span class="comment"> *      情况一：实现接口，在enum类中实现抽象方法</span></span><br><span class="line"><span class="comment"> *      情况二：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-12 18:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">spring</span> <span class="operator">=</span> Season.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*********分界线*********&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Season1</span> <span class="variable">summer</span> <span class="operator">=</span> Season1.SUMMER;</span><br><span class="line">        <span class="comment">//toString()方法</span></span><br><span class="line">        System.out.println(summer.toString());</span><br><span class="line">        System.out.println(Season1.class.getSuperclass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//values()</span></span><br><span class="line">        Season1[] values = Season1.values();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">            System.out.println(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread.State[] values1 = Thread.State.values();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;values1.length; i++)&#123;</span><br><span class="line">            System.out.println(values1[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//valueOf(String objName)：根据提供的objName返回枚举类中对象名是objName的对象</span></span><br><span class="line">        <span class="type">Season1</span> <span class="variable">winter</span> <span class="operator">=</span> Season1.valueOf(<span class="string">&quot;WINTER&quot;</span>);</span><br><span class="line">        <span class="comment">//如果没有objName的枚举类对象，则抛异常：IllegalArgumentException</span></span><br><span class="line"><span class="comment">//        Season1 winter1 = Season1.valueOf(&quot;WINTERasd&quot;);</span></span><br><span class="line">        System.out.println(winter);</span><br><span class="line"><span class="comment">//        System.out.println(winter1);</span></span><br><span class="line"></span><br><span class="line">        summer.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span>&#123;</span><br><span class="line">    <span class="comment">//声明Season对象的属性,private final 修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.私有化类的构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String seasonName, String seasonDesc)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">        <span class="built_in">this</span>.seasonName = seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供当前枚举类的多个对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冬日凌冽&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.其他诉求1：获取枚举类对象的属性</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.其他诉求2：提供toString()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用enum关键字来定义枚举类</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season1</span> <span class="keyword">implements</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用“,”隔开，末尾对象“;”结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;春天是不灭之握&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;夏天我有小秘密，就不告诉你&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秋天里没有爱情&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冬雷震震&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;大约在冬季&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.声明Season对象的属性：private final 修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.私有化类的构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season1</span><span class="params">(String seasonName, String seasonDesc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="built_in">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他诉求1：获取枚举类对象的属性</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //其他诉求2：提供toString()//enum先不重写,有需要再重写</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public String toString() &#123;</span></span><br><span class="line"><span class="comment">//        return &quot;Season1&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;seasonName=&#x27;&quot; + seasonName + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment">//                &quot;, seasonDesc=&#x27;&quot; + seasonDesc + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment">//                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况一</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void show() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;这是一个季节&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十章 枚举类和注解</category>
      </categories>
  </entry>
  <entry>
    <title>1002 注解的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%8D%81%E7%AB%A0/1002%20%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="keyword">package</span> chapter10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.注解的使用</span></span><br><span class="line"><span class="comment"> *  理解 Annotation 注解</span></span><br><span class="line"><span class="comment"> * jdk 5.0 新增的内容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  在javaSE中，注解的使用目的比较简单，例如标记已经过时的功能，忽略警告等。在JavaEE/Android开发中</span></span><br><span class="line"><span class="comment"> *  注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中遗留的繁冗的代码</span></span><br><span class="line"><span class="comment"> *  和XML配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.Annotation 的使用示例</span></span><br><span class="line"><span class="comment"> * 示例一：生成文档相关的注解</span></span><br><span class="line"><span class="comment"> * 实例二：编译时进行格式检查（JDK内置的三个基本注解）</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@Override</span>：限定重写父类方法，该注解只能用于方法</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@Deprecated</span>：用于表示所修饰的元素（类、方法等）已过时。通常是因为所修饰的结构危险或存在更好的选择</span></span><br><span class="line"><span class="comment"> *      英 [ˈdeprikeitid] v. 不赞成, 反对( deprecate的过去式和过去分词 )</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@SuppressWarnings</span>：抑制编译器警告</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 示例三：跟踪代码依赖性，实现替代配置文件的功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.如何自定义注解：参照SuppressWarnings定义</span></span><br><span class="line"><span class="comment"> *      1）注解声明为 <span class="doctag">@interface</span></span></span><br><span class="line"><span class="comment"> *      2）内部定义成员，通常使用value表示</span></span><br><span class="line"><span class="comment"> *      3）可以指定成员的默认值，使用default定义</span></span><br><span class="line"><span class="comment"> *      4）如果自定义注解没有成员，表明是一个标识作用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果注解有成员，在使用注释时，需要指定成员的值</span></span><br><span class="line"><span class="comment"> * 自定义注解必须配上注解的信息处理流程（使用反射）才有意义</span></span><br><span class="line"><span class="comment"> * 自定义注解通常都会指明两个元注解：Retention、Target</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4. jdk提供的四个元注解</span></span><br><span class="line"><span class="comment"> *  元注解：对现有的注解进行说明的注解</span></span><br><span class="line"><span class="comment"> *      &gt; Retention：指定所修饰的 Annotation 的声明周期；SOURCE/CLASS（默认行为）/RUNTIME</span></span><br><span class="line"><span class="comment"> *          只有声明为RUNTIME生命周期的注解，才能反射获取。</span></span><br><span class="line"><span class="comment"> *      &gt; Target：用于指定被修饰的 Annotation 能用于修饰哪些程序元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      ***以下出现频率较低***</span></span><br><span class="line"><span class="comment"> *      &gt; Documented：表示所修饰的注解在被javadoc解析时，保留下来。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      &gt; Inherited：被他修饰的Annotation将具有继承性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 5.通过反射获取注解信息——到反射内容时系统讲解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 6. jdk 8 中注解的新特性：可重复注解、类型注解</span></span><br><span class="line"><span class="comment"> *      6.1可重复注解</span></span><br><span class="line"><span class="comment"> *          e.g.</span></span><br><span class="line"><span class="comment"> *              <span class="doctag">@MyAnnotation</span>(&quot;111&quot;)</span></span><br><span class="line"><span class="comment"> *              <span class="doctag">@MyAnnotation</span>(&quot;222&quot;)</span></span><br><span class="line"><span class="comment"> *          1) 在MyAnnotation上声明<span class="doctag">@Repeatable</span>，成员值为MyAnnotations.class</span></span><br><span class="line"><span class="comment"> *          2) MyAnnotation的Target和Retention 与 MyAnnotations相同</span></span><br><span class="line"><span class="comment"> *      6.2类型注解</span></span><br><span class="line"><span class="comment"> *          ElementType.TYPE_PARAMETER 表示该注解能写在变量类型的声明语句中（如：泛型声明）</span></span><br><span class="line"><span class="comment"> *          ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dopphu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-12 21:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        p.walk();</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2020</span>,<span class="number">10</span>,<span class="number">11</span>);</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span><span class="comment">//在Eclipse中的警告效果更加明显，括号里是可以写多个值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(num);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//反射代码</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        Annotation[] annotations = clazz.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; annotations.length; i++)&#123;</span><br><span class="line">            System.out.println(annotations[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation(value=&quot;123&quot;)</span></span><br><span class="line"><span class="meta">@MyAnnotation(value=&quot;123444&quot;)</span></span><br><span class="line"><span class="comment">//jdk 8 之前的写法</span></span><br><span class="line"><span class="comment">//@MyAnnotations(&#123;@MyAnnotation(value=&quot;123&quot;),@MyAnnotation(value=&quot;123444&quot;)&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @MyAnnotation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Info0</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//可以在编译的时候进行校验，看你这个是不是重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;展示一下&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Info0</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Inherited</span></span><br><span class="line"><span class="meta">@Repeatable(MyAnnotations.class)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;TYPE/*类*/, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE,TYPE_PARAMETER,TYPE_USE&#125;)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;TYPE/*类*/, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE&#125;)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotations&#123;</span><br><span class="line">    MyAnnotation[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Generic</span>&lt;<span class="meta">@MyAnnotation</span> T&gt;&#123;<span class="comment">//在这里修饰要在MyAnnotation的@TARGET 中加上TYPE_PARAMETER</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//在这里修饰要在MyAnnotation的@TARGET 中加上TYPE_USE</span></span><br><span class="line">        ArrayList&lt;<span class="meta">@MyAnnotation</span> String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="meta">@MyAnnotation</span> <span class="type">int</span>) <span class="number">10L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第十章 枚举类和注解</category>
      </categories>
  </entry>
  <entry>
    <title>00 类和对象 初见</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/00%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%20%E5%88%9D%E8%A7%81/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">j * 一、设计类，其实就是设计类的成员</span></span><br><span class="line"><span class="comment"> * 属性 = 成员变量 = field = 域、字段</span></span><br><span class="line"><span class="comment"> * 方法 = 成员方法 = 函数 =method</span></span><br><span class="line"><span class="comment"> * 创建类的对象 = 类的实例化 = 实例化</span></span><br><span class="line"><span class="comment"> * 二、类和对象的使用（面向对象思想落地的实现）</span></span><br><span class="line"><span class="comment"> * 1.创建类，设计类的成员</span></span><br><span class="line"><span class="comment"> * 2.创建类的对象</span></span><br><span class="line"><span class="comment"> * 3.通过“对象.属性”、“对象.方法”调用对象的结构</span></span><br><span class="line"><span class="comment"> * 三、如果创建了一个类的多个对象，则每个对象都独立拥有一套类的属性。（非static）</span></span><br><span class="line"><span class="comment"> * 意味着，如果我们修改了一个对象的属性a，则不影响其他对象的属性a的值</span></span><br><span class="line"><span class="comment"> * 四、对象的内存解析https://www.bilibili.com/video/BV1Kb411W75N?p=183</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0400</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//创建Person类的对象</span></span><br><span class="line">		<span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">		<span class="comment">//调用类的属性、方法</span></span><br><span class="line">		p1.name = <span class="string">&quot;Dopp&quot;</span>;</span><br><span class="line">		System.out.println(p1.name);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//调用方法</span></span><br><span class="line">		p1.eat();</span><br><span class="line">		</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">		System.out.println(p2.name);<span class="comment">//null</span></span><br><span class="line">		</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> p1;</span><br><span class="line">		System.out.println(p3.name);<span class="comment">//Dopp</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//似乎这么做不会影响实参的值</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">		<span class="type">Test0400</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test0400</span>();</span><br><span class="line">		t.test(a);</span><br><span class="line"><span class="comment">//		t.useArr(&#123;1,2,3&#125;);//这么做并不可以</span></span><br><span class="line">		System.out.println(a);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">		a = <span class="number">12</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useArr</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	String name;</span><br><span class="line">	<span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">	<span class="type">boolean</span> isMale;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;人可以吃饭&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;人可以睡觉&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>01 类中属性的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/01%20%E7%B1%BB%E4%B8%AD%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类中属性的使用</span></span><br><span class="line"><span class="comment"> * 属性（成员变量）	VS	局部变量</span></span><br><span class="line"><span class="comment"> * 1.相同点</span></span><br><span class="line"><span class="comment"> * 		1.1定义变量的格式：数据类型	变量名 = 变量值;</span></span><br><span class="line"><span class="comment"> * 		1.2先声明，后使用</span></span><br><span class="line"><span class="comment"> * 		1.3变量都有其相对应的作用域</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.不同点</span></span><br><span class="line"><span class="comment"> * 		2.1在类中声明的位置不同</span></span><br><span class="line"><span class="comment"> * 		属性：直接定义在类的一对&#123;&#125;内</span></span><br><span class="line"><span class="comment"> * 		局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</span></span><br><span class="line"><span class="comment"> * 		2.2关于权限修饰符的不同</span></span><br><span class="line"><span class="comment"> * 		属性：可以在声明属性时，指明其权限，使用权限修饰符。</span></span><br><span class="line"><span class="comment"> * 		常用的权限修饰符：private、public、缺省、protected ——&gt;封装性</span></span><br><span class="line"><span class="comment"> * 		2.3默认初始化值的情况</span></span><br><span class="line"><span class="comment"> * 		属性：类的属性根据其类型，都有默认初始化值</span></span><br><span class="line"><span class="comment"> * 			整型（byte、short、int、long）：0</span></span><br><span class="line"><span class="comment"> * 			浮点型（float、double）：0.0</span></span><br><span class="line"><span class="comment"> * 			字符型（char）：0或&#x27;\u0000&#x27;</span></span><br><span class="line"><span class="comment"> * 			布尔型（boolean）：false</span></span><br><span class="line"><span class="comment"> * 			应用数据类型（类、数组、接口）：null</span></span><br><span class="line"><span class="comment"> * 		</span></span><br><span class="line"><span class="comment"> * 		局部变量：没有默认初始化值</span></span><br><span class="line"><span class="comment"> * 			意味着，我们在调用局部变量之前，一定要显式赋值</span></span><br><span class="line"><span class="comment"> * 			特别的，形参在调用时，赋值即可</span></span><br><span class="line"><span class="comment"> * 		2.4在内存中加载的位置不同</span></span><br><span class="line"><span class="comment"> * 		属性：加载到堆空间中（非static）</span></span><br><span class="line"><span class="comment"> * 		局部变量：加载到栈空间</span></span><br><span class="line"><span class="comment"> */</span>	</span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0401</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">User</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">		demo.talk(<span class="string">&quot;普通话&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">talk</span><span class="params">(String language)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;我们使用&quot;</span>+language+<span class="string">&quot;进行交流。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">think</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">int</span> time;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>02 类中方法的声明和使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/02%20%E7%B1%BB%E4%B8%AD%E6%96%B9%E6%B3%95%E7%9A%84%E5%A3%B0%E6%98%8E%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类中方法的声明和使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 方法：描述类应该具有的功能</span></span><br><span class="line"><span class="comment"> * 比如：Math类：sqrt()\random()\...</span></span><br><span class="line"><span class="comment"> * 	   Scanner类：nextXxx()...</span></span><br><span class="line"><span class="comment"> * 方法的声明：权限修饰符 返回值类型 方法名(形参列表)&#123;</span></span><br><span class="line"><span class="comment"> * 				方法体</span></span><br><span class="line"><span class="comment"> * 			&#125;</span></span><br><span class="line"><span class="comment"> * 		注意：static、final、abstract 来修饰的方法，后面再讲</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 		1.关于权限修饰符</span></span><br><span class="line"><span class="comment"> * 			java规定的4种权限修饰符：private、public、缺省、protected</span></span><br><span class="line"><span class="comment"> * 		2.返回值类型：有返回值 VS 无返回值</span></span><br><span class="line"><span class="comment"> * 			1）如果方法有返回值，则必须在方法声明时，指定返回值类型。同时方法中需要使用</span></span><br><span class="line"><span class="comment"> * 			return关键字来返回指定类型的变量或常量</span></span><br><span class="line"><span class="comment"> * 			2）如果方法没有返回值，则方法声明时，使用void来表示。通常，没有返回值的方法就不使用</span></span><br><span class="line"><span class="comment"> * 			return了，但是，如果使用的话，只能“return;”表示结束此方法的意思。</span></span><br><span class="line"><span class="comment"> * 		3.方法名：见名知意，属于标识符，遵循其规范</span></span><br><span class="line"><span class="comment"> * 		4.形参列表：形参0个或多个</span></span><br><span class="line"><span class="comment"> * 		5.方法体：方法功能的体现</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * return关键字的使用</span></span><br><span class="line"><span class="comment"> * 		1.使用范围：使用在方法体中</span></span><br><span class="line"><span class="comment"> * 		2.作用：</span></span><br><span class="line"><span class="comment"> * 			（1）结束方法</span></span><br><span class="line"><span class="comment"> * 			（2）针对有返回值类型的方法，使用“return 数据”方法返回所要的数据</span></span><br><span class="line"><span class="comment"> * 		3.注意点：return 关键字后不可以声明执行语句</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 方法的使用：方法中可以调用其它方法，方法不能嵌套定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0402</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Customer</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">		c1.name = <span class="string">&quot;Cats&quot;</span>;</span><br><span class="line">		System.out.println(c1.getNation(<span class="string">&quot;China&quot;</span>));</span><br><span class="line">		c1.test();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span>&#123;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	String name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">boolean</span> isMale;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;客户吃饭&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> hour)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;休息了&quot;</span>+hour+<span class="string">&quot;小时&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getNation</span><span class="params">(String nation)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;我的国际是&quot;</span>+nation;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这算是缺省么&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>03 简单Circle类</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/03%20%E7%AE%80%E5%8D%95Circle%E7%B1%BB/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设计Circle类，计算圆的面积</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0403</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Circle</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">		c1.radius = <span class="number">2</span>;</span><br><span class="line">		System.out.println(c1.Area());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//圆</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="type">double</span> radius;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//求圆的面积</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">Area</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> Math.PI*radius*radius;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>04 对象数组练习</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/04%20%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象数组练习：</span></span><br><span class="line"><span class="comment"> * 		定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)。</span></span><br><span class="line"><span class="comment"> * 	创建20个学生对象，学号为1到20，年级和成绩都由随机数确定</span></span><br><span class="line"><span class="comment"> * 	问题1：打印出3年级（state值为3）的学生信息</span></span><br><span class="line"><span class="comment"> * 	问题2：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 提示：随机数Math.random() 返回值类型double；四舍五入取整Math.round(double d),返回值类型long</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0404</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">		Student students[] = <span class="keyword">new</span> <span class="title class_">Student</span>[count];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;students.length; i++) &#123;</span><br><span class="line">			<span class="comment">//我第一次就没有加这句，警钟长鸣啊</span></span><br><span class="line">			students[i] = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">			</span><br><span class="line">			students[i].number = i+<span class="number">1</span>;</span><br><span class="line">			students[i].state = (<span class="type">int</span>)(Math.random()*<span class="number">4</span>+<span class="number">1</span>);</span><br><span class="line">			students[i].score = (<span class="type">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//冒泡排序</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;students.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;(students.length-i-<span class="number">1</span>); j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(students[j].score&gt;students[j+<span class="number">1</span>].score) &#123;</span><br><span class="line">					<span class="type">Student</span> <span class="variable">temp</span> <span class="operator">=</span> students[j];</span><br><span class="line">					students[j] = students[j+<span class="number">1</span>];</span><br><span class="line">					students[j+<span class="number">1</span>] = temp;</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">Test0404</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test0404</span>();</span><br><span class="line">		demo.print(students);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">//遍历输出</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> stu</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Student[] stu)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;stu.length; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;学号：&quot;</span>+stu[i].number+<span class="string">&quot;\t年级：&quot;</span>+stu[i].state+<span class="string">&quot;\t成绩&quot;</span>+stu[i].score+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Student类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">	<span class="type">int</span> score;</span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="type">int</span> state;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>05 万事万物皆对象and内存解析and匿名对象的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/05%20%E4%B8%87%E4%BA%8B%E4%B8%87%E7%89%A9%E7%9A%86%E5%AF%B9%E8%B1%A1and%E5%86%85%E5%AD%98%E8%A7%A3%E6%9E%90and%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、理解万事万物皆对象</span></span><br><span class="line"><span class="comment"> * 1.在JAVA语言范畴中，我们都将功能结构等封装到类中，通过类的实例化，来调用具体的功能结构</span></span><br><span class="line"><span class="comment"> * 		&gt;Scanenr、String等</span></span><br><span class="line"><span class="comment"> * 		&gt;文件：File</span></span><br><span class="line"><span class="comment"> * 		&gt;网络资源：URL</span></span><br><span class="line"><span class="comment"> * 2.涉及到Java语言与前端HTML、后端数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。</span></span><br><span class="line"><span class="comment"> * 二、内存解析的说明</span></span><br><span class="line"><span class="comment"> * 	 引用类型的变量，只可能存储两类值：null或地址</span></span><br><span class="line"><span class="comment"> * 三、匿名对象的使用</span></span><br><span class="line"><span class="comment"> * 	1.我们创建的对象没有显式赋给一个变量名，即为匿名对象</span></span><br><span class="line"><span class="comment"> * 	2.特征：匿名对象只能调用一次</span></span><br><span class="line"><span class="comment"> *  3.使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0405</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Phone</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">		System.out.println(p);</span><br><span class="line">		</span><br><span class="line">		p.sendEmail();</span><br><span class="line">		p.playGame();</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//匿名对象</span></span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Phone</span>().sendEmail();</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Phone</span>().playGame();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//匿名对象的使用</span></span><br><span class="line">		<span class="type">PhoneMall</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhoneMall</span>();</span><br><span class="line">		demo.show(p);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneMall</span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * Description:</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> p</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(Phone p)</span> &#123;</span><br><span class="line">		p.playGame();</span><br><span class="line">		p.sendEmail();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">	<span class="type">double</span> price;<span class="comment">//价格</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;发送邮件&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playGame</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;打游戏&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

<p>内存解析:</p>
<p><img src="https://cdn.jsdelivr.net/gh/Dopphu/PicX-images@main/20210425/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E8%A7%A3%E6%9E%90.46stu5nofh00.jpg" alt="对象的内存解析" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.jsdelivr.net/gh/Dopphu/PicX-images@main/20210425/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E8%A7%A3%E6%9E%90.46stu5nofh00.jpg" class="lozad post-image"></p>
]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>06 方法的重载(overload)</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/06%20%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD(overload)/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法的重载(overload) </span></span><br><span class="line"><span class="comment"> * 1.定义：在同一个类中，允许存在一个以上的重名方法，只要它们的参数个数或类型不同即可</span></span><br><span class="line"><span class="comment"> * 2.举例</span></span><br><span class="line"><span class="comment"> * 		Arrays类中重载的sort() / binarySearch()</span></span><br><span class="line"><span class="comment"> * 3.重载和方法权限修饰符、返回值类型、形参变量名、方法体都没有关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0406</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">OverLoadTest</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OverLoadTest</span>();</span><br><span class="line">		demo.test1();</span><br><span class="line">		demo.test1(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OverLoadTest</span>&#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;test1 no params&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;test1 with 1 int param&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>07 JDK5允许可变个数参数</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/07%20JDK5%E5%85%81%E8%AE%B8%E5%8F%AF%E5%8F%98%E4%B8%AA%E6%95%B0%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK5.0 允许可变个数参数(可以的话，优先调用固定个数的)</span></span><br><span class="line"><span class="comment"> * 1.调用可变个数形参方法时，传入的参数可以是0个、1个、2个...</span></span><br><span class="line"><span class="comment"> * 2.可变个数形参的方法中与本类方法名相同，形参不同的方法之间构成重载</span></span><br><span class="line"><span class="comment"> * 3.可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载（二者不能共存，新特性之前就是用数组参数来实现的）</span></span><br><span class="line"><span class="comment"> * 4.可变个数的形参在方法的形参中必须声明在末尾</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0407JDk5Extra</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Test0407JDk5Extra</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test0407JDk5Extra</span>();</span><br><span class="line">		demo.show(<span class="string">&quot;123&quot;</span>,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String ...strs)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;show(Stirng)&quot;</span>+strs[<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * Description:</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String str)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;show(Stirng...)&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//认为与可变一样，不能共存</span></span><br><span class="line"><span class="comment">//	public void show(String [] a) &#123;</span></span><br><span class="line"><span class="comment">//		System.out.println(&quot;show(Stirng...)&quot;);</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>08 (参数传递)关于变量的复制</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/08%20(%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92)%E5%85%B3%E4%BA%8E%E5%8F%98%E9%87%8F%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于变量的赋值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 	如果变量是基本数据类型，此时赋值的是变量所保存的数据值</span></span><br><span class="line"><span class="comment"> * 	如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 方法形参的传递机制：</span></span><br><span class="line"><span class="comment"> * 		值传递机制：如果参数是基本数据类型，此时实参赋给形参的是实参真是储存的数据值。</span></span><br><span class="line"><span class="comment"> * 		</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0408</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Data</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data</span>();</span><br><span class="line">		</span><br><span class="line">		data.m = <span class="number">10</span>;</span><br><span class="line">		data.n = <span class="number">999</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;m = &quot;</span>+data.m +<span class="string">&quot;;n = &quot;</span>+data.n);</span><br><span class="line">		swap(data);</span><br><span class="line">		System.out.println(<span class="string">&quot;m = &quot;</span>+data.m +<span class="string">&quot;;n = &quot;</span>+data.n);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//给数组换的话可以往里边传索引（下标）</span></span><br><span class="line">	<span class="comment">//这样实现值交换</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Data d)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> d.m;</span><br><span class="line">		d.m=d.n;</span><br><span class="line">		d.n=temp;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span>&#123;</span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>10 啥也不写就是缺省</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/10%20%E5%95%A5%E4%B9%9F%E4%B8%8D%E5%86%99%E5%B0%B1%E6%98%AF%E7%BC%BA%E7%9C%81/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0410Class</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> orderP;</span><br><span class="line">	<span class="type">int</span> orderQ;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">showQ</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;缺省&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre>

<p>关于权限修饰符:</p>
<p><img src="https://cdn.jsdelivr.net/gh/Dopphu/PicX-images@main/20210425/4%E7%A7%8D%E6%9D%83%E9%99%90.l70hivn1scg.jpg" alt="4种权限" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.jsdelivr.net/gh/Dopphu/PicX-images@main/20210425/4%E7%A7%8D%E6%9D%83%E9%99%90.l70hivn1scg.jpg" class="lozad post-image"></p>
]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>09 面向对象特征之一:封装和隐藏</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/09%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E5%BE%81%E4%B9%8B%E4%B8%80_%E5%B0%81%E8%A3%85%E5%92%8C%E9%9A%90%E8%97%8F/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 面向对象特征之一：封装和隐藏</span></span><br><span class="line"><span class="comment"> * 我们程序设计追求 “高内聚，低耦合”</span></span><br><span class="line"><span class="comment"> * &gt; 高内聚：类内部数据操作细节自己完成，不允许外部干涉</span></span><br><span class="line"><span class="comment"> * &gt; 低耦合：仅对外暴露少量的方法用于自己使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 隐藏对象内部的复杂性，对外公开简单的接口。便于外界调用，从而提高系统</span></span><br><span class="line"><span class="comment"> * 的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，改暴露的暴露出来。</span></span><br><span class="line"><span class="comment"> * 这就是封装性的设计思想</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 封装性的体现：</span></span><br><span class="line"><span class="comment"> * 		我们将类的属性私有化（private），同时，提供公共（public）的方法来获取（getXxx）和设置（setXxx）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 		拓展：封装性的体现</span></span><br><span class="line"><span class="comment"> * 			①如上</span></span><br><span class="line"><span class="comment"> * 			②不对外暴露的私有的方法 </span></span><br><span class="line"><span class="comment"> * 			③单列模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 权限修饰符</span></span><br><span class="line"><span class="comment"> * 	1. Java规定的4种权限（从小到大）：private、缺省（啥也没写）、protected、public</span></span><br><span class="line"><span class="comment"> * 	2. 4种权限可以修饰类及类的内部结构：属性、方法、构造器、内部类</span></span><br><span class="line"><span class="comment"> * 	3. 具体的，4种权限都可以用来修饰类的内部结构。修饰类的话，只能使用缺省和public</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 总结封装性：Java提供了四种权限修饰符来修饰类和类的内部结构，体现了类及类的内部结构在被调用时的可加性的大小。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0409</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">		a.name = <span class="string">&quot;大黄&quot;</span>;</span><br><span class="line">		a.age = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//		a.legs = 4;</span></span><br><span class="line">		a.show();</span><br><span class="line">		a.setLegs(<span class="number">100</span>);</span><br><span class="line">		a.show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> legs;<span class="comment">//腿的个数,配合方法限制legs&gt;=0</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;进食&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;name=&quot;</span>+ name+<span class="string">&quot; age=&quot;</span>+ age+<span class="string">&quot; legs=&quot;</span>+legs);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLegs</span><span class="params">(<span class="type">int</span> l)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(l&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">			legs = l;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			legs = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLegs</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> legs;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>11 构造器</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/11%20%E6%9E%84%E9%80%A0%E5%99%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类的结构之构造器（构造方法、constructor）的使用</span></span><br><span class="line"><span class="comment"> * 一、构造器的作用</span></span><br><span class="line"><span class="comment"> * 		创建对象</span></span><br><span class="line"><span class="comment"> * 		初始化对象的信息</span></span><br><span class="line"><span class="comment"> * 二、说明</span></span><br><span class="line"><span class="comment"> * 	1.如果没有显式定义类的构造器的话，则系统会默认提供一个空参的构造器</span></span><br><span class="line"><span class="comment"> * 	2.定义构造器的格式：权限修饰符 类名(形参列表)&#123;&#125;</span></span><br><span class="line"><span class="comment"> * 	3.构造器也可以重载</span></span><br><span class="line"><span class="comment"> * 	4.一旦自己显式定义了类的构造器之后，系统就不再提供空参的构造器了</span></span><br><span class="line"><span class="comment"> * 	5.一个类中，至少会有一个构造器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0411</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">SomeOne</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SomeOne</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeOne</span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="comment">//构造器</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">SomeOne</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;构造器SomeOne...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//使用构造器给对象初始化</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">SomeOne</span><span class="params">(String s,<span class="type">int</span> a)</span> &#123;</span><br><span class="line">		name = s;</span><br><span class="line">		age = a;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;name:&quot;</span>+name+<span class="string">&quot; age:&quot;</span>+age);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>12 属性赋值的先后顺序</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/12%20%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E7%9A%84%E5%85%88%E5%90%8E%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 属性赋值的先后顺序</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.默认初始化</span></span><br><span class="line"><span class="comment"> * 2.显式初始化</span></span><br><span class="line"><span class="comment"> * 3.构造器中赋值</span></span><br><span class="line"><span class="comment"> * 4.通过&quot;对象.属性&quot;或&quot;对象.方法&quot;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2在3之前，即		1-2-3-4</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0412</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">TestClass1</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClass1</span>();</span><br><span class="line">		System.out.println(demo.age);<span class="comment">//12</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestClass1</span>&#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//显式赋值</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">TestClass1</span><span class="params">()</span> &#123;</span><br><span class="line">		age = <span class="number">12</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>JavaBean是什么</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/JavaBean%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JavaBean是一种Java语言写成的可重用组件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 所谓JavaBean，是指符合如下标准的Java类</span></span><br><span class="line"><span class="comment"> * 	&gt; 类是公共的</span></span><br><span class="line"><span class="comment"> *  &gt; 有一个无参的公共的构造器</span></span><br><span class="line"><span class="comment"> *  &gt; 有属性，且有对应的get、set方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJavaBean</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomerTest</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">CustomerTest</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">		id = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span> &#123;</span><br><span class="line">		name = n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>import关键字的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/import%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * import 关键字的使用</span></span><br><span class="line"><span class="comment"> * import：导入</span></span><br><span class="line"><span class="comment"> * 1.在源文件中显式地使用import结构导入指定包下的类、接口</span></span><br><span class="line"><span class="comment"> * 2.声明在包的声明和类的声明之间</span></span><br><span class="line"><span class="comment"> * 3.如果导入多个结构，并列写出即可</span></span><br><span class="line"><span class="comment"> * 4.可以用*，导入包下所有结构</span></span><br><span class="line"><span class="comment"> * 5.如果使用的类或接口是java.lang包下定义的（如String），则可以省略import结构</span></span><br><span class="line"><span class="comment"> * 6.如果使用的类或接口是本包下，也不用import导入</span></span><br><span class="line"><span class="comment"> * 7.如果在源文件中使用了不同包下的同名的类，则必须至少有一个类要用全类名</span></span><br><span class="line"><span class="comment"> * 8.使用“xxx.*”方式表名可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，仍需要显示导入</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 9.import static:导入指定类或接口中的静态结构：属性或方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestImport</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		</span><br><span class="line"><span class="comment">//		不同包的同名变量的使用，全类名</span></span><br><span class="line">		chapter04.<span class="type">Person1</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">chapter04</span>.Person1();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>package关键字的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/package%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * package关键字的使用</span></span><br><span class="line"><span class="comment"> * 	1.为了更好地实现项目中类的管理，提供包的概念</span></span><br><span class="line"><span class="comment"> * 	2.使用package声明类或接口所属的包，声明在源文件的首行</span></span><br><span class="line"><span class="comment"> * 	3.包，属于标识符，遵循标识符的命名规则（xxxzzzyyy）</span></span><br><span class="line"><span class="comment"> * 	4.每.一次代表一层文件目录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 补充：同一个包下，不能命名同名的接口、类</span></span><br><span class="line"><span class="comment"> * 		不同的包下可以命名同名的接口、类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>this 关键字的使用</title>
    <url>/2023/04/14/Java%20Language%20Basics/%E7%AC%AC%E5%9B%9B%E7%AB%A0/this%20%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre class="highlight"><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * this 关键字的使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * this 可以理解为当前对象，可以修饰调用属性、方法、构造器</span></span><br><span class="line"><span class="comment"> * 当类的形参和属性重名时，可以用this进行区分</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * this修饰、调用构造器</span></span><br><span class="line"><span class="comment"> * 		我们在类的构造其中可以使用this(形参列表)</span></span><br><span class="line"><span class="comment"> * 		构造器不能自己调自己，否则就像是死循环，也不能几个构造器环形调用，一直掉下去没完了</span></span><br><span class="line"><span class="comment"> * 		因此，至少有一个构造器不能用this调用构造器</span></span><br><span class="line"><span class="comment"> * 		另外，构造器用this调用时，只能位于首行，因此也只能this调一个</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> chapter04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dopphu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//import chapter04.Animal;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestKeyWord_this</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Person1</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person1</span>();</span><br><span class="line">		<span class="type">Person1</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person1</span>(<span class="string">&quot;Dopphu&quot;</span>,<span class="number">12</span>);</span><br><span class="line">		p1.show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person1</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Person1</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">		<span class="comment">//一顿操作</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Person1</span><span class="params">(String s)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>();<span class="comment">//this调用构造器</span></span><br><span class="line">		<span class="built_in">this</span>.name = s;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Person1</span><span class="params">(String s,<span class="type">int</span> a)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>(s);<span class="comment">//this调用构造器</span></span><br><span class="line">		<span class="built_in">this</span>.id = a;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre>

]]></content>
      <categories>
        <category>Java Language Basics</category>
        <category>第四章 面向对象(上)</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo的Kaze主题除首页外无法搜索的问题</title>
    <url>/2023/04/14/hexo%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>关于Hexo的Kaze主题有一个bug，这个bug在Kaze的github仓库issue中已经有人提出了，</p>
<p>解释了bug产生的原因。</p>
<p><a href="https://github.com/theme-kaze/hexo-theme-kaze/issues/75">搜索功能在首页之外不可用 · Issue #75 · theme-kaze&#x2F;hexo-theme-kaze · GitHub</a></p>
<p>我个人在经过读源码（瞎读的，因为不了解js和ejs）有个不成熟的解决办法，仅供参考。</p>
<p>Kaze中layout文件夹下有一个<strong>layout.ejs</strong>文件，最下面有一段代码</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.staticaly.com/gh/Dopphu/PicX-images@main/20230414/image.6y26pu7jibw0.png" class="lozad post-image"src="https://cdn.staticaly.com/gh/Dopphu/PicX-images@main/20230414/image.6y26pu7jibw0.png"></p>
<p>绿色是作者源码，我把里面内容改了，经过试验，可以在其他页面进行搜索了。</p>
<p>下面是一些废话，可以不看</p>
<h2 id="我的思考-其实最后还是代码给面子，一改就成了"><a href="#我的思考-其实最后还是代码给面子，一改就成了" class="headerlink" title="我的思考(其实最后还是代码给面子，一改就成了)"></a>我的思考(其实最后还是代码给面子，一改就成了)</h2><p>根据bug发现者的描述，产生bug的原因是<strong>search.json</strong>文件的路径出现了错误，我也有了解决的大概思路。我不断翻Kaze的文件，想从中找出哪个方法的search.json的路径出错了。</p>
<p>由于我们在写页面的时候一般习惯把相应功能的js写在html元素附近，所以我先在博客的首页搜索框附近找js文件或代码，很幸运源码展示的似乎就是我们一般的习惯写法。</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.staticaly.com/gh/Dopphu/PicX-images@main/20230414/image.nof3lf6c8sw.webp" class="lozad post-image"src="https://cdn.staticaly.com/gh/Dopphu/PicX-images@main/20230414/image.nof3lf6c8sw.webp"></p>
<p>当然这是马后炮了，我当时也是试着去看<strong>main.js</strong>有没有需要的线索，确实有<strong>localSearch</strong>方法的定义，但是很遗憾我最后也没看懂是干嘛的。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">    window<span class="token punctuation">.</span><span class="token function-variable function">localSearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">fetch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token operator">></span>e<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> t <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"search-input"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            o <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"search-content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token string">'&lt;ul class="search-result-list">'</span><span class="token punctuation">,</span>
                n <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[&lt;>&amp;"]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                    <span class="token string-property property">"&lt;"</span><span class="token operator">:</span> <span class="token string">"&lt;"</span><span class="token punctuation">,</span>
                    <span class="token string-property property">">"</span><span class="token operator">:</span> <span class="token string">">"</span><span class="token punctuation">,</span>
                    <span class="token string-property property">"&amp;"</span><span class="token operator">:</span> <span class="token string">"&amp;"</span><span class="token punctuation">,</span>
                    <span class="token string-property property">'"'</span><span class="token operator">:</span> <span class="token string">""</span>"
                <span class="token punctuation">&#125;</span> <span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">;</span>
                        e<span class="token punctuation">.</span>title <span class="token operator">&amp;&amp;</span> <span class="token string">""</span> <span class="token operator">!==</span> e<span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Untitled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">let</span> l <span class="token operator">=</span> e<span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">const</span> s <span class="token operator">=</span> e<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;[^>]+></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                        <span class="token keyword">const</span> i <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">!==</span> s <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> c <span class="token operator">=</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>o <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            t <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> &lt; li > &lt;a href = "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>e<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"class = "search-result-title" > '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>l<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/a></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> o<span class="token operator">=</span>e<span class="token punctuation">.</span>content<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> e<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>c<span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>length<span class="token punctuation">,</span>c<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s<span class="token operator">=</span>o<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">"gi"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">' &lt; em class = "search-keyword" > '</span><span class="token operator">+</span>n<span class="token operator">+</span><span class="token string">"&lt;/em>"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">+=</span><span class="token string">' &lt; p class = "search-result" > '</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">"...&lt;/p>"</span><span class="token punctuation">&#125;</span>t<span class="token operator">+=</span><span class="token string">"&lt;/li>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">+=</span><span class="token string">"&lt;/ul>"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">===</span>t<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"&lt;li>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> o<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">' &lt; ul > &lt;span class = "local-search-empty" > 没有搜索到结果 &lt; span > &lt;/ul>'</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>t<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是我了解到似乎是在通过这个方法发送请求，即发送搜索框的内容，接收返回来的搜索数据。但是search.json还是不知道在哪给的路径，猜测可能是作为该方法的参数给的。</p>
<p>继续翻文件夹，我又发现了<code>script/generators/search.js</code>这个文件，似乎和搜索有关</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*
  Source: https://github.com/forsigner/hexo-search/blob/master/index.js
  License: MIT License
  Modify: songhn for hexo-theme-kaze
*/</span>

<span class="token comment">/* global hexo */</span>
<span class="token string">'use strict'</span>
<span class="token comment">// eslint-disable-next-line camelcase</span>
<span class="token keyword">const</span> url_for <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'hexo-util'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url_for</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>hexo<span class="token punctuation">)</span>
hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>generator<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'_hexo_generator_search'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">locals</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> hexo<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>config

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>search <span class="token operator">||</span> <span class="token operator">!</span>config<span class="token punctuation">.</span>search<span class="token punctuation">.</span>enable <span class="token operator">||</span> <span class="token operator">!</span>config<span class="token punctuation">.</span>search<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> searchSource <span class="token operator">=</span> config<span class="token punctuation">.</span>search<span class="token punctuation">.</span>field<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> locals<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">'-date'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> pages <span class="token operator">=</span> locals<span class="token punctuation">.</span>pages
  <span class="token keyword">let</span> sources <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>searchSource <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> searchSource <span class="token operator">!=</span> <span class="token string">'all'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>searchSource <span class="token operator">==</span> <span class="token string">'posts'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      sources <span class="token operator">=</span> posts<span class="token punctuation">.</span>data
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>searchSource <span class="token operator">==</span> <span class="token string">'pages'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      sources <span class="token operator">=</span> pages<span class="token punctuation">.</span>data
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    sources <span class="token operator">=</span> posts<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>pages<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  sources<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> categories <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> tags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>layout <span class="token operator">==</span> <span class="token string">'post'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>categories <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        post<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">categorie</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          categories<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>categorie<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>tags <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        post<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          tags<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> post<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token function">url_for</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>post<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">content</span><span class="token operator">:</span> config<span class="token punctuation">.</span>search<span class="token punctuation">.</span>searchContent
        <span class="token operator">?</span> post<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;[^&lt;>]+></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
      <span class="token literal-property property">categories</span><span class="token operator">:</span> categories<span class="token punctuation">,</span>
      <span class="token literal-property property">tags</span><span class="token operator">:</span> tags<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/search.json'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>观察几个if判断，发现page、all、post这几个值，这是我们在Kaze主题中可以配置的搜索范围，接着看到返回值，猜测这可能就是返回的搜索解果，但是这个path不知道是干啥的，按理来说搜索完，就不需要json文件了才对。（这也可能就是Kaze文档中说search的path配置项无用的原因）</p>
<p>所以，按照之前的猜测，search.json是网站生成的时候就有的，localSearch的参数就可能是json文件的路径。</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.staticaly.com/gh/Dopphu/PicX-images@main/20230414/image.3b53wpvfe3s0.webp" class="lozad post-image"src="https://cdn.staticaly.com/gh/Dopphu/PicX-images@main/20230414/image.3b53wpvfe3s0.webp"></p>
<p>然后我们去找是怎么渲染这个script标签的，因为搜索功能在nav，我们去找layout下的<strong>nav.ejs</strong>，果然在这里，我也看不懂什么意思，直接改。</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.staticaly.com/gh/Dopphu/PicX-images@main/20230414/image.7e3a88i70g00.webp" class="lozad post-image"src="https://cdn.staticaly.com/gh/Dopphu/PicX-images@main/20230414/image.7e3a88i70g00.webp"></p>
<p>然后就很给面子，其他页面也可以搜索了</p>
<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.staticaly.com/gh/Dopphu/PicX-images@main/20230414/image.3rcltq1ns4u0.webp" class="lozad post-image"src="https://cdn.staticaly.com/gh/Dopphu/PicX-images@main/20230414/image.3rcltq1ns4u0.webp"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
